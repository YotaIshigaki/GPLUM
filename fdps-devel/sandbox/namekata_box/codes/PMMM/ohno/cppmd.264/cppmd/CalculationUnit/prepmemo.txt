

makelongcomm
make MPI sub-communicator that contain longrange nodes





simulator

CalcPreparator_::makeoperations(node_id, 
                                  opts_->debug.withlong, 
                                  opts_->debug.withbond, 
                                  citype,
                                  long_plan, num_long_only);

CalcPreparator_::makegeometry(node_id, 
                                opts_->debug.nodediv3d,
                                opts_->debug.celldiv3d_in_node,
                                num_node, num_short,
                                short_id, node_id_of_shorts,
                                num_total_set, opts_->debug.celldiv,
                                nodediv3d, celldiv3d_in_node, celldiv3d);


CalcPreparator_::maketarget(node_id, short_id, num_short,
                              total_num_particle, max_per_cell, 
                              boxsize, cellmargin, citype, opts_->debug.cutoff,
                              num_total_set);
-> num_total_set
  particle_setid cell ids in this node
  cellsubset
  sendparticle_target_id[sindex], node_ids where send own cell
  sendparticle_setid[sindex][cindex], own cell ids to send
  recvparticle_target_id[rindex], node_ids where receive ghost cell for short
  recvparticle_setid[rindex][gindex], ghost cell ids
  move_target_id, move_setid
  targetset[mycell][] ghost cells that interact mycell in this node
  ghostpairs ghost cell pairs short-force target(SmallBall or NT like)


CalcPreparator_::makeparticle(short_id, total_num_particle, num_freedom,
#if 1
                                num_copy,
                                num_copy_local,
#endif
                                fcc->particle, waterlist,
                                fcc->potentialmodel, ljcec);
->
  particlearray particles in this node
  typerangearray[cindex] where particles stored in particlearray for each cell
  waterlist list of water

CalcPreparator_::makebond(short_id, covalent_bond, excludewaterbond);

CalcPreparator_::makelongrangegeometry(long_plan,num_long_only,num_long,
	long_geometry);
-> long_geometry

CalcPreparator_::makelongcomm(long_plan,long_geometry,num_long,num_short,
                                MPI_COMM_WORLD,node_id,short_id,long_id);
-> long_id,
  mpi_long_comm
  longid_to_worldid
  

CalcPreparator_::makelongrangerequiredcell(long_geometry,long_fringe,
                                             long_id,
                                             long_reqcell_list);
-> long_reqcell_list[] short-cell ids for long range

CalcPreparator_::makeselfenergycell_list(long_geometry,
                                           long_id,
                                           long_reqcell_list,
                                           selfenergycell_list);
-> selfenergycell_list

CalcPreparator_::makecellidlistsendtolong(long_geometry,long_fringe,num_long,
                                            short_id,
                                            send_to_long_list);

-> send_to_long_list[long_id][] short-cell ids send to long-node long_id

CalcPreparator_::make_long_short_comm(num_node, num_long, 
                                        node_id, short_id, long_id,
                                        MPI_COMM_WORLD,
                                        send_to_long_list,
                                        long_reqcell_list,
                                        mpi_comm_ls_list,
                                        long_short_id,
                                        sender_local_id,
                                        idinlong_to_longrank,
                                        receiver_local_rank,
                                        long_recv_set_id_lists,
                                        sender_global_id_list,
                                        reciever_global_id_list);

-> mpi_comm_ls_list[long_id],  MPI communicators of short-long communication for long_id 
   long_short_id[long_id],  rank of this node at short-long communication for long_id, NO_LONG_ID if out of that short-long communication
   sender_local_id[], rank of sender at short-long communication for this node, empty if this node is not long node
   idinlong_to_longrank[], map id and rank at short-long communication for this node
   receiver_local_rank, 
   long_recv_set_id_lists[sender_index][], ghost for only long from sender
   sender_global_id_list[], rank of sender at world,
   reciever_global_id_list

CalcPreparator_::makelongrangeparameter(opts_->debug.cutoff,
                                          pme_alpha,
                                          pme_kCutoff,
                                          pme_surfaceDipole,
                                          boxsize,
                                          gridLengths,
                                          pme_order,
                                          pmetype,
                                          grid_num,
                                          long_geometry,
                                          multigridType,
                                          multigridIteration,
                                          multigridFFTlevel
                                         );
->
  longrangeparameter

CalcPreparator_::constructcommunicator(short_id, max_per_cell, shortidtorank,
                                         num_long, long_id,
                                         mpi_comm_ls_list, long_short_id, 
                                         sender_local_id, 
                                         long_recv_set_id_lists,
                                         receiver_local_rank,
                                         send_to_long_list,
                                         idinlong_to_longrank,
                                         opts_->mpi_parallel_control.short_comm_pattern,
                                         opts_->mpi_parallel_control.move_comm_pattern);
->
  communicator
  longreceiver
  longsender

CalcPreparator_::constructcalculationunit(node_id, short_id,
                                                boxsize, citype,
                                                opts_->debug.cutoff,
#ifdef USE_PAIRLIST
                                                pairlistmargin,
#endif
                                                opts_->temperature_control,
                                                cltype, 
                                                covalent_bond_parameter_list);
return *CalculationUnit


CalcPreparator_::constructselflongset(long_id,short_id,
                                        calculationunit->calcforce.shortset,
                                        send_to_long_list,
                                        selfenergycell_list,
                                        calculationunit->calcforce.self_longset_index,
                                        calculationunit->calcforce.self_selfenergycell_index);
-> calculationunit->calcforce.self_longset_index,
   calculationunit->calcforce.self_selfenergycell_index


CalcPreparator_::constructghostlongset(long_id,short_id,
                                         long_recv_set_id_lists,
                                         calculationunit->calcforce.shortset,
                                         selfenergycell_list,
                                         calculationunit->calcforce.ghostlongset,
                                         calculationunit->calcforce.ghost_selfenergycell_list);
#endif



TODO

expire_reverse
