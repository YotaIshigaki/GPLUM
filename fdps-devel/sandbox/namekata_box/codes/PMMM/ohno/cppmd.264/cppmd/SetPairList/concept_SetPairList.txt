SetPairList.h

粒子セットのペアリスト
(ペアリストをセットするのではない)

多数のノードから集めたj粒子セット(jcell)にできるだけ連続アクセスしたい。

自ノードのi粒子セット(icell)が一個の場合は、jcellが相互作用種毎(LJ,LJCoulomb,Coulomb)に充填されていればよい。
LJ : LJのみ、電荷なし
LJCoulomb : LJあり、電荷あり
Coulomb : LJなし、電荷のみ
 i,jペアの相互作用
 \j   LJ  LJC   C
 i\
 LJ   LJ  LJ  ---
 LJC  LJ  LJC   C
 C    ---   C   C

i粒子セットのLJが[0-ni_lj),LJCoulombが[ni_lj,ni_ljc),Coulombが[ni_lj,Ni)、
j粒子セットのLJが[0-nj_lj),LJCoulombが[nj_lj,nj_ljc),Coulombが[nj_lj,Nj) であれば、
 for(i=0;i<ni_lj;i++){
   for(j=0;j<nj_ljc;j++){
     LJ相互作用
   }
 }
 for(i=ni_lj;i<ni_ljc;i++){
   for(j=0;j<nj_lj;j++){
     LJ相互作用
   }
 }
 for(i=ni_lj;i<ni_ljc;i++){
   for(j=nj_lj;j<nj_ljc;j++){
     LJCoulomb相互作用
   }
 }
 for(i=ni_lj;i<ni_ljc;i++){
   for(j=nj_ljc;j<Nj;j++){
     Coulomb相互作用
   }
 }
 for(i=ni_ljc;i<Ni;i++){
   for(j=nj_lj;j<Nj;j++){
     Coulomb相互作用
   }
 }

現状はjcellでデータが分断されているのと、jcell毎に周期境界の座標シフト処理をするので、jcell単位でこのような相互作用種別ループになっている。jcellが小さいと最内側ループが数回とかで非効率。
j粒子セットの相互作用種別パッキングと座標シフトを収集時に行なうことで、最内側ループを長くしたい。


自ノードのi粒子セットが複数個の場合、それぞれにj粒子セットを持つと重複分無駄が多い。j粒子セットは一個にまとめると、i粒子セットによって使う領域、使わない領域を識別する必要がある。
LJCoulomb相互作用部分を例にすると、
i粒子セット0,1が[ni0_lj,ni0_ljc),[ni1_lj,ni1_ljc)
j粒子セット[nj_lj,nj_ljc)のうち、i粒子セット0のみの相手が[nj_lj,nj_ljc0),共通の相手が[nj_ljc0,nj_ljc1),i粒子セット1のみの相手が[nj_ljc1,nj_ljc)だった場合、
i粒子セット0は[nj_lj,nj_ljc1)、i粒子セット1は[[nj_ljc0,nj_ljc)でループする。

 for(i=ni0_lj;i<ni0_ljc;i++){
   for(j=nj_lj;j<nj_ljc1;j++){
     LJCoulomb相互作用
   }
 }
 for(i=ni1_lj;i<ni1_ljc;i++){
   for(j=nj_lj0;j<nj_ljc;j++){
     LJCoulomb相互作用
   }
 }

i粒子セットが二個までは、
| 0のみ   | 共通  | 1のみ  |
と充填できるが、三個目からは
| 0 | 0,2 | 0,1 | 0,1,2 | 1 | 1,2 | 2 |
というように0,1は完全連続、2はとびとび、とする必要がある。
境界をn0,n1,n2,n3,n4,n5,n6,n7,n8とすると
セット0 : n0 -- n4
セット1 : n2 -- n6
セット2 : n1 -- n2, n3 -- n4, n5 -- n7
という範囲でj粒子にアクセスする。
0,1に関しても充填を工夫しない場合は、とびとびの領域指定が必要。

一個の範囲は二個のint from,to で指定(ParticleRange構造体)
isets[number_of_iset] : 各i粒子セットの範囲
jsets[number_of_iset][numbe_of_jset_for_iset] : 各i粒子セットと作用するj粒子範囲(複数), numbe_of_jset_for_isetはisetによって異なる(vector of vector で実装)。
ループ構造は

 for(long iset=0;iset<isets.size();iset++){
   for(long i=isets[iset].from;i<isets[iset].to;i++){
     for(long jset=0;jset<jsets[iset].size();jset++){
       for(long j=jsets[iset][jset].from;j<jsets[iset][jset].to;j++){
         interaction i-particle[i] and j-particle[j]
       }
     }
   }
 }

問題
1 断片化が激しい場合にloop(四重)や、jsets読み出しのオーバヘッドが見えないか。
  完全にjcell一個づつの範囲に断片化すると現状と同じ？

