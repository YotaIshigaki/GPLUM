!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABS	Astro.h	11;"	d
ADD_PERTURBATION	HydroKernel.c	17;"	d	file:
AGBCount	DataStructures.h	/^    int       AGBCount;         \/\/ Number count for AGB mass loss.$/;"	m	struct:StructPstar_tag
AGBCount	StructuresForIO.h	/^    int AGBCount;$/;"	m	struct:StructPstarIOCompact
AGBCount	StructuresForIO.h	/^    int AGBCount;$/;"	m	struct:StructPstarIOCompactDouble
AGBCount	StructuresForIO.h	/^    int AGBCount;$/;"	m	struct:StructPstarIOCompactMix
AGBCount	StructuresForIO.h	/^    int AGBCount;$/;"	m	struct:StructPstarIOLean
AGNForceFromExternalPotentials	SetUpTestRun.c	/^void AGNForceFromExternalPotentials(void){$/;"	f
AGN_TORUS_RUN_LIVE_BH	SetUpTestRun.c	13054;"	d	file:
ALPHA	Constants.h	49;"	d
ALPHA_C	Constants.h	51;"	d
ALPHA_C2	Constants.h	52;"	d
ALPHA_C2_CGS	Constants.h	64;"	d
ALPHA_CGS	Constants.h	61;"	d
ALPHA_C_CGS	Constants.h	63;"	d
AM	DataStructures.h	/^    double  AM[3];          \/\/ The values of angular momentum.$/;"	m	struct:StructPsink_tag
AM	StructuresForIO.h	/^    double AM[3];$/;"	m	struct:StructPsinkIOCompactDouble
AM	StructuresForIO.h	/^    float AM[3];$/;"	m	struct:StructPsinkIOCompact
AM	StructuresForIO.h	/^    float AM[3];$/;"	m	struct:StructPsinkIOCompactMix
AM	StructuresForIO.h	/^    float AM[3];$/;"	m	struct:StructPsinkIOLean
ARCDIR	Makefile	/^ARCDIR    = .\/archives$/;"	m
ASCIIDATA_DUMP_INTERVAL	reconfig.h	925;"	d
ASCIIDATA_DUMP_INTERVAL	reconfig.h	926;"	d
ASCIIFileName	DataStructures.h	/^    char ASCIIFileName[MaxCharactersInLine];$/;"	m	struct:StructPall
ASR_ALERT	Astro.h	87;"	d
ASR_Pack4D2UFormat	IO.c	/^static void ASR_Pack4D2UFormat(struct StructWrite4D2UBody Body[], const int Type){$/;"	f	file:
ASR_Pack4D2UFormatDM	IO.c	/^static void ASR_Pack4D2UFormatDM(struct StructWrite4D2UBody Body[]){$/;"	f	file:
ASR_Pack4D2UFormatExtra	IO.c	/^static void ASR_Pack4D2UFormatExtra(struct StructWrite4D2UBody Body[], const int Type){$/;"	f	file:
ASR_Pack4D2UFormatExtraDM	IO.c	/^static void ASR_Pack4D2UFormatExtraDM(struct StructWrite4D2UBody Body[]){$/;"	f	file:
ASR_Pack4D2UFormatExtraHydro	IO.c	/^static void ASR_Pack4D2UFormatExtraHydro(struct StructWrite4D2UBody Body[]){$/;"	f	file:
ASR_Pack4D2UFormatExtraSink	IO.c	/^static void ASR_Pack4D2UFormatExtraSink(struct StructWrite4D2UBody Body[]){$/;"	f	file:
ASR_Pack4D2UFormatExtraStar	IO.c	/^static void ASR_Pack4D2UFormatExtraStar(struct StructWrite4D2UBody Body[]){$/;"	f	file:
ASR_Pack4D2UFormatHydro	IO.c	/^static void ASR_Pack4D2UFormatHydro(struct StructWrite4D2UBody Body[]){$/;"	f	file:
ASR_Pack4D2UFormatSink	IO.c	/^static void ASR_Pack4D2UFormatSink(struct StructWrite4D2UBody Body[]){$/;"	f	file:
ASR_Pack4D2UFormatStar	IO.c	/^static void ASR_Pack4D2UFormatStar(struct StructWrite4D2UBody Body[]){$/;"	f	file:
ASR_SetSizeArray	IO.c	/^static void ASR_SetSizeArray(int SizeArray[], const int Type){$/;"	f	file:
ASR_SetSizeArrayExtra	IO.c	/^static void ASR_SetSizeArrayExtra(int SizeArray[], const int Type, const int LocalNumbers[]){$/;"	f	file:
ASR_Write4D2UFormat	IO.c	/^static void ASR_Write4D2UFormat(FILE *fp, struct StructWrite4D2UBody Body[], const int Size){$/;"	f	file:
ASR_Write4D2UFormatHeader	IO.c	/^static void ASR_Write4D2UFormatHeader(FILE *fp, const int Index){$/;"	f	file:
ASR_Write4D2UFormatHeaderExtra	IO.c	/^static void ASR_Write4D2UFormatHeaderExtra(FILE *fp, const int Index, const int Numbers[]){$/;"	f	file:
ASSERT	debug.h	4;"	d
ASSERT	debug.h	6;"	d
ASURA_Exit	Exit.c	/^void ASURA_Exit(void){$/;"	f
AU_CGS	Constants.h	98;"	d
AVOGADROS_NUMBER	Constants.h	39;"	d
AVOGADROS_NUMBER_CGS	Constants.h	44;"	d
Aaxis	main.c	5388;"	d	file:
Acc	DataStructures.h	/^    double    Acc[3];       \/\/ The acceleration of the particle. $/;"	m	struct:StructPbody_tag
Acc	DataStructures.h	/^    double Acc[3];$/;"	m	struct:StructGravityAccPotCache
Acc	DataStructures.h	/^    double Acc[3];$/;"	m	struct:StructYoungStarResultCache
Acc	ForceTree.c	/^    double Acc[3];$/;"	m	struct:StructForceImport	file:
Acc	StructuresForIO.h	/^    double Acc[3];$/;"	m	struct:StructPbodyIOCompactDouble
Acc	StructuresForIO.h	/^    float Acc[3];$/;"	m	struct:StructPbodyIOCompact
Acc	StructuresForIO.h	/^    float Acc[3];$/;"	m	struct:StructPbodyIOCompactMix
Acc	StructuresForIO.h	/^    float Acc[3];$/;"	m	struct:StructPbodyIOLean
AccAccessAge	IMF.c	/^static gsl_interp_accel *AccAccessAge[LIFETIME_Z];$/;"	v	file:
AccAccessLogT	Cooling.c	/^static gsl_interp_accel *AccAccessLogT[SIZE_TABLE_Z][SIZE_TABLE_G0][SIZE_TABLE_FH2];$/;"	v	file:
AccAccessMass	IMF.c	/^static gsl_interp_accel *AccAccessMass[LIFETIME_Z];$/;"	v	file:
AccOld	DataStructures.h	/^    double    AccOld[3];    \/\/ <LEAN> The acceleration of the particle. $/;"	m	struct:StructPbody_tag
AccOld	StructuresForIO.h	/^    double AccOld[3];$/;"	m	struct:StructPbodyIOCompactDouble
AccOld	StructuresForIO.h	/^    float AccOld[3];$/;"	m	struct:StructPbodyIOCompact
AccOld	StructuresForIO.h	/^    float AccOld[3];$/;"	m	struct:StructPbodyIOCompactMix
AccretionMass	DataStructures.h	/^    double  AccretionMass;     \/\/ The accreted mass onto this sink particle.$/;"	m	struct:StructPsink_tag
AccretionMass	SinkParticle.c	/^    double AccretionMass;$/;"	m	struct:StructParticleDataForActiveSinkFOF	file:
AccretionMass	StructuresForIO.h	/^    double AccretionMass;$/;"	m	struct:StructPsinkIOCompactDouble
AccretionMass	StructuresForIO.h	/^    float AccretionMass;$/;"	m	struct:StructPsinkIOCompact
AccretionMass	StructuresForIO.h	/^    float AccretionMass;$/;"	m	struct:StructPsinkIOCompactMix
AccretionMass	StructuresForIO.h	/^    float AccretionMass;$/;"	m	struct:StructPsinkIOLean
AccretionMassGas	DataStructures.h	/^    double  AccretionMassGas;  \/\/ The accretion\/absorbtion gas mass.$/;"	m	struct:StructPsink_tag
AccretionMassGas	SinkParticle.c	/^    double AccretionMassGas;$/;"	m	struct:StructParticleDataForActiveSinkFOF	file:
AccretionMassGas	StructuresForIO.h	/^    double AccretionMassGas;$/;"	m	struct:StructPsinkIOCompactDouble
AccretionMassGas	StructuresForIO.h	/^    float AccretionMassGas;$/;"	m	struct:StructPsinkIOCompact
AccretionMassGas	StructuresForIO.h	/^    float AccretionMassGas;$/;"	m	struct:StructPsinkIOCompactMix
AccretionMassGas	StructuresForIO.h	/^    float AccretionMassGas;$/;"	m	struct:StructPsinkIOLean
AccretionMassStar	DataStructures.h	/^    double  AccretionMassStar; \/\/ The accretion\/absorbtion star mass.$/;"	m	struct:StructPsink_tag
AccretionMassStar	SinkParticle.c	/^    double AccretionMassStar;$/;"	m	struct:StructParticleDataForActiveSinkFOF	file:
AccretionMassStar	StructuresForIO.h	/^    double AccretionMassStar;$/;"	m	struct:StructPsinkIOCompactDouble
AccretionMassStar	StructuresForIO.h	/^    float AccretionMassStar;$/;"	m	struct:StructPsinkIOCompact
AccretionMassStar	StructuresForIO.h	/^    float AccretionMassStar;$/;"	m	struct:StructPsinkIOCompactMix
AccretionMassStar	StructuresForIO.h	/^    float AccretionMassStar;$/;"	m	struct:StructPsinkIOLean
AccretionMassToBH	DataStructures.h	/^    double  AccretionMassToBH; \/\/ The accretion mass onto the BH.$/;"	m	struct:StructPsink_tag
AccretionMassToBH	SinkParticle.c	/^    double AccretionMassToBH;$/;"	m	struct:StructParticleDataForActiveSinkFOF	file:
AccretionMassToBH	StructuresForIO.h	/^    double AccretionMassToBH;$/;"	m	struct:StructPsinkIOCompactDouble
AccretionMassToBH	StructuresForIO.h	/^    float AccretionMassToBH;$/;"	m	struct:StructPsinkIOCompact
AccretionMassToBH	StructuresForIO.h	/^    float AccretionMassToBH;$/;"	m	struct:StructPsinkIOCompactMix
AccretionMassToBH	StructuresForIO.h	/^    float AccretionMassToBH;$/;"	m	struct:StructPsinkIOLean
AccretionRadius	DataStructures.h	/^    double  AccretionRadius;\/\/ The sink-hydro accretion radius.$/;"	m	struct:StructPsink_tag
AccretionRadius	SinkParticle.c	/^    double  AccretionRadius;  \/\/ Sink radius.$/;"	m	struct:StructSinkCheckExport	file:
AccretionRadius	SinkParticle.c	/^    double  AccretionRadius;  \/\/ Sink radius.$/;"	m	struct:StructSinkExport	file:
AccretionRadius	SinkParticle.c	/^    double  AccretionRadius;  \/\/ Sink radius.$/;"	m	struct:StructSinkPosSizeExport	file:
AccretionRadius	StructuresForIO.h	/^    double AccretionRadius;$/;"	m	struct:StructPsinkIOCompactDouble
AccretionRadius	StructuresForIO.h	/^    float AccretionRadius;$/;"	m	struct:StructPsinkIOCompact
AccretionRadius	StructuresForIO.h	/^    float AccretionRadius;$/;"	m	struct:StructPsinkIOCompactMix
AccretionRadius	StructuresForIO.h	/^    float AccretionRadius;$/;"	m	struct:StructPsinkIOLean
AccumulateLFUV	FUV.c	/^static void AccumulateLFUV(const int CurrentHydroNodeID, const int NumberofField, double Pos[restrict][3], double LFUV[restrict]){$/;"	f	file:
ActivateAllparticles	SetUpTestRun.c	/^void ActivateAllparticles(void){$/;"	f
Active	DataStructures.h	/^    bool    Active;          \/\/ <TMP> <LEAN> if "OFF", the particle skips the cooling routine.$/;"	m	struct:StructPhydro_tag
Active	DataStructures.h	/^    bool    Active; \/\/ <LEAN> This is used for the individual time step.$/;"	m	struct:StructPbody_tag
Active	DataStructures.h	/^    bool Active;              \/\/ Active leaf check flag.$/;"	m	struct:StructNBCache_tag
Active	DataStructures.h	/^    bool Active;$/;"	m	struct:StructGravityCache
Active	DataStructures.h	/^    bool Active;$/;"	m	struct:StructYoungStarCache
Active	FUV.c	/^    bool Active;$/;"	m	struct:StructFUVTreeCache	file:
Active	HydroMisc.h	/^    bool Active;$/;"	m	struct:StructHydroAccExport
Active	HydroMisc.h	/^    bool Active;$/;"	m	struct:StructHydroAccImport
Active	PlantGravityTree.c	/^    bool Active;$/;"	m	struct:StructCachedData	file:
Active	PlantHydroTree.c	/^    bool Active;$/;"	m	struct:StructCachedData	file:
Active	PlantHydroTreeImported.c	/^    bool Active;$/;"	m	struct:StructCachedData	file:
Active	PlantStellarTree.c	/^    bool Active;$/;"	m	struct:StructCachedData	file:
Active	PlantYoungStarTree.c	/^    bool Active;$/;"	m	struct:StructCachedData	file:
Active	StructuresForIO.h	/^    bool Active;$/;"	m	struct:StructPbodyIOCompact
Active	StructuresForIO.h	/^    bool Active;$/;"	m	struct:StructPbodyIOCompactDouble
Active	StructuresForIO.h	/^    bool Active;$/;"	m	struct:StructPbodyIOCompactMix
ActiveBaryonMyID	MPIParameters.c	/^static int ActiveBaryonNumProcs,ActiveBaryonMyID;$/;"	v	file:
ActiveBaryonNumProcs	MPIParameters.c	/^static int ActiveBaryonNumProcs,ActiveBaryonMyID;$/;"	v	file:
ActiveBaryonRecvRank	DataStructures.h	/^    int ActiveBaryonRecvRank;$/;"	m	struct:StructCommunicationTable
ActiveBaryonSendRank	DataStructures.h	/^    int ActiveBaryonSendRank;$/;"	m	struct:StructCommunicationTable
ActiveFlag	Delayed.c	/^    bool ActiveFlag;$/;"	m	struct:StructDelayedFBActiveStars	file:
ActiveHydroMyID	MPIParameters.c	/^static int ActiveHydroNumProcs,ActiveHydroMyID;$/;"	v	file:
ActiveHydroNumProcs	MPIParameters.c	/^static int ActiveHydroNumProcs,ActiveHydroMyID;$/;"	v	file:
ActiveHydroRecvRank	DataStructures.h	/^    int ActiveHydroRecvRank;$/;"	m	struct:StructCommunicationTable
ActiveHydroSendRank	DataStructures.h	/^    int ActiveHydroSendRank;$/;"	m	struct:StructCommunicationTable
ActiveIndexList	CalcEffectiveSurfaceArea.c	/^static int *ActiveIndexList = NULL;$/;"	v	file:
ActiveIndexListAllocated	CalcEffectiveSurfaceArea.c	/^static int ActiveIndexListAllocated = 0;$/;"	v	file:
ActiveParticle	SizeDetermination.c	/^} *ActiveParticle;$/;"	v	typeref:struct:StructActiveParticle
ActiveStellarFeedbackParticle	StellarFeedback.c	/^struct StructActiveStellarFeedbackParticle *ActiveStellarFeedbackParticle; $/;"	v	typeref:struct:StructActiveStellarFeedbackParticle
ActiveStep	TestRuns.c	/^static int ActiveStep;$/;"	v	file:
AdaptiveSofteningFactor	DataStructures.h	/^    double AdaptiveSofteningFactor;   \/\/ Adaptive Softening Factor. If you not use this, you must set 1.0.$/;"	m	struct:StructPall
Add	Run.c	562;"	d	file:
AddDragTerm	BoundaryCondition.c	/^void AddDragTerm(void){$/;"	f
AddFeedbackEnergy	SNII.c	/^void AddFeedbackEnergy(const int NLocalTarget){$/;"	f
AddNBList	HydroAcc.c	/^static void AddNBList(const int Index, const int Nlist, const int Neighbors[restrict], const int mode){$/;"	f	file:
AddSmoothedEnergyBlastWave	SetUpTestRun.c	/^void AddSmoothedEnergyBlastWave(const int number){$/;"	f
AddSmoothedEnergyBlastWaveDirectSearch	SetUpTestRun.c	/^void AddSmoothedEnergyBlastWaveDirectSearch(const int PeakIndex, const int number){$/;"	f
AddSmoothedEnergyRMTV	TestRuns.c	/^void AddSmoothedEnergyRMTV(const int PeakIndex, const int number){$/;"	f
AddSpin	SetUpTestRun.c	/^static double AddSpin(void){$/;"	f	file:
AddStructPbody	StructureOperation.c	/^void AddStructPbody(const int nadd){$/;"	f
AddStructPhydro	StructureOperation.c	/^void AddStructPhydro(const int nadd){$/;"	f
AddStructPsink	StructureOperation.c	/^void AddStructPsink(const int nadd){$/;"	f
AddStructPstar	StructureOperation.c	/^void AddStructPstar(const int nadd){$/;"	f
AdditionalSinkFOFLink	SinkParticle.c	/^static void AdditionalSinkFOFLink(const int StartID, struct StructParticleDataForActiveSinkFOF ParticleDataForActiveFOF[restrict]){$/;"	f	file:
AdjustActiveNumber	main.c	/^void AdjustActiveNumber(const int nstride){$/;"	f
AdjustTimeStepAfterFeedback	TimeStep.c	/^void AdjustTimeStepAfterFeedback(void){$/;"	f
AgeLy	HIIregion.c	/^double AgeLy[] = {0,1,2,3,4,5,6,7,8,9,10,12,14,16,18,20,25,30,35,40,45,50,60,70,80,90,$/;"	v
AgeMax	TestRuns.c	/^static double AgeMax;$/;"	v	file:
Allocate	Allocators.c	/^void *Allocate(size_t nSize){$/;"	f
AllocateActiveStellarFeedbackParticle	StellarFeedback.c	/^static void AllocateActiveStellarFeedbackParticle(const int NActives){$/;"	f	file:
AllocateContactedDomainID	HydroKernel.c	/^static inline void AllocateContactedDomainID(void){$/;"	f	file:
AllocateContanctedDomainID	HIIregion.c	/^static inline void AllocateContanctedDomainID(void){$/;"	f	file:
AllocateRandomGenerator	RandomNumberGenerator.c	/^void AllocateRandomGenerator(void){$/;"	f
AllocateStructFOF	FOF.c	/^void AllocateStructFOF(void){$/;"	f
AllocateStructFOFCatalog	FOF.c	/^static void AllocateStructFOFCatalog(const int NFOFGroups){$/;"	f	file:
AllocateStructSinkFOF	SinkParticle.c	/^static void AllocateStructSinkFOF(const int Number){$/;"	f	file:
AllocateStructSinkFOFCatalog	SinkParticle.c	/^static void AllocateStructSinkFOFCatalog(const int NFOFGroups){$/;"	f	file:
Allocated	PreDecomposition.c	/^    int     Allocated;     $/;"	m	struct:StructDecomposition	file:
AllocationError	Errors.h	1;"	d
AllowSinkConversion	SinkParticle.c	/^static bool *AllowSinkConversion; \/\/ This is the acceptance\/regection flag of the gas->sink conversion.$/;"	v	file:
Alpha	DataStructures.h	/^    double    Alpha;      \/\/$/;"	m	struct:StructPhydro_tag
Alpha	HydroMisc.h	/^    double    Alpha;   \/\/ Alpha parameter for artificial viscosity.$/;"	m	struct:StructHydroAccExport
Alpha	StructuresForIO.h	/^    double Alpha;$/;"	m	struct:StructPhydroIOCompactDouble
Alpha	StructuresForIO.h	/^    float Alpha;$/;"	m	struct:StructPhydroIOCompact
Alpha	StructuresForIO.h	/^    float Alpha;$/;"	m	struct:StructPhydroIOCompactMix
Alpha	StructuresForIO.h	/^    float Alpha;$/;"	m	struct:StructPhydroIOLean
AncestorGlobalID	DataStructures.h	/^    unsigned long int    AncestorGlobalID; \/\/ Ancestor's Global ID.$/;"	m	struct:StructPhydro_tag
AncestorGlobalID	StructuresForIO.h	/^    unsigned long int AncestorGlobalID;$/;"	m	struct:StructPhydroIOCompact
AncestorGlobalID	StructuresForIO.h	/^    unsigned long int AncestorGlobalID;$/;"	m	struct:StructPhydroIOCompactDouble
AncestorGlobalID	StructuresForIO.h	/^    unsigned long int AncestorGlobalID;$/;"	m	struct:StructPhydroIOCompactMix
AncestorGlobalID	StructuresForIO.h	/^    unsigned long int AncestorGlobalID;$/;"	m	struct:StructPhydroIOLean
AntiForceFromBounaryRegions	SetUpTestRun.c	/^void AntiForceFromBounaryRegions(const int MultiplicationConstant){$/;"	f
ArtificialSpawnStarParticle	StarFormation.c	/^static void ArtificialSpawnStarParticle(const int index, const double FormationTime){$/;"	f	file:
ArtificialStarFormation	StarFormation.c	/^void ArtificialStarFormation(const double SFR, const double Duration){$/;"	f
ArtificialTempNhydro	StarFormation.c	/^int ArtificialTempNstars,ArtificialTempNtotal,ArtificialTempNhydro;$/;"	v
ArtificialTempNstars	StarFormation.c	/^int ArtificialTempNstars,ArtificialTempNtotal,ArtificialTempNhydro;$/;"	v
ArtificialTempNtotal	StarFormation.c	/^int ArtificialTempNstars,ArtificialTempNtotal,ArtificialTempNhydro;$/;"	v
AverageElementMass	EstimateXFe.c	/^struct StructAverageElementMass AverageElementMass[] = {$/;"	v	typeref:struct:StructAverageElementMass
AverageElementMassSize	EstimateXFe.c	/^const int AverageElementMassSize = 86;$/;"	v
Axis	DataStructures.h	/^    int Axis; \/\/ Axis for bisection $/;"	m	struct:StructInfoBiSection
B	HydroMisc.h	/^    double    B[3][3];$/;"	m	struct:StructHydroDensityExport
BASE_BIT	PowderSnow.c	17;"	d	file:
BOHR_RADIUS	Constants.h	56;"	d
BOHR_RADIUS_CGS	Constants.h	68;"	d
BOLTZMANN_CONSTANT	Constants.h	40;"	d
BOLTZMANN_CONSTANT_CGS	Constants.h	45;"	d
BOUNDARY_CONDITION_SPHERICAL_SHELL_EDGE	reconfig.h	486;"	d
BOUNDARY_CONDITION_SPHERICAL_SHELL_EDGE	reconfig.h	487;"	d
Baryon	DataStructures.h	/^    void    (*Baryon);   \/\/ <TMP> <LEAN>$/;"	m	struct:StructPbody_tag
BaryonMyID	MPIParameters.c	/^static int BaryonNumProcs,BaryonMyID;$/;"	v	file:
BaryonNumProcs	MPIParameters.c	/^static int BaryonNumProcs,BaryonMyID;$/;"	v	file:
BaryonRecvRank	DataStructures.h	/^    int BaryonRecvRank;$/;"	m	struct:StructCommunicationTable
BaryonSendRank	DataStructures.h	/^    int BaryonSendRank;$/;"	m	struct:StructCommunicationTable
BaseFileName	DataStructures.h	/^    char BaseFileName[MaxCharactersInLine];$/;"	m	struct:StructPall
BaseFileNameUnDefined	Errors.h	4;"	d
BaseInteractionLength	PreDecomposition.c	8;"	d	file:
BaseNameOfParameterLogs	ParameterLogs.c	/^char BaseNameOfParameterLogs[] = ".\/ParameterLogs";$/;"	v
BaseNumberForGrid	TestRuns.c	3555;"	d	file:
BaseNumberofChildren	DataStructures.h	/^    short BaseNumberofChildren;       \/\/ The maximum number of children is derived from the cube of this number.$/;"	m	struct:StructHydroRoot_tag
BaseNumberofChildren	DataStructures.h	/^    short BaseNumberofChildren;    \/\/ The maximum number of children is derived from the cube of this number.$/;"	m	struct:StructGravityRoot_tag
BaseNumberofChildren	DataStructures.h	/^    short BaseNumberofChildren;    \/\/ The maximum number of children is derived from the cube of this number.$/;"	m	struct:StructYoungStarRoot_tag
BiSectionQsort	PreDecomposition.c	/^static void BiSectionQsort(void){$/;"	f	file:
BiSectionQsortFreeDirection	PreDecomposition.c	/^static void BiSectionQsortFreeDirection(void){$/;"	f	file:
BiSectionQsortFreeDirectionNoUpdate	PreDecomposition.c	/^static void BiSectionQsortFreeDirectionNoUpdate(void){$/;"	f	file:
BiSectionQsortHybrid	PreDecomposition.c	/^static void BiSectionQsortHybrid(void){$/;"	f	file:
BiSectionQsortInteractionList	PreDecomposition.c	/^static void BiSectionQsortInteractionList(void){$/;"	f	file:
BinaryDump	IO.c	/^void BinaryDump(void){$/;"	f
BisectionDimension	config.h	174;"	d
BisectionDimension	reconfig.h	134;"	d
BisectionDimension	reconfig.h	136;"	d
BisectionDimension	reconfig.h	179;"	d
BisectionDimension	reconfig.h	181;"	d
BisectionDimension	reconfig.h	226;"	d
BisectionDimension	reconfig.h	228;"	d
BisectionDimension	reconfig.h	276;"	d
BisectionDimension	reconfig.h	278;"	d
BisectionDimension	reconfig.h	327;"	d
BisectionDimension	reconfig.h	329;"	d
BisectionDimension	reconfig.h	367;"	d
BisectionDimension	reconfig.h	369;"	d
BisectionDimension	reconfig.h	38;"	d
BisectionDimension	reconfig.h	392;"	d
BisectionDimension	reconfig.h	394;"	d
BisectionDimension	reconfig.h	40;"	d
BisectionDimension	reconfig.h	424;"	d
BisectionDimension	reconfig.h	426;"	d
BisectionDimension	reconfig.h	459;"	d
BisectionDimension	reconfig.h	461;"	d
BisectionDimension	reconfig.h	500;"	d
BisectionDimension	reconfig.h	502;"	d
BisectionDimension	reconfig.h	552;"	d
BisectionDimension	reconfig.h	554;"	d
BisectionDimension	reconfig.h	591;"	d
BisectionDimension	reconfig.h	593;"	d
BisectionDimension	reconfig.h	630;"	d
BisectionDimension	reconfig.h	632;"	d
BisectionDimension	reconfig.h	669;"	d
BisectionDimension	reconfig.h	671;"	d
BisectionDimension	reconfig.h	713;"	d
BisectionDimension	reconfig.h	715;"	d
BisectionDimension	reconfig.h	772;"	d
BisectionDimension	reconfig.h	774;"	d
BisectionDimension	reconfig.h	816;"	d
BisectionDimension	reconfig.h	818;"	d
BisectionDimension	reconfig.h	857;"	d
BisectionDimension	reconfig.h	859;"	d
BisectionDimension	reconfig.h	916;"	d
BisectionDimension	reconfig.h	918;"	d
BisectionDimension	reconfig.h	97;"	d
BisectionDimension	reconfig.h	98;"	d
BisectionDimension	reconfig.h	997;"	d
BisectionDimension	reconfig.h	999;"	d
BitMask	OrderingKey.c	5;"	d	file:
BitMax	OrderingKey.c	4;"	d	file:
BitSign	Astro.h	13;"	d
BlastSmoothedNumber	SetUpTestRun.c	1179;"	d	file:
BlastWaveKernel	SetUpTestRun.c	/^static double BlastWaveKernel(const double r, const double InvKerneli){$/;"	f	file:
Body	DataStructures.h	/^    StructPbodyptr  Body;   \/\/ <TMP> <LEAN> $/;"	m	struct:StructPsink_tag
Body	DataStructures.h	/^    StructPbodyptr  Body;   \/\/ <TMP> <LEAN>$/;"	m	struct:StructPhydro_tag
Body	DataStructures.h	/^    StructPbodyptr  Body;   \/\/ <TMP> <LEAN>$/;"	m	struct:StructPstar_tag
Body	SizeDetermination.c	/^    } Body;$/;"	m	struct:StructActiveParticle	typeref:union:StructActiveParticle::__anon7	file:
Body	SizeDetermination.c	/^    } Body;$/;"	m	struct:StructCSImport	typeref:union:StructCSImport::__anon6	file:
Body	StellarFeedback.h	/^    } Body;$/;"	m	struct:StructActiveStellarFeedbackParticle	typeref:union:StructActiveStellarFeedbackParticle::__anon10
BolometricLuminosity	DataStructures.h	/^    double BolometricLuminosity;$/;"	m	struct:StructPstar_tag
BolometricLuminosity	StructuresForIO.h	/^    double BolometricLuminosity;$/;"	m	struct:StructPstarIOCompactDouble
BolometricLuminosity	StructuresForIO.h	/^    float BolometricLuminosity;$/;"	m	struct:StructPstarIOCompact
BolometricLuminosity	StructuresForIO.h	/^    float BolometricLuminosity;$/;"	m	struct:StructPstarIOCompactMix
BolometricLuminosity	StructuresForIO.h	/^    float BolometricLuminosity;$/;"	m	struct:StructPstarIOLean
BoxCenter	DataStructures.h	/^    double BoxCenter[3];   \/\/ For Periodic condition : Center of the simluation box.$/;"	m	struct:StructPall
BoxSize	ReadGadgetFormat.c	/^  double   BoxSize;$/;"	m	struct:Gadget_io_header_1	file:
BufferExportRecv	DataStructures.c	/^void *BufferExportRecv;$/;"	v
BufferExportSend	DataStructures.c	/^void **BufferExportSend;$/;"	v
BufferHydroInteractionFlags	DataStructures.c	/^bool *BufferHydroInteractionFlags;$/;"	v
BufferImportRecv	DataStructures.c	/^void **BufferImportRecv;$/;"	v
BufferImportSend	DataStructures.c	/^void *BufferImportSend;$/;"	v
BuildFUVTree	FUV.c	/^static void BuildFUVTree(void){$/;"	f	file:
BuildGravityTree	PlantGravityTree.c	/^static void BuildGravityTree(void){$/;"	f	file:
BuildHierarchicalTimeStep	TimeStep.c	/^void BuildHierarchicalTimeStep(void){$/;"	f
BuildHydroTree	PlantHydroTree.c	/^static void BuildHydroTree(void){$/;"	f	file:
BuildHydroTreeForEffSA	CalcEffectiveSurfaceArea.c	/^static void BuildHydroTreeForEffSA(void){$/;"	f	file:
BuildHydroTreeForException	PlantHydroTree.c	/^static void BuildHydroTreeForException(void){$/;"	f	file:
BuildHydroTreeImported	PlantHydroTreeImported.c	/^static void BuildHydroTreeImported(void){$/;"	f	file:
BuildLET	ForceParallelTreeGRAPE.c	/^static void BuildLET(void){$/;"	f	file:
BuildNewTimeStep	TimeStep.c	/^void BuildNewTimeStep(void){$/;"	f
BuildPredictors	Integral.c	/^void BuildPredictors(void){ \/\/ This routine must call just after calling the routine "KickFDrift()".$/;"	f
BuildStellarTree	PlantStellarTree.c	/^static void BuildStellarTree(void){$/;"	f	file:
BuildYoungStarTree	PlantYoungStarTree.c	/^static void BuildYoungStarTree(void){$/;"	f	file:
Bxx	DataStructures.h	/^    double    Bxx;$/;"	m	struct:StructPhydro_tag
Bxx	StructuresForIO.h	/^    double Bxx;$/;"	m	struct:StructPhydroIOCompactDouble
Bxx	StructuresForIO.h	/^    float Bxx;$/;"	m	struct:StructPhydroIOCompact
Bxx	StructuresForIO.h	/^    float Bxx;$/;"	m	struct:StructPhydroIOCompactMix
Bxx	StructuresForIO.h	/^    float Bxx;$/;"	m	struct:StructPhydroIOLean
Bxy	DataStructures.h	/^    double    Bxy;$/;"	m	struct:StructPhydro_tag
Bxy	StructuresForIO.h	/^    double Bxy;$/;"	m	struct:StructPhydroIOCompactDouble
Bxy	StructuresForIO.h	/^    float Bxy;$/;"	m	struct:StructPhydroIOCompact
Bxy	StructuresForIO.h	/^    float Bxy;$/;"	m	struct:StructPhydroIOCompactMix
Bxy	StructuresForIO.h	/^    float Bxy;$/;"	m	struct:StructPhydroIOLean
Bxz	DataStructures.h	/^    double    Bxz;$/;"	m	struct:StructPhydro_tag
Bxz	StructuresForIO.h	/^    double Bxz;$/;"	m	struct:StructPhydroIOCompactDouble
Bxz	StructuresForIO.h	/^    float Bxz;$/;"	m	struct:StructPhydroIOCompact
Bxz	StructuresForIO.h	/^    float Bxz;$/;"	m	struct:StructPhydroIOCompactMix
Bxz	StructuresForIO.h	/^    float Bxz;$/;"	m	struct:StructPhydroIOLean
Byx	DataStructures.h	/^    double    Byx;$/;"	m	struct:StructPhydro_tag
Byx	StructuresForIO.h	/^    double Byx;$/;"	m	struct:StructPhydroIOCompactDouble
Byx	StructuresForIO.h	/^    float Byx;$/;"	m	struct:StructPhydroIOCompact
Byx	StructuresForIO.h	/^    float Byx;$/;"	m	struct:StructPhydroIOCompactMix
Byx	StructuresForIO.h	/^    float Byx;$/;"	m	struct:StructPhydroIOLean
Byy	DataStructures.h	/^    double    Byy;$/;"	m	struct:StructPhydro_tag
Byy	StructuresForIO.h	/^    double Byy;$/;"	m	struct:StructPhydroIOCompactDouble
Byy	StructuresForIO.h	/^    float Byy;$/;"	m	struct:StructPhydroIOCompact
Byy	StructuresForIO.h	/^    float Byy;$/;"	m	struct:StructPhydroIOCompactMix
Byy	StructuresForIO.h	/^    float Byy;$/;"	m	struct:StructPhydroIOLean
Byz	DataStructures.h	/^    double    Byz;$/;"	m	struct:StructPhydro_tag
Byz	StructuresForIO.h	/^    double Byz;$/;"	m	struct:StructPhydroIOCompactDouble
Byz	StructuresForIO.h	/^    float Byz;$/;"	m	struct:StructPhydroIOCompact
Byz	StructuresForIO.h	/^    float Byz;$/;"	m	struct:StructPhydroIOCompactMix
Byz	StructuresForIO.h	/^    float Byz;$/;"	m	struct:StructPhydroIOLean
Bzx	DataStructures.h	/^    double    Bzx;$/;"	m	struct:StructPhydro_tag
Bzx	StructuresForIO.h	/^    double Bzx;$/;"	m	struct:StructPhydroIOCompactDouble
Bzx	StructuresForIO.h	/^    float Bzx;$/;"	m	struct:StructPhydroIOCompact
Bzx	StructuresForIO.h	/^    float Bzx;$/;"	m	struct:StructPhydroIOCompactMix
Bzx	StructuresForIO.h	/^    float Bzx;$/;"	m	struct:StructPhydroIOLean
Bzy	DataStructures.h	/^    double    Bzy;$/;"	m	struct:StructPhydro_tag
Bzy	StructuresForIO.h	/^    double Bzy;$/;"	m	struct:StructPhydroIOCompactDouble
Bzy	StructuresForIO.h	/^    float Bzy;$/;"	m	struct:StructPhydroIOCompact
Bzy	StructuresForIO.h	/^    float Bzy;$/;"	m	struct:StructPhydroIOCompactMix
Bzy	StructuresForIO.h	/^    float Bzy;$/;"	m	struct:StructPhydroIOLean
Bzz	DataStructures.h	/^    double    Bzz;$/;"	m	struct:StructPhydro_tag
Bzz	StructuresForIO.h	/^    double Bzz;$/;"	m	struct:StructPhydroIOCompactDouble
Bzz	StructuresForIO.h	/^    float Bzz;$/;"	m	struct:StructPhydroIOCompact
Bzz	StructuresForIO.h	/^    float Bzz;$/;"	m	struct:StructPhydroIOCompactMix
Bzz	StructuresForIO.h	/^    float Bzz;$/;"	m	struct:StructPhydroIOLean
CCC	ForceParallelTreeGRAPE.c	/^void CCC(const int ID){$/;"	f
CELibData	StellarFeedback.c	/^    struct CELibStructFeedbackOutput  CELibData;$/;"	m	struct:StructEnergyHeavyElements	typeref:struct:StructEnergyHeavyElements::CELibStructFeedbackOutput	file:
CFLAGS	Makefile	/^CFLAGS = $(OPTIMIZE) $(OPTIONS) $(INCLUDEPATH) $/;"	m
CFLTimeStepHydroi	TimeStep.c	/^static inline double __attribute__((always_inline)) CFLTimeStepHydroi(const int index){$/;"	f	file:
CFLTimeStepi	TimeStep.c	/^static inline double __attribute__((always_inline)) CFLTimeStepi(const int index){$/;"	f	file:
CFNumber	Cooling.c	/^    CFNumber,$/;"	e	enum:__anon1	file:
CFStep	Cooling.c	/^static double CFStep;$/;"	v	file:
CFmax	Cooling.c	908;"	d	file:
CFmin	Cooling.c	907;"	d	file:
CHARGE_SI_CGS	Constants.h	10;"	d
CLASSICAL_ELECTRON_RADIUS	Constants.h	58;"	d
CLASSICAL_ELECTRON_RADIUS_CGS	Constants.h	70;"	d
CMB_TEMPERATURE	Constants.h	106;"	d
COM	DataStructures.h	/^	double	COM[3];           \/\/ Center of mass of this node.$/;"	m	struct:StructGravityNode
COM	DataStructures.h	/^	double	COM[3];           \/\/ Center of mass of this node.$/;"	m	struct:StructYoungStarNode
COOLING_RUN	reconfig.h	110;"	d
COOLING_RUN	reconfig.h	157;"	d
COOLING_RUN	reconfig.h	202;"	d
COOLING_RUN	reconfig.h	253;"	d
COOLING_RUN	reconfig.h	295;"	d
COOLING_RUN	reconfig.h	345;"	d
COOLING_RUN	reconfig.h	516;"	d
COOLING_RUN	reconfig.h	609;"	d
COOLING_RUN	reconfig.h	648;"	d
COOLING_RUN	reconfig.h	64;"	d
COOLING_RUN	reconfig.h	687;"	d
COOLING_RUN	reconfig.h	734;"	d
COOLING_RUN	reconfig.h	788;"	d
COOLING_RUN	reconfig.h	836;"	d
COOLING_RUN	reconfig.h	883;"	d
COOLING_RUN	reconfig.h	950;"	d
COSMOLOGICAL_RUN	reconfig.h	1006;"	d
COSMOLOGICAL_RUN	reconfig.h	286;"	d
COSMOLOGICAL_RUN	reconfig.h	336;"	d
COSMOLOGICAL_RUN	reconfig.h	376;"	d
COSMOLOGICAL_RUN	reconfig.h	401;"	d
COSMOLOGICAL_RUN	reconfig.h	433;"	d
COSMOLOGICAL_RUN	reconfig.h	468;"	d
COSMOLOGICAL_RUN	reconfig.h	509;"	d
COSMOLOGICAL_RUN	reconfig.h	561;"	d
COSMOLOGICAL_RUN	reconfig.h	600;"	d
COSMOLOGICAL_RUN	reconfig.h	722;"	d
COSMOLOGICAL_RUN	reconfig.h	781;"	d
COSMOLOGICAL_RUN	reconfig.h	938;"	d
CS	DataStructures.h	/^    double CS;      \/\/ The sound speed for the isothermal run.$/;"	m	struct:StructPall
CSEntryNumbers	SizeDetermination.c	/^int CSEntryNumbers[CS_TypeNumber];$/;"	v
CSEntryOffset	SizeDetermination.c	/^int CSEntryOffset[CS_TypeNumber];$/;"	v
CSExportFlagsMaxAllocated	SizeDetermination.c	/^static int CSExportFlagsMaxAllocated = 0;$/;"	v	file:
CS_AllocateContactedDomainID	SizeDetermination.c	/^static inline void CS_AllocateContactedDomainID(void){$/;"	f	file:
CS_CheckContactedDomain	SizeDetermination.c	/^static inline void CS_CheckContactedDomain(void){$/;"	f	file:
CS_CheckConvergence	SizeDetermination.c	/^static inline int __attribute__((always_inline)) CS_CheckConvergence(const int NActives, const int NProcs, bool CSExportFlags[restrict], struct StructActiveParticle AP[restrict]){ $/;"	f	file:
CS_CheckConvergence_i	SizeDetermination.c	/^static inline bool __attribute__((always_inline)) CS_CheckConvergence_i(const int NProcs, bool CSExportFlags_i[restrict], struct StructActiveParticle *AP_i, const int Type){ $/;"	f	file:
CS_CheckExportFlags	SizeDetermination.c	/^static inline int __attribute__((always_inline)) CS_CheckExportFlags(const int DomainID, const int NProcs, bool CSExportFlags[restrict], const int NActives, struct StructActiveParticle AP[restrict]){$/;"	f	file:
CS_CheckInLocalDomain	SizeDetermination.c	/^static inline bool  __attribute__((always_inline)) CS_CheckInLocalDomain(double Pos[], double Extent \/* Radiusx2 *\/, const int MyID){$/;"	f	file:
CS_CheckLocalExternalDomainsContacted	SizeDetermination.c	/^static inline bool CS_CheckLocalExternalDomainsContacted(const int MyDomainID, const int ExtDomainID){$/;"	f	file:
CS_CheckLocalMassAndUpdateHIIRadius_i	SizeDetermination.c	/^static inline bool __attribute__((always_inline)) CS_CheckLocalMassAndUpdateHIIRadius_i(const int NProcs, bool CSExportFlags_i[NProcs], struct StructActiveParticle *AP_i){ $/;"	f	file:
CS_CheckNeighborNumberAndUpdateHydroRadius_i	SizeDetermination.c	/^static inline bool __attribute__((always_inline)) CS_CheckNeighborNumberAndUpdateHydroRadius_i(const int NProcs, bool CSExportFlags_i[restrict], struct StructActiveParticle *AP_i){ $/;"	f	file:
CS_CheckNeighborNumberAndUpdateRadiationPressureRadius_i	SizeDetermination.c	/^static inline bool __attribute__((always_inline)) CS_CheckNeighborNumberAndUpdateRadiationPressureRadius_i(const int NProcs, bool CSExportFlags_i[restrict], struct StructActiveParticle *AP_i){ $/;"	f	file:
CS_CheckNeighborNumberAndUpdateStellarFeedbackRadius_i	SizeDetermination.c	/^static inline bool __attribute__((always_inline)) CS_CheckNeighborNumberAndUpdateStellarFeedbackRadius_i(const int NProcs, bool CSExportFlags_i[restrict], struct StructActiveParticle *AP_i){ $/;"	f	file:
CS_CheckNeighborNumberAndUpdateStellarWindRadius_i	SizeDetermination.c	/^static inline bool __attribute__((always_inline)) CS_CheckNeighborNumberAndUpdateStellarWindRadius_i(const int NProcs, bool CSExportFlags_i[restrict], struct StructActiveParticle *AP_i){ $/;"	f	file:
CS_ContactedDomainID	SizeDetermination.c	/^static int *CS_ContactedDomainID;$/;"	v	file:
CS_GetNumberofNeighbors	SizeDetermination.c	/^static struct StructCSHydroLocalInfo CS_GetNumberofNeighbors(double Pos[restrict], const double Kernel, int Neighbors[restrict]){$/;"	f	file:
CS_GetSmoothedNumberofNeighbors	SizeDetermination.c	/^static int CS_GetSmoothedNumberofNeighbors(double Pos[restrict], const double Kernel, int Neighbors[restrict], double *SmoothedNumber){$/;"	f	file:
CS_NContactedDomains	SizeDetermination.c	/^static int CS_NContactedDomains;$/;"	v	file:
CS_OverlapDomain	SizeDetermination.c	/^static inline bool __attribute__((always_inline)) CS_OverlapDomain(double Pos[restrict], const double h, const int NodeID){ $/;"	f	file:
CS_OverlapDomainKernel	SizeDetermination.c	/^static inline bool __attribute__((always_inline)) CS_OverlapDomainKernel(double Pos[restrict], const double h \/* 2*Radius *\/, const int NodeID){ $/;"	f	file:
CS_OverwriteNeighborInfo	SizeDetermination.c	/^static inline void __attribute__((always_inline)) CS_OverwriteNeighborInfo($/;"	f	file:
CS_RetrunRadiationPressureLocalInfo	SizeDetermination.c	/^struct StructCSRadiationPressureLocalInfo CS_RetrunRadiationPressureLocalInfo(double Pos[restrict], const double Radius, int Neighbors[restrict]){$/;"	f
CS_RetrunStellarFeedbackLocalInfo	SizeDetermination.c	/^struct StructCSStellarFeedbackLocalInfo CS_RetrunStellarFeedbackLocalInfo(double Pos[restrict], const double Radius, int Neighbors[restrict]){$/;"	f
CS_RetrunStellarWindLocalInfo	SizeDetermination.c	/^struct StructCSStellarWindLocalInfo CS_RetrunStellarWindLocalInfo(double Pos[restrict], const double Radius, int Neighbors[restrict]){$/;"	f
CS_ReturnHIILocalInfo	SizeDetermination.c	/^static struct StructCSHIILocalInfo CS_ReturnHIILocalInfo(double Pos[restrict], const double Radius, int Neighbors[restrict]){$/;"	f	file:
CS_TypeHII	SizeDetermination.h	/^    CS_TypeHII,$/;"	e	enum:__anon8
CS_TypeHydro	SizeDetermination.h	/^    CS_TypeHydro,$/;"	e	enum:__anon8
CS_TypeNumber	SizeDetermination.h	/^    CS_TypeNumber,$/;"	e	enum:__anon8
CS_TypeRP	SizeDetermination.h	/^    CS_TypeRP,$/;"	e	enum:__anon8
CS_TypeSN	SizeDetermination.h	/^    CS_TypeSN,$/;"	e	enum:__anon8
CS_TypeSW	SizeDetermination.h	/^    CS_TypeSW,$/;"	e	enum:__anon8
CS_UpdateRadiusAndOthersImported_i	SizeDetermination.c	/^static void CS_UpdateRadiusAndOthersImported_i(struct StructCSImport *CSImportSend_i, struct StructCSExport *CSExportRecv_i, int Neighbors[restrict]){$/;"	f	file:
CS_UpdateRadiusAndOthers_i	SizeDetermination.c	/^static void CS_UpdateRadiusAndOthers_i(struct StructActiveParticle *AP_i, int Neighbors[restrict]){$/;"	f	file:
CS_UpdateRadiusLocal	SizeDetermination.c	/^static inline void __attribute__((always_inline)) CS_UpdateRadiusLocal(struct StructActiveParticle *AP_i, const int MyID, const int NProcs, bool CSExportFlags_i[restrict], const int Offset){$/;"	f	file:
CUBE	Astro.h	6;"	d
CacheIndex	SizeDetermination.c	/^    int CacheIndex;$/;"	m	struct:StructCSActiveHydroParticle	file:
CachedData	PlantGravityTree.c	/^} *CachedData;$/;"	v	typeref:struct:StructCachedData	file:
CachedData	PlantHydroTree.c	/^} *CachedData;$/;"	v	typeref:struct:StructCachedData	file:
CachedData	PlantHydroTreeImported.c	/^} *CachedData;$/;"	v	typeref:struct:StructCachedData	file:
CachedData	PlantStellarTree.c	/^} *CachedData;$/;"	v	typeref:struct:StructCachedData	file:
CachedData	PlantYoungStarTree.c	/^} *CachedData;$/;"	v	typeref:struct:StructCachedData	file:
CachedDataForEffSA	CalcEffectiveSurfaceArea.c	/^} *NBCacheForEffSA = NULL, *CachedDataForEffSA = NULL;$/;"	v	typeref:struct:StructNBCacheForEffSA	file:
CalcActiveDomainEdgesForESA	CalcEffectiveSurfaceArea.c	/^static void CalcActiveDomainEdgesForESA(struct StructActiveStellarFeedbackParticle *ActiveStellarFeedbackParticle){ $/;"	f	file:
CalcCooling	Cooling.c	/^void CalcCooling(void){$/;"	f
CalcCoolingASRCH	Cooling.c	/^static void CalcCoolingASRCH(void){$/;"	f	file:
CalcCoolingCloudy	Cooling.c	/^static void CalcCoolingCloudy(void){$/;"	f	file:
CalcCoolingSpaans1997	Cooling.c	/^static void CalcCoolingSpaans1997(void){$/;"	f	file:
CalcCoolingSpaans2008	Cooling.c	/^void CalcCoolingSpaans2008(void){$/;"	f
CalcCriticalDensityZ	Cosmological.c	/^double CalcCriticalDensityZ(void){$/;"	f
CalcCriticalDensityZ0	Cosmological.c	/^double CalcCriticalDensityZ0(void){$/;"	f
CalcCurrentTtoZ	CosmologicalTime.c	/^double CalcCurrentTtoZ(void){$/;"	f
CalcCurrentZtoT	CosmologicalTime.c	/^double CalcCurrentZtoT(void){$/;"	f
CalcDensityDivRot	HydroDensity.c	/^void CalcDensityDivRot(void){$/;"	f
CalcDensityDivRotDirect	HydroDensity.c	/^void CalcDensityDivRotDirect(void){$/;"	f
CalcDistanceMaxKernelMaxActiveNumber	PlantHydroTree.c	/^static inline void CalcDistanceMaxKernelMaxActiveNumber(const int CurrentNodeID){$/;"	f	file:
CalcDistanceMaxKernelMaxActiveNumberImported	PlantHydroTreeImported.c	/^static inline void CalcDistanceMaxKernelMaxActiveNumberImported(const int CurrentNodeID){$/;"	f	file:
CalcDistanceMaxMassCOM	ForceParallelTreeGRAPE.c	/^static inline void CalcDistanceMaxMassCOM(const int CurrentNodeID){$/;"	f	file:
CalcDistanceMaxMassNumberofActiveLeaves	PlantGravityTree.c	/^static inline void CalcDistanceMaxMassNumberofActiveLeaves(const int NodeID){$/;"	f	file:
CalcDuDtAcc	HydroAcc.c	/^void CalcDuDtAcc(void){$/;"	f
CalcDuDtAccEnergyDensityForCorrection	HydroAcc.c	/^void CalcDuDtAccEnergyDensityForCorrection(void){$/;"	f
CalcEffectiveSurfaceAreaPrev	CalcEffectiveSurfaceArea.c	/^void CalcEffectiveSurfaceAreaPrev(const int NExplosion, struct StructActiveStellarFeedbackParticle *ActiveStellarFeedbackParticle){$/;"	f
CalcEffectiveSurfaceAreaSum	CalcEffectiveSurfaceArea.c	/^void CalcEffectiveSurfaceAreaSum(const int NExplosion, struct StructActiveStellarFeedbackParticle *ActiveStellarFeedbackParticle){$/;"	f
CalcEffectiveSurfaceAreaVec	CalcEffectiveSurfaceArea.c	/^void CalcEffectiveSurfaceAreaVec(const int NExplosion, $/;"	f
CalcEffectiveSurfaceAreaVecCheck	CalcEffectiveSurfaceArea.c	/^void CalcEffectiveSurfaceAreaVecCheck(const int NExplosion, struct StructActiveStellarFeedbackParticle *ActiveStellarFeedbackParticle){ $/;"	f
CalcExtraOperationsForHydro	HydroExtraOperations.c	/^void CalcExtraOperationsForHydro(void){$/;"	f
CalcFUV	FUV.c	/^void CalcFUV(void){$/;"	f
CalcFUVEpsilon	Heating.c	/^static double CalcFUVEpsilon(const double NumberDensity, const double Temperature, const double ne){$/;"	f	file:
CalcFeedbackRadius	StellarFeedback.c	/^static void CalcFeedbackRadius(int NActives, const int IndexList[restrict], const int TypeList[restrict]){$/;"	f	file:
CalcGCAcc	main.c	/^static void CalcGCAcc(const double Pos[], double Acc[]){$/;"	f	file:
CalcGCParmetersOnOrbit	main.c	/^static void CalcGCParmetersOnOrbit(void){$/;"	f	file:
CalcGravityDirectSymmetrizedPotentialWithPhantom	ForceParallelTreeGRAPE.c	/^void CalcGravityDirectSymmetrizedPotentialWithPhantom(void){$/;"	f
CalcGravityPlummer	ForceTree.c	/^static void CalcGravityPlummer(double Pos[3], double e, double Acc[3], double *Pot){$/;"	f	file:
CalcGravityTree	ForceTree.c	/^static struct StructForceImport CalcGravityTree(struct StructForceExport ForceExport){$/;"	f	file:
CalcHIIregions	HIIregion.c	/^static void CalcHIIregions(void){$/;"	f	file:
CalcHigherOrderDivVRotV	HydroAcc.c	/^static void CalcHigherOrderDivVRotV(const int NActives, const int ActiveIndexList[], const int NImportAll, struct StructHydroAccExport HydroAccExportRecv[restrict], const int mode){$/;"	f	file:
CalcHigherOrderDivVRotVEngine	HydroAcc.c	/^static void CalcHigherOrderDivVRotVEngine(const int Index, const int NImportAll, struct StructHydroAccExport HydroAccExportRecv[restrict], const int mode){$/;"	f	file:
CalcHigherOrderDivVRotVMomentInv	HydroAcc.c	/^static void CalcHigherOrderDivVRotVMomentInv(const int Index){$/;"	f	file:
CalcHubbleParameterZ	Cosmological.c	/^double CalcHubbleParameterZ(void){$/;"	f
CalcHubbleParameterZ0	Cosmological.c	/^double CalcHubbleParameterZ0(void){$/;"	f
CalcHubbleZ	CosmologicalTime.c	/^double CalcHubbleZ(void){$/;"	f
CalcHydroDomainEdgesForEffSA	CalcEffectiveSurfaceArea.c	/^static void CalcHydroDomainEdgesForEffSA(void){ $/;"	f	file:
CalcKernel	HydroKernel.c	/^void CalcKernel(void){$/;"	f
CalcMomentInv	SizeDetermination.c	/^static void CalcMomentInv(double B[3][3]){$/;"	f	file:
CalcMultiphaseCoolingASRCH	Cooling.c	/^static void CalcMultiphaseCoolingASRCH(void){$/;"	f	file:
CalcOmegaLZ	CosmologicalTime.c	/^double CalcOmegaLZ(void){$/;"	f
CalcOmegaMZ	CosmologicalTime.c	/^double CalcOmegaMZ(void){$/;"	f
CalcOverDensityZ	Cosmological.c	/^double CalcOverDensityZ(void){$/;"	f
CalcPotAccForSymmetrizedPotentialErrorEstimation	main.c	/^static void CalcPotAccForSymmetrizedPotentialErrorEstimation(void){$/;"	f	file:
CalcPotentialDirectForColdCollaspe	SetUpTestRun.c	/^static void CalcPotentialDirectForColdCollaspe(void){$/;"	f	file:
CalcSinkPressureForces	SinkParticle.c	/^static void CalcSinkPressureForces(void){$/;"	f	file:
CalcSinkPressureForcesToHydro	HydroAcc.c	/^void CalcSinkPressureForcesToHydro(double Pos[], double Vel[], double Mass, double Kernel, double Rho){$/;"	f
CalcSize	SizeDetermination.c	/^void CalcSize(void){$/;"	f
CalcSizeGetHydroInfo_i	SizeDetermination.c	/^void CalcSizeGetHydroInfo_i(const int Index, double *PotentialMin, double *DensityMax, double VCOM[], bool *NoLocalSink){$/;"	f
CalcSizeSetRPInfo	SizeDetermination.c	/^void CalcSizeSetRPInfo(struct StructActiveStellarFeedbackParticle ActiveStellarFeedbackParticle[]){$/;"	f
CalcSizeSetSNInfo	SizeDetermination.c	/^void CalcSizeSetSNInfo(struct StructActiveStellarFeedbackParticle ActiveStellarFeedbackParticle[]){$/;"	f
CalcSizeSetSWInfo	SizeDetermination.c	/^void CalcSizeSetSWInfo(struct StructActiveStellarFeedbackParticle ActiveStellarFeedbackParticle[]){$/;"	f
CalcSymmetrizedPotential	ForceDirect.c	/^void CalcSymmetrizedPotential(void){$/;"	f
CalcThermalConductivity	ThermalConductivity.c	/^double CalcThermalConductivity(const int Index){$/;"	f
CalcThermalConductivityByTemperature	ThermalConductivity.c	/^double CalcThermalConductivityByTemperature(const double T){$/;"	f
CalcTotalEnergyForColdCollapse	SetUpTestRun.c	/^double CalcTotalEnergyForColdCollapse(void){$/;"	f
CalcTtoZ	CosmologicalTime.c	/^double CalcTtoZ(const double TCurrent){$/;"	f
CalcUniformSphereForce	Cosmological.c	/^void CalcUniformSphereForce(void){$/;"	f
CalcVirializedDensityZ	Cosmological.c	/^double CalcVirializedDensityZ(void){ \/\/ OverDensity*CriticalDensity$/;"	f
CalcWeights	StellarFeedback.c	/^static void CalcWeights(const double r, const double xij[restrict], const double InvKerneli, const double dwi, const double NumberDensityi, const double WeightCorrection[restrict], const double wk_norm, const double pw_norm, const int leaf, double *wk, double pvec[]){$/;"	f	file:
CalcZtoT	CosmologicalTime.c	/^double CalcZtoT(const double Redshift){$/;"	f
CalculateForceEngineForPhantomTest	ForceParallelTreeGRAPE.c	/^static void CalculateForceEngineForPhantomTest(const int CurrentNodeID){$/;"	f	file:
CalculateForceFromAnotherDomain	ForceDirect.c	/^static void CalculateForceFromAnotherDomain(const int RecvThisTime, struct StructForceExport ForceRecv[]){$/;"	f	file:
CalculateForceGRAPEAnotherDomain	ForceGRAPE.c	/^static void CalculateForceGRAPEAnotherDomain(const int RecvThisTime, struct StructForceExport ForceExportRecv[]){$/;"	f	file:
CalculateForceGRAPEMyDomain	ForceGRAPE.c	/^static void CalculateForceGRAPEMyDomain(void){$/;"	f	file:
CalculateForceParallelTreeGRAPEEngine	ForceParallelTreeGRAPE.c	/^static void CalculateForceParallelTreeGRAPEEngine(const int CurrentNodeID){$/;"	f	file:
CalculateForceParallelTreeGRAPEEngineForAccPotWithoutTreeWalk	ForceParallelTreeGRAPE.c	/^static void CalculateForceParallelTreeGRAPEEngineForAccPotWithoutTreeWalk(const int CurrentNodeID){$/;"	f	file:
CalculateForceParallelTreeGRAPEEngineForInsert	ForceParallelTreeGRAPE.c	/^static void CalculateForceParallelTreeGRAPEEngineForInsert(const int CurrentNodeID){$/;"	f	file:
CalculateLFUVEngine	FUV.c	/^static void CalculateLFUVEngine(const int CurrentNodeID){$/;"	f	file:
CandidatesAllActives	SNII.c	30;"	d	file:
CandidatesHighDensity	SNII.c	32;"	d	file:
CandidatesHighDensityLowTemperature	SNII.c	33;"	d	file:
CandidatesSlabActives	SNII.c	31;"	d	file:
ChechSplitStep	ParticleSplitting.c	/^static bool ChechSplitStep(void){$/;"	f	file:
CheckActiveDomain	MPIParameters.c	/^static void CheckActiveDomain(int HydroFlags[], const int MyID, const int NProcs){$/;"	f	file:
CheckActiveHIIExportFlags	HIIregion.c	/^static inline int CheckActiveHIIExportFlags(const int Index, const int NProcs, bool HIIExportFlags[restrict][NProcs], const int NActiveYoungStars, double Pos[restrict][3], double Raidus[restrict]){$/;"	f	file:
CheckBodyStructures	CheckStructures.c	/^void CheckBodyStructures(const int mode){$/;"	f
CheckBodyStructuresEngine	CheckStructures.c	/^static void CheckBodyStructuresEngine(const int Index){$/;"	f	file:
CheckCandidateSNII	Delayed.c	/^static inline bool CheckCandidateSNII(const int Index){$/;"	f	file:
CheckContactedDomain	HIIregion.c	/^static inline void CheckContactedDomain(void){$/;"	f	file:
CheckContactedDomain	HydroKernel.c	/^static inline void CheckContactedDomain(void){$/;"	f	file:
CheckContactedDomain	StellarFeedback.c	/^static inline void __attribute__((always_inline)) CheckContactedDomain(void){$/;"	f	file:
CheckDelayedExportFlags	Delayed.c	/^static inline int CheckDelayedExportFlags(const int TargetNodeID, const int NLocalTarget,$/;"	f	file:
CheckDir	Utilities.c	/^bool CheckDir(const char DirName[]){$/;"	f
CheckDomainOverlapForActiveHydroEdges	SinkParticle.c	/^static inline bool CheckDomainOverlapForActiveHydroEdges(double Pos[restrict], const double h, const int DomainID){$/;"	f	file:
CheckDomainOverlapForActiveSinkEdges	SinkParticle.c	/^static inline bool CheckDomainOverlapForActiveSinkEdges(double Pos[restrict], const double h, const int NodeID){$/;"	f	file:
CheckDragStep	BoundaryCondition.c	/^static bool CheckDragStep(void){$/;"	f	file:
CheckEffSAExportFlags	CalcEffectiveSurfaceArea.c	/^static inline int __attribute__((always_inline)) CheckEffSAExportFlags(const int Index, bool EffSAExportFlags[restrict]){$/;"	f	file:
CheckEpsValues	SetUpTestRun.c	/^static void CheckEpsValues(void){$/;"	f	file:
CheckEventTime	SizeDetermination.c	/^static inline int __attribute__((always_inline)) CheckEventTime(const int Index){$/;"	f	file:
CheckEventTime	StellarFeedback.c	/^static inline int __attribute__((always_inline)) CheckEventTime(const int Index){$/;"	f	file:
CheckExporFlagGatherScatter	CalcEffectiveSurfaceArea.c	/^bool CheckExporFlagGatherScatter(const int Index, const int SendRank){$/;"	f
CheckFBRadiusAndReturnLocalActiceLeaves	Delayed.c	/^static int CheckFBRadiusAndReturnLocalActiceLeaves(const int NLocalTarget, struct StructDelayedFBActiveStars DelayedFBActiveStars[]){$/;"	f	file:
CheckFP	Astro.h	108;"	d
CheckFUVStep	FUV.c	/^bool CheckFUVStep(void){$/;"	f
CheckFile	Utilities.c	/^bool CheckFile(const char FileName[]){$/;"	f
CheckHIIExportFlags	HIIregion.c	/^static inline int __attribute__((always_inline)) CheckHIIExportFlags(const int Index, const int NProcs, bool HIIExportFlags[][NProcs], const int NActiveYoungStars, double Pos[restrict][3], double Raidus[restrict]){$/;"	f	file:
CheckHIIExportFlagsModified	HIIregion.c	/^static inline int __attribute__((always_inline)) CheckHIIExportFlagsModified(const int NodeIndex, const int NProcs, bool HIIExportFlags[restrict], const int NActiveYoungStars, struct StructActiveHIIParticle ActiveHIIParticle[restrict]){$/;"	f	file:
CheckHIIflags	HIIregion.c	/^int CheckHIIflags(const int step){$/;"	f
CheckHydroAccExportFlags	HydroAcc.c	/^static inline int __attribute__((always_inline)) CheckHydroAccExportFlags(const int Index, const int NProcs, $/;"	f	file:
CheckHydroAccExportFlagsModified	HydroAcc.c	/^static inline int __attribute__((always_inline)) CheckHydroAccExportFlagsModified(const int Index,  $/;"	f	file:
CheckHydroDensityExportFlags	HydroDensity.c	/^static inline int __attribute__((always_inline)) CheckHydroDensityExportFlags(const int Index, bool HydroDensityExportFlags[restrict]){$/;"	f	file:
CheckHydroFP	Astro.h	116;"	d
CheckHydroKernelDensityExportFlags	HydroDensity.c	/^static inline int CheckHydroKernelDensityExportFlags(const int Index, const int NProcs, $/;"	f	file:
CheckHydroKernelExportFlags	HydroKernel.c	/^static inline int __attribute__((always_inline)) CheckHydroKernelExportFlags(const int Index, const int NProcs, $/;"	f	file:
CheckHydroKernelExportFlagsCheck	HydroKernel.c	/^static inline int __attribute__((always_inline)) CheckHydroKernelExportFlagsCheck(const int Index, const int NProcs, bool HydroKernelExportFlags[][NProcs]){$/;"	f	file:
CheckHydroKernelExportFlagsSequencialModified	HydroKernel.c	/^static inline int __attribute__((always_inline)) CheckHydroKernelExportFlagsSequencialModified(const int NodeIndex, const int NProcs, bool HydroKernelExportFlags[restrict], const int NActives, struct StructActiveHydroParticle ActiveHydroParticle[restrict]){$/;"	f	file:
CheckHydroStructures	CheckStructures.c	/^void CheckHydroStructures(const int mode){$/;"	f
CheckHydroStructuresEngine	CheckStructures.c	/^static void CheckHydroStructuresEngine(const int Index){$/;"	f	file:
CheckIOFileName	IO.c	/^void CheckIOFileName(void){$/;"	f
CheckInLocalDomain	HIIregion.c	/^static inline bool CheckInLocalDomain(double Pos[], double Kernel, const int MyID){$/;"	f	file:
CheckInLocalDomain	HydroKernel.c	/^static inline bool __attribute__((always_inline)) CheckInLocalDomain(double Pos[], double Kernel, const int MyID){$/;"	f	file:
CheckInLocalDomain	StellarFeedback.c	/^static inline bool __attribute__((always_inline)) CheckInLocalDomain(double Pos[], double Kernel, const int MyID){$/;"	f	file:
CheckKennicutLaw	SetUpTestRun.c	/^void CheckKennicutLaw(const int mode){$/;"	f
CheckLeanIOFormat	IO.c	/^static bool CheckLeanIOFormat(char *FileName){$/;"	f	file:
CheckLocalDomainEdge	HIIregion.c	/^static void CheckLocalDomainEdge(void){$/;"	f	file:
CheckLocalExternalDomainsContacted	HIIregion.c	/^static inline bool CheckLocalExternalDomainsContacted(const int MyID, const int ExtID){$/;"	f	file:
CheckLocalExternalDomainsContacted	HydroKernel.c	/^static inline bool CheckLocalExternalDomainsContacted(const int MyID, const int ExtID){$/;"	f	file:
CheckLocalExternalDomainsContacted	StellarFeedback.c	/^static inline bool __attribute__((always_inline)) CheckLocalExternalDomainsContacted(const int MyID, const int ExtID){$/;"	f	file:
CheckLocalMassAndUpdateHIIRadiusModified2	HIIregion.c	/^static inline int __attribute__((always_inline)) CheckLocalMassAndUpdateHIIRadiusModified2(const int NActives, const int NProcs, bool HIIExportFlags[restrict], struct StructActiveHIIParticle ActiveHIIParticle[restrict]){ $/;"	f	file:
CheckLocalMassAndUpdateHIIRadiusModified_i	HIIregion.c	/^static inline bool __attribute__((always_inline)) CheckLocalMassAndUpdateHIIRadiusModified_i(const int NProcs, bool HIIExportFlags_i[NProcs], struct StructActiveHIIParticle *ActiveHIIParticle_i){ $/;"	f	file:
CheckLocalMassAndUpdateHIIradius	HIIregion.c	/^static inline int __attribute__((always_inline)) CheckLocalMassAndUpdateHIIradius(const int NActives, const int NProcs, bool HIIExportFlags[restrict][NProcs], int ActiveIndexList[restrict], int ActiveNeighborList[restrict], struct StructBinarySearch BinarySearch[restrict], double Radius[restrict], double PhotonCount[restrict], double LyAphoton[restrict], bool LocalUpdateFlags[restrict]){ $/;"	f	file:
CheckLocalMassAndUpdateHIIradiusModified	HIIregion.c	/^static inline int __attribute__((always_inline)) CheckLocalMassAndUpdateHIIradiusModified(const int NActives, const int NProcs, bool HIIExportFlags[restrict], int ActiveIndexList[restrict], int ActiveNeighborList[restrict], struct StructBinarySearch BinarySearch[restrict], double Radius[restrict], double PhotonCount[restrict], double LyAphoton[restrict], bool LocalUpdateFlags[restrict]){ $/;"	f	file:
CheckLocalMassAndUpdateHIIradius_i	HIIregion.c	/^static inline bool __attribute__((always_inline)) CheckLocalMassAndUpdateHIIradius_i(const int NProcs, bool HIIExportFlags_i[NProcs], int *NBList_i, struct StructBinarySearch *BinarySearch_i, double *Radius_i, double *PhotonCount_i, double LyAphoton_i){ $/;"	f	file:
CheckLocalParticle	HIIregion.c	/^static inline bool __attribute__((always_inline)) CheckLocalParticle(double Pos[], double Radius){$/;"	f	file:
CheckLockFile	IO.c	/^static bool CheckLockFile(void){$/;"	f	file:
CheckNeighborNumberAndUpdateFeedbackRadiusModified	StellarFeedback.c	/^static inline int __attribute__((always_inline)) CheckNeighborNumberAndUpdateFeedbackRadiusModified(const int NActives, const int NProcs, bool StellarFeedbackExportFlags[restrict], struct StructActiveStellarFeedbackParticle ActiveStellarFeedbackParticle[restrict]){ $/;"	f	file:
CheckNeighborNumberAndUpdateFeedbackRadius_i	StellarFeedback.c	/^static inline bool __attribute__((always_inline)) CheckNeighborNumberAndUpdateFeedbackRadius_i(const int NProcs, bool StellarFeedbackExportFlags_i[restrict], struct StructActiveStellarFeedbackParticle *ActiveStellarFeedbackParticle_i){ $/;"	f	file:
CheckNeighborNumberAndUpdateHIIradius	HIIregion.c	/^static inline int CheckNeighborNumberAndUpdateHIIradius(const int NActives, const int NProcs, bool HIIExportFlags[restrict][NProcs], int ActiveIndexList[restrict], int ActiveNeighborList[restrict], struct StructBinarySearch BinarySearch[restrict], double Radius[]){ $/;"	f	file:
CheckNeighborNumberAndUpdateKernelModified	HydroKernel.c	/^static inline int __attribute__((always_inline)) CheckNeighborNumberAndUpdateKernelModified(const int NActives, const int NProcs, bool HydroKernelExportFlags[restrict], struct StructActiveHydroParticle ActiveHydroParticle[restrict]){ $/;"	f	file:
CheckNeighborNumberAndUpdateKernelModified_i	HydroKernel.c	/^static inline bool __attribute__((always_inline)) CheckNeighborNumberAndUpdateKernelModified_i(const int Index, const int NProcs, bool HydroKernelExportFlags_i[restrict], const int leaf, struct StructActiveHydroParticle *ActiveHydroParticle_i){ $/;"	f	file:
CheckNeighborNumberAndUpdateKernelRho	HydroDensity.c	/^static inline int CheckNeighborNumberAndUpdateKernelRho(const int NActives, const int NProcs, $/;"	f	file:
CheckNoLocalSinkCondition	SizeDetermination.c	/^static bool CheckNoLocalSinkCondition(const double h, const double Pos[restrict]){$/;"	f	file:
CheckPermissionForMakeSinkParticle	SinkParticle.c	/^static void CheckPermissionForMakeSinkParticle(void){$/;"	f	file:
CheckRadiationPressureSource	RadiationPressure.c	/^bool CheckRadiationPressureSource(const int index){$/;"	f
CheckRadiationPressureSourceThroughPbody	RadiationPressure.c	/^bool CheckRadiationPressureSourceThroughPbody(const int index){$/;"	f
CheckSinkCheckExportFlags	SinkParticle.c	/^static inline int CheckSinkCheckExportFlags(const int Index, const int NProcs, bool SinkCheckExportFlags[][NProcs-1]){$/;"	f	file:
CheckSinkConditions	SinkParticle.c	/^static bool CheckSinkConditions(const int index){$/;"	f	file:
CheckSinkExportFlags	SinkParticle.c	/^static inline int CheckSinkExportFlags(const int Index, const int NProcs, bool SinkExportFlags[][NProcs-1]){$/;"	f	file:
CheckSinkExportFlagsForActiveEdges	SinkParticle.c	/^static inline int CheckSinkExportFlagsForActiveEdges(const int Index, const int NProcs, bool SinkExportFlags[][NProcs-1]){$/;"	f	file:
CheckSinkFormationCondition	SinkParticle.c	/^static void CheckSinkFormationCondition(void){$/;"	f	file:
CheckSinkFormationHillCondition	SinkParticle.c	/^static void CheckSinkFormationHillCondition(void){$/;"	f	file:
CheckSinkHillCondition	SinkParticle.c	/^static bool CheckSinkHillCondition(const double Rho, const double Pos[restrict], const double Acc[restrict]){$/;"	f	file:
CheckSinkSinkExportFlagsForActiveEdges	SinkParticle.c	/^static inline int __attribute__((always_inline)) CheckSinkSinkExportFlagsForActiveEdges(const int Index, const int NProcs, bool SinkExportFlags[][NProcs-1], struct StructParticleDataForActiveSinkFOF ParticleDataForActiveFOF[restrict]){$/;"	f	file:
CheckSizeofBufferExportRecv	BufferOperation.c	/^void CheckSizeofBufferExportRecv(const int NumberofExportRecv, const size_t SizeofElement){$/;"	f
CheckSizeofBufferExportSend	BufferOperation.c	/^void CheckSizeofBufferExportSend(const int NumberofExportSend[restrict], const size_t SizeofElement){$/;"	f
CheckSizeofBufferExportSendIndex	BufferOperation.c	/^void CheckSizeofBufferExportSendIndex(const int NumberofExportSend, const size_t SizeofElement, const int Index){$/;"	f
CheckSizeofBufferHydroInteractionFlags	HydroMisc.c	/^void CheckSizeofBufferHydroInteractionFlags(const int NumberofBufferHydroInteractionFlags){$/;"	f
CheckSizeofBufferImportRecv	BufferOperation.c	/^void CheckSizeofBufferImportRecv(const int NumberofImportRecv[restrict], const size_t SizeofElement){$/;"	f
CheckSizeofBufferImportRecvIndex	BufferOperation.c	/^void CheckSizeofBufferImportRecvIndex(const int NumberofImportRecv, const size_t SizeofElement, const int Index){$/;"	f
CheckSizeofBufferImportSend	BufferOperation.c	/^void CheckSizeofBufferImportSend(const int NumberofImportSend, const size_t SizeofElement){$/;"	f
CheckSplitCondition	ParticleSplitting.c	/^static int CheckSplitCondition(void){$/;"	f	file:
CheckStellarFeedbackExportFlagsModified	StellarFeedback.c	/^static inline int __attribute__((always_inline)) CheckStellarFeedbackExportFlagsModified(const int NodeIndex, const int NProcs, bool StellarFeedbackExportFlags[restrict], const int NActives, struct StructActiveStellarFeedbackParticle ActiveStellarFeedbackParticle[restrict]){$/;"	f	file:
CheckStellarWindEnergybyTableInterpolation	StellarWind.c	/^static double CheckStellarWindEnergybyTableInterpolation(const double Z, const double Age_in_year){ \/\/ in ergs\/Msun$/;"	f	file:
CheckStellarWindSource	StellarWind.c	/^bool CheckStellarWindSource(const int index){$/;"	f
CheckStellarWindSourceThroughPbody	StellarWind.c	/^bool CheckStellarWindSourceThroughPbody(const int index){$/;"	f
CheckSum	SizeDetermination.c	/^    int       CheckSum;$/;"	m	struct:StructCSImport	file:
CheckSum	SizeDetermination.c	/^    int       CheckSum;$/;"	m	struct:StructCSImportSNParticle	file:
CheckSum	SizeDetermination.c	/^    int CheckSum;$/;"	m	struct:StructCSActiveSNParticle	file:
CheckSum	SizeDetermination.c	/^    int CheckSum;$/;"	m	struct:StructCSStellarFeedbackLocalInfo	file:
CheckSum	StellarFeedback.c	/^    int CheckSum;$/;"	m	struct:StructStellarFeedbackImport	file:
CheckSum	StellarFeedback.c	/^    int CheckSum;$/;"	m	struct:StructStellarFeedbackLocalInfo	file:
CheckSum	StellarFeedback.h	/^    int CheckSum;$/;"	m	struct:StructActiveStellarFeedbackParticle
CheckSum	StellarFeedback.h	/^    int CheckSum;$/;"	m	struct:StructActiveStellarFeedbackSNParticle
CheckTargetNumber	FUV.c	/^static int CheckTargetNumber(void){$/;"	f	file:
CheckTotalBaryonMass	StarFormation.c	/^double CheckTotalBaryonMass(void){ $/;"	f
CheckWeight	CalcEffectiveSurfaceArea.c	/^    double  CheckWeight;$/;"	m	struct:StructEffSAResult	file:
CheckWeight	StellarFeedback.h	/^    double CheckWeight;$/;"	m	struct:StructActiveStellarFeedbackParticle
Children	DataStructures.h	/^	int Children;$/;"	m	struct:StructGravityNode
Children	DataStructures.h	/^	int Children;$/;"	m	struct:StructHydroNode
Children	DataStructures.h	/^	int Children;$/;"	m	struct:StructYoungStarNode
CircularVelocityMilkyWayDisk	SetUpTestRun.c	/^double CircularVelocityMilkyWayDisk(const double r){$/;"	f
CircularVelocityMilkyWayExpDisk	SetUpTestRun.c	/^double CircularVelocityMilkyWayExpDisk(const double r){$/;"	f
CircularVelocityMilkyWayHalo	SetUpTestRun.c	/^double CircularVelocityMilkyWayHalo(const double r){$/;"	f
CircularVelocityMilkyWayHaloDisk	SetUpTestRun.c	/^double CircularVelocityMilkyWayHaloDisk(const double r){$/;"	f
ClearGravitationalForce	ForceMisc.c	/^void ClearGravitationalForce(void){$/;"	f
ClearHydroData	HydroMisc.c	/^void ClearHydroData(void){$/;"	f
ClearLFUV	TestRuns.c	/^static void ClearLFUV(void){$/;"	f	file:
ClearLocalAccPot	ForceMisc.c	/^void ClearLocalAccPot(void){$/;"	f
ClearTimingLogsThisStep	Logs.c	/^void ClearTimingLogsThisStep(void){$/;"	f
CloseLogFiles	Logs.c	/^void CloseLogFiles(void){$/;"	f
CloudMass	TestRuns.c	/^double CloudMass; \/\/ in number\/cc.$/;"	v
CloudParticles	TestRuns.c	/^int    CloudParticles; $/;"	v
CloudPower	TestRuns.c	/^double CloudPower; \/\/ in pc.$/;"	v
CloudRadius	TestRuns.c	/^double CloudRadius; \/\/ in pc.$/;"	v
CloudTemperature	TestRuns.c	/^double CloudTemperature; \/\/ in pc.$/;"	v
Cnfw_NFW	SetUpTestRun.c	/^double Cnfw_NFW;$/;"	v
Coef	EstimateXFe.c	/^	 double  Coef[4];$/;"	m	struct:StructFittingCoef	file:
CommunicationTable	DataStructures.c	/^struct  StructCommunicationTable   *CommunicationTable;$/;"	v	typeref:struct:StructCommunicationTable
CompareNeighbors	TestRuns.c	/^static void CompareNeighbors(const int Index){$/;"	f	file:
CompareNlistSum	TestRuns.c	/^static void CompareNlistSum(void){$/;"	f	file:
CompareNlistSumOriginal	TestRuns.c	/^static void CompareNlistSumOriginal(void){$/;"	f	file:
ComputeEps	SetUpTestRun.c	/^static double ComputeEps(const double Eps, const double Mass, const int Type){$/;"	f	file:
ConnectPhydroToLeaves	PlantHydroTree.c	/^static void ConnectPhydroToLeaves(void){$/;"	f	file:
ConstSNIINumber	SNII.c	/^static double ConstSNIINumber;$/;"	v	file:
ConstSNIIResidualMass	SNII.c	/^static double ConstSNIIResidualMass;$/;"	v	file:
ConstSNIIStandardMass	SNII.c	/^static double ConstSNIIStandardMass;$/;"	v	file:
ConstantSNII	SNII.c	/^void ConstantSNII(const double SFRate){$/;"	f
ConstantSNeCandidateError	Errors.h	36;"	d
ContactedDomainID	HIIregion.c	/^static int *ContactedDomainID;$/;"	v	file:
ContactedDomainID	HydroKernel.c	/^static int *ContactedDomainID;$/;"	v	file:
ConvergenceFactor	HIIregion.c	1138;"	d	file:
ConvergenceFactor	HIIregion.c	1231;"	d	file:
ConvergenceFactor	HIIregion.c	1328;"	d	file:
ConvergenceFactor	HIIregion.c	847;"	d	file:
ConvergenceFactor	HIIregion.c	961;"	d	file:
ConvergenceFactor	SizeDetermination.c	1465;"	d	file:
ConvertCoolingRate	DataStructures.h	/^    double ConvertCoolingRate;$/;"	m	struct:StructPall
ConvertDensityToCGS	DataStructures.h	/^    double ConvertDensityToCGS;       \/\/ Get density in CGS unit.$/;"	m	struct:StructPall
ConvertEjectaUnits	StellarFeedback.c	/^static inline void __attribute__((always_inline)) ConvertEjectaUnits(struct CELibStructFeedbackOutput *CELibData, const int type){$/;"	f	file:
ConvertErgsPreSec	DataStructures.h	/^    double ConvertErgsPreSec;$/;"	m	struct:StructPall
ConvertFUV	Heating.c	/^static double ConvertFUV = 0.e0;$/;"	v	file:
ConvertGasParticleIntoDeadStarParticle	StarFormation.c	/^static bool ConvertGasParticleIntoDeadStarParticle(const int index){$/;"	f	file:
ConvertGasParticleIntoStarParticle	StarFormation.c	/^static bool ConvertGasParticleIntoStarParticle(const int index){$/;"	f	file:
ConvertNumberDensityToCGS	DataStructures.h	/^    double ConvertNumberDensityToCGS; \/\/ To multiple this factor to the density in the simulation unit,$/;"	m	struct:StructPall
ConvertSNIIEjectaintoUnitMass	StellarFeedback.c	/^static inline void __attribute__((always_inline)) ConvertSNIIEjectaintoUnitMass(double Elements[restrict]){$/;"	f	file:
ConvertSNIaEjectaintoUnitMass	StellarFeedback.c	/^static inline void __attribute__((always_inline)) ConvertSNIaEjectaintoUnitMass(double Elements[restrict]){$/;"	f	file:
ConvertSinks	TestRuns.c	/^static void ConvertSinks(const int SinkNumber, const int BaseNumber){$/;"	f	file:
ConvertTtoU	DataStructures.h	/^    double ConvertTtoU;$/;"	m	struct:StructPall
ConvertUtoT	DataStructures.h	/^    double ConvertUtoT;$/;"	m	struct:StructPall
Cooling	DataStructures.h	/^    double Cooling;$/;"	m	struct:StructTimingResults
CoolingConvergenceFailure	Errors.h	28;"	d
CoolingEnergyLoss	DataStructures.h	/^    double CoolingEnergyLoss; \/\/ The total amount of the energy loss by a radiative cooling.$/;"	m	struct:StructPall
CoolingFlag	DataStructures.h	/^    bool    CoolingFlag;     \/\/ <TMP> <LEAN> if "OFF", the particle skips the cooling routine.$/;"	m	struct:StructPhydro_tag
CoolingFunction	Cooling.c	/^static double CoolingFunction(double T, const int mode){$/;"	f	file:
CoolingNotFP_NORMAL	Errors.h	30;"	d
CoolingRateSpaans2008	Cooling.c	/^static double CoolingRateSpaans2008(const int index, double ui, double rhoi, double Metallicity, double fH2i, double g0i){$/;"	f	file:
CoolingSolver	Cooling.c	/^static double CoolingSolver(const int index){$/;"	f	file:
CoolingSolverASRCH	Cooling.c	/^static double CoolingSolverASRCH(const int index){$/;"	f	file:
CoolingSolverCloudy	Cooling.c	/^static double CoolingSolverCloudy(const int index){$/;"	f	file:
CoolingSolverSpaans2008	Cooling.c	/^static double CoolingSolverSpaans2008(const int index){$/;"	f	file:
CoolingTableGenerationFailure	Errors.h	29;"	d
CoolingTable_s0	CoolingTable.h	/^static double CoolingTable_s0[38+1] = {0.e0,$/;"	v
CoolingTable_s1	CoolingTable.h	/^static double CoolingTable_s1[38+1] = {0.e0,$/;"	v
CoolingTable_s2	CoolingTable.h	/^static double CoolingTable_s2[38+1] = {0.e0,$/;"	v
CoolingTable_s3	CoolingTable.h	/^static double CoolingTable_s3[38+1] ={0.e0,$/;"	v
CoolingTable_v0	CoolingTable.h	/^static double CoolingTable_v0[38+1] = {0.e0,$/;"	v
CoolingTable_v1	CoolingTable.h	/^static double CoolingTable_v1[38+1] = {0.e0,$/;"	v
CoolingTable_v2	CoolingTable.h	/^static double CoolingTable_v2[38+1] = {0.e0,$/;"	v
CoolingTable_v3	CoolingTable.h	/^static double CoolingTable_v3[38+1] = {0.e0,$/;"	v
CoolingThisStep	DataStructures.h	/^    double CoolingThisStep;$/;"	m	struct:StructTimingResults
CopyFromImportLeavesToFUVTreeCache	FUV.c	/^static void CopyFromImportLeavesToFUVTreeCache(void){$/;"	f	file:
CopyFromImportLeavesToLETCache	ForceParallelTreeGRAPE.c	/^static void CopyFromImportLeavesToLETCache(void){$/;"	f	file:
CopyNeighborList	SizeDetermination.c	/^static inline void CopyNeighborList(struct StructActiveParticle *AP_i, const int Neighbors[], const int Offset){$/;"	f	file:
CopyPallToFOFHeader	FOF.c	/^static void CopyPallToFOFHeader(void){$/;"	f	file:
CopyPbodyToTemporalStructureCompact	StructuresForIO.c	/^struct StructPbodyIOCompact CopyPbodyToTemporalStructureCompact(const int index){$/;"	f
CopyPbodyToTemporalStructureCompactDouble	StructuresForIO.c	/^struct StructPbodyIOCompactDouble CopyPbodyToTemporalStructureCompactDouble(const int index){$/;"	f
CopyPbodyToTemporalStructureCompactMix	StructuresForIO.c	/^struct StructPbodyIOCompactMix CopyPbodyToTemporalStructureCompactMix(const int index){$/;"	f
CopyPbodyToTemporalStructureLean	StructuresForIO.c	/^struct StructPbodyIOLean CopyPbodyToTemporalStructureLean(const int index){$/;"	f
CopyPhydroToTemporalStructureCompact	StructuresForIO.c	/^struct StructPhydroIOCompact CopyPhydroToTemporalStructureCompact(const int index){$/;"	f
CopyPhydroToTemporalStructureCompactDouble	StructuresForIO.c	/^struct StructPhydroIOCompactDouble CopyPhydroToTemporalStructureCompactDouble(const int index){$/;"	f
CopyPhydroToTemporalStructureCompactDoubleElement	StructuresForIO.c	/^struct StructPhydroIOCompactDouble CopyPhydroToTemporalStructureCompactDoubleElement(StructPhydroptr const Ph){$/;"	f
CopyPhydroToTemporalStructureCompactElement	StructuresForIO.c	/^struct StructPhydroIOCompact CopyPhydroToTemporalStructureCompactElement(StructPhydroptr const Ph){$/;"	f
CopyPhydroToTemporalStructureCompactMix	StructuresForIO.c	/^struct StructPhydroIOCompactMix CopyPhydroToTemporalStructureCompactMix(const int index){$/;"	f
CopyPhydroToTemporalStructureCompactMixElement	StructuresForIO.c	/^struct StructPhydroIOCompactMix CopyPhydroToTemporalStructureCompactMixElement(StructPhydroptr const Ph){$/;"	f
CopyPhydroToTemporalStructureLean	StructuresForIO.c	/^struct StructPhydroIOLean CopyPhydroToTemporalStructureLean(const int index){$/;"	f
CopyPhydroToTemporalStructureLeanElement	StructuresForIO.c	/^struct StructPhydroIOLean CopyPhydroToTemporalStructureLeanElement(StructPhydroptr const Ph){$/;"	f
CopyPsinkToTemporalStructureCompact	StructuresForIO.c	/^struct StructPsinkIOCompact CopyPsinkToTemporalStructureCompact(const int index){$/;"	f
CopyPsinkToTemporalStructureCompactDouble	StructuresForIO.c	/^struct StructPsinkIOCompactDouble CopyPsinkToTemporalStructureCompactDouble(const int index){$/;"	f
CopyPsinkToTemporalStructureCompactDoubleElement	StructuresForIO.c	/^struct StructPsinkIOCompactDouble CopyPsinkToTemporalStructureCompactDoubleElement(StructPsinkptr const Psk){$/;"	f
CopyPsinkToTemporalStructureCompactElement	StructuresForIO.c	/^struct StructPsinkIOCompact CopyPsinkToTemporalStructureCompactElement(StructPsinkptr const Psk){$/;"	f
CopyPsinkToTemporalStructureCompactMix	StructuresForIO.c	/^struct StructPsinkIOCompactMix CopyPsinkToTemporalStructureCompactMix(const int index){$/;"	f
CopyPsinkToTemporalStructureCompactMixElement	StructuresForIO.c	/^struct StructPsinkIOCompactMix CopyPsinkToTemporalStructureCompactMixElement(StructPsinkptr const Psk){$/;"	f
CopyPsinkToTemporalStructureLean	StructuresForIO.c	/^struct StructPsinkIOLean CopyPsinkToTemporalStructureLean(const int index){$/;"	f
CopyPsinkToTemporalStructureLeanElement	StructuresForIO.c	/^struct StructPsinkIOLean CopyPsinkToTemporalStructureLeanElement(StructPsinkptr const Psk){$/;"	f
CopyPstarToTemporalStructureCompact	StructuresForIO.c	/^struct StructPstarIOCompact CopyPstarToTemporalStructureCompact(const int index){$/;"	f
CopyPstarToTemporalStructureCompactDouble	StructuresForIO.c	/^struct StructPstarIOCompactDouble CopyPstarToTemporalStructureCompactDouble(const int index){$/;"	f
CopyPstarToTemporalStructureCompactDoubleElement	StructuresForIO.c	/^struct StructPstarIOCompactDouble CopyPstarToTemporalStructureCompactDoubleElement(StructPstarptr const Ps){$/;"	f
CopyPstarToTemporalStructureCompactElement	StructuresForIO.c	/^struct StructPstarIOCompact CopyPstarToTemporalStructureCompactElement(StructPstarptr const Ps){$/;"	f
CopyPstarToTemporalStructureCompactMix	StructuresForIO.c	/^struct StructPstarIOCompactMix CopyPstarToTemporalStructureCompactMix(const int index){$/;"	f
CopyPstarToTemporalStructureCompactMixElement	StructuresForIO.c	/^struct StructPstarIOCompactMix CopyPstarToTemporalStructureCompactMixElement(StructPstarptr const Ps){$/;"	f
CopyPstarToTemporalStructureLean	StructuresForIO.c	/^struct StructPstarIOLean CopyPstarToTemporalStructureLean(const int index){$/;"	f
CopyPstarToTemporalStructureLeanElement	StructuresForIO.c	/^struct StructPstarIOLean CopyPstarToTemporalStructureLeanElement(StructPstarptr const Ps){$/;"	f
CopyTemporalStructureCompactDoubleToPbodyCompactDouble	StructuresForIO.c	/^StructPbody CopyTemporalStructureCompactDoubleToPbodyCompactDouble(struct StructPbodyIOCompactDouble PbodyIOCompactDouble){$/;"	f
CopyTemporalStructureCompactDoubleToPhydroCompactDouble	StructuresForIO.c	/^StructPhydro CopyTemporalStructureCompactDoubleToPhydroCompactDouble(struct StructPhydroIOCompactDouble PhydroIOCompactDouble){$/;"	f
CopyTemporalStructureCompactDoubleToPsinkCompactDouble	StructuresForIO.c	/^StructPsink CopyTemporalStructureCompactDoubleToPsinkCompactDouble(struct StructPsinkIOCompactDouble PsinkIOCompactDouble){$/;"	f
CopyTemporalStructureCompactDoubleToPstarCompactDouble	StructuresForIO.c	/^StructPstar CopyTemporalStructureCompactDoubleToPstarCompactDouble(struct StructPstarIOCompactDouble PstarIOCompactDouble){$/;"	f
CopyTemporalStructureCompactMixToPbodyCompactMix	StructuresForIO.c	/^StructPbody CopyTemporalStructureCompactMixToPbodyCompactMix(struct StructPbodyIOCompactMix PbodyIOCompactMix){$/;"	f
CopyTemporalStructureCompactMixToPhydroCompactMix	StructuresForIO.c	/^StructPhydro CopyTemporalStructureCompactMixToPhydroCompactMix(struct StructPhydroIOCompactMix PhydroIOCompactMix){$/;"	f
CopyTemporalStructureCompactMixToPsinkCompactMix	StructuresForIO.c	/^StructPsink CopyTemporalStructureCompactMixToPsinkCompactMix(struct StructPsinkIOCompactMix PsinkIOCompactMix){$/;"	f
CopyTemporalStructureCompactMixToPstarCompactMix	StructuresForIO.c	/^StructPstar CopyTemporalStructureCompactMixToPstarCompactMix(struct StructPstarIOCompactMix PstarIOCompactMix){$/;"	f
CopyTemporalStructureCompactToPbodyCompact	StructuresForIO.c	/^StructPbody CopyTemporalStructureCompactToPbodyCompact(struct StructPbodyIOCompact PbodyIOCompact){$/;"	f
CopyTemporalStructureCompactToPhydroCompact	StructuresForIO.c	/^StructPhydro CopyTemporalStructureCompactToPhydroCompact(struct StructPhydroIOCompact PhydroIOCompact){$/;"	f
CopyTemporalStructureCompactToPsinkCompact	StructuresForIO.c	/^StructPsink CopyTemporalStructureCompactToPsinkCompact(struct StructPsinkIOCompact PsinkIOCompact){$/;"	f
CopyTemporalStructureCompactToPstarCompact	StructuresForIO.c	/^StructPstar CopyTemporalStructureCompactToPstarCompact(struct StructPstarIOCompact PstarIOCompact){$/;"	f
CopyTemporalStructureLeanToPbodyLean	StructuresForIO.c	/^StructPbody CopyTemporalStructureLeanToPbodyLean(struct StructPbodyIOLean PbodyIOLean){$/;"	f
CopyTemporalStructureLeanToPhydroLean	StructuresForIO.c	/^StructPhydro CopyTemporalStructureLeanToPhydroLean(struct StructPhydroIOLean PhydroIOLean){$/;"	f
CopyTemporalStructureLeanToPsinkLean	StructuresForIO.c	/^StructPsink CopyTemporalStructureLeanToPsinkLean(struct StructPsinkIOLean PsinkIOLean){$/;"	f
CopyTemporalStructureLeanToPstarLean	StructuresForIO.c	/^StructPstar CopyTemporalStructureLeanToPstarLean(struct StructPstarIOLean PstarIOLean){$/;"	f
CosmologicalRun	config.h	57;"	d
CosmologicalRun	config.h	59;"	d
Count	SizeDetermination.c	/^    int Count;$/;"	m	struct:StructCSActiveSNParticle	file:
Count	StellarFeedback.h	/^    int Count;$/;"	m	struct:StructActiveStellarFeedbackParticle
Count	StellarFeedback.h	/^    int Count;$/;"	m	struct:StructActiveStellarFeedbackSNParticle
CountActiveParticles	main.c	/^static void CountActiveParticles(void){$/;"	f	file:
CountCandidates	SNII.c	/^static int CountCandidates(void){$/;"	f	file:
CountDirectNeighborNumber	HydroKernel.c	/^void CountDirectNeighborNumber(void){$/;"	f
CountEmptyPbody	StructureOperation.c	/^int CountEmptyPbody(void){$/;"	f
CountEmptyPhydro	StructureOperation.c	/^int CountEmptyPhydro(void){$/;"	f
CountEmptyPsink	StructureOperation.c	/^int CountEmptyPsink(void){$/;"	f
CountEmptyPstar	StructureOperation.c	/^int CountEmptyPstar(void){$/;"	f
CountFeedbackNumber	StellarFeedback.c	/^int CountFeedbackNumber(void){$/;"	f
CountLFUV	TestRuns.c	/^static void CountLFUV(void){$/;"	f	file:
CountNeighborNumber	HydroKernel.c	/^void CountNeighborNumber(void){$/;"	f
CountRadiationPressureSourceNumber	RadiationPressure.c	/^int CountRadiationPressureSourceNumber(void){$/;"	f
CountStellarWindSourceNumber	StellarWind.c	/^int CountStellarWindSourceNumber(void){$/;"	f
CountTagZero	SetUpTestRun.c	/^static int CountTagZero(FILE *fp, const int Number){$/;"	f	file:
Counter	SizeDetermination.c	/^    int Counter;$/;"	m	struct:StructActiveParticle	file:
CreateActiveBaryonGroup	MPIParameters.c	/^void CreateActiveBaryonGroup(void){$/;"	f
CreateBaryonGroup	MPIParameters.c	/^void CreateBaryonGroup(void){$/;"	f
CreateHydroActiveGroup	MPIParameters.c	/^void CreateHydroActiveGroup(void){$/;"	f
CreateHydroGroup	MPIParameters.c	/^void CreateHydroGroup(void){$/;"	f
CurrentActiveIndexListSize	CalcEffectiveSurfaceArea.c	/^static int CurrentActiveIndexListSize = 0;$/;"	v	file:
CurrentHydroActive	FUV.c	/^static bool *CurrentHydroActive;$/;"	v	file:
CurrentMaxLevel	DataStructures.h	/^    short CurrentMaxLevel;            \/\/ The maximum level of this tree. $/;"	m	struct:StructHydroRoot_tag
CurrentMaxLevel	DataStructures.h	/^    short CurrentMaxLevel;         \/\/ The maximum level of this tree. $/;"	m	struct:StructGravityRoot_tag
CurrentMaxLevel	DataStructures.h	/^    short CurrentMaxLevel;         \/\/ The maximum level of this tree. $/;"	m	struct:StructYoungStarRoot_tag
DATE	Makefile	/^DATE = $(shell date '+%Y%m%d%H%M')$/;"	m
DAlpha	DataStructures.h	/^    double    DAlpha;     \/\/ <LEAN>$/;"	m	struct:StructPhydro_tag
DAlpha	StructuresForIO.h	/^    double DAlpha;$/;"	m	struct:StructPhydroIOCompactDouble
DAlpha	StructuresForIO.h	/^    float DAlpha;$/;"	m	struct:StructPhydroIOCompact
DAlpha	StructuresForIO.h	/^    float DAlpha;$/;"	m	struct:StructPhydroIOCompactMix
DBG_ID	config.h	39;"	d
DDD	ForceParallelTreeGRAPE.c	/^void DDD(const char *func, const int line){$/;"	f
DELAYED_FEEDBACK	reconfig.h	107;"	d
DELAYED_FEEDBACK	reconfig.h	154;"	d
DELAYED_FEEDBACK	reconfig.h	199;"	d
DELAYED_FEEDBACK	reconfig.h	250;"	d
DELAYED_FEEDBACK	reconfig.h	292;"	d
DELAYED_FEEDBACK	reconfig.h	311;"	d
DELAYED_FEEDBACK	reconfig.h	342;"	d
DELAYED_FEEDBACK	reconfig.h	534;"	d
DELAYED_FEEDBACK	reconfig.h	567;"	d
DELAYED_FEEDBACK	reconfig.h	606;"	d
DELAYED_FEEDBACK	reconfig.h	61;"	d
DELAYED_FEEDBACK	reconfig.h	645;"	d
DELAYED_FEEDBACK	reconfig.h	684;"	d
DELAYED_FEEDBACK	reconfig.h	728;"	d
DELAYED_FEEDBACK	reconfig.h	797;"	d
DELAYED_FEEDBACK	reconfig.h	833;"	d
DELAYED_FEEDBACK	reconfig.h	880;"	d
DELAYED_FEEDBACK	reconfig.h	902;"	d
DELAYED_FEEDBACK	reconfig.h	947;"	d
DELAYED_FEEDBACK	reconfig.h	969;"	d
DEPENDS	Makefile	/^DEPENDS   = $(OBJECTS:.o=.d)$/;"	m
DIMENSION	config.h	173;"	d
DIMENSION	reconfig.h	130;"	d
DIMENSION	reconfig.h	132;"	d
DIMENSION	reconfig.h	175;"	d
DIMENSION	reconfig.h	177;"	d
DIMENSION	reconfig.h	222;"	d
DIMENSION	reconfig.h	224;"	d
DIMENSION	reconfig.h	272;"	d
DIMENSION	reconfig.h	274;"	d
DIMENSION	reconfig.h	323;"	d
DIMENSION	reconfig.h	325;"	d
DIMENSION	reconfig.h	34;"	d
DIMENSION	reconfig.h	363;"	d
DIMENSION	reconfig.h	365;"	d
DIMENSION	reconfig.h	36;"	d
DIMENSION	reconfig.h	388;"	d
DIMENSION	reconfig.h	390;"	d
DIMENSION	reconfig.h	420;"	d
DIMENSION	reconfig.h	422;"	d
DIMENSION	reconfig.h	455;"	d
DIMENSION	reconfig.h	457;"	d
DIMENSION	reconfig.h	496;"	d
DIMENSION	reconfig.h	498;"	d
DIMENSION	reconfig.h	548;"	d
DIMENSION	reconfig.h	550;"	d
DIMENSION	reconfig.h	587;"	d
DIMENSION	reconfig.h	589;"	d
DIMENSION	reconfig.h	626;"	d
DIMENSION	reconfig.h	628;"	d
DIMENSION	reconfig.h	665;"	d
DIMENSION	reconfig.h	667;"	d
DIMENSION	reconfig.h	704;"	d
DIMENSION	reconfig.h	707;"	d
DIMENSION	reconfig.h	710;"	d
DIMENSION	reconfig.h	768;"	d
DIMENSION	reconfig.h	770;"	d
DIMENSION	reconfig.h	812;"	d
DIMENSION	reconfig.h	814;"	d
DIMENSION	reconfig.h	853;"	d
DIMENSION	reconfig.h	855;"	d
DIMENSION	reconfig.h	912;"	d
DIMENSION	reconfig.h	914;"	d
DIMENSION	reconfig.h	95;"	d
DIMENSION	reconfig.h	96;"	d
DIMENSION	reconfig.h	993;"	d
DIMENSION	reconfig.h	995;"	d
DISTANCE	Astro.h	19;"	d
DISTANCE2	Astro.h	20;"	d
DISTORTION_FLAG	main.c	/^int DISTORTION_FLAG;$/;"	v
DOT_PRODUCT	Astro.h	21;"	d
DQheat	DataStructures.h	/^    double    DQheat;     \/\/ <LEAN> The amount of the heating energy by SNe, which injects during dt.$/;"	m	struct:StructPhydro_tag
DQheat	StructuresForIO.h	/^    double DQheat;$/;"	m	struct:StructPhydroIOCompactDouble
DQheat	StructuresForIO.h	/^    float DQheat;$/;"	m	struct:StructPhydroIOCompact
DQheat	StructuresForIO.h	/^    float DQheat;$/;"	m	struct:StructPhydroIOCompactMix
DT_CONST	config.h	104;"	d
DURATOIN_TIME_AGNTORUS	HydroExtraOperations.c	20;"	d	file:
DZdiff	DataStructures.h	/^    double    DZdiff;$/;"	m	struct:StructPhydro_tag
DZdiff	HydroMisc.h	/^    double DZdiff;$/;"	m	struct:StructHydroAccExport
DZdiff	HydroMisc.h	/^    double DZdiff;$/;"	m	struct:StructHydroDensityImport
DZdiff	StructuresForIO.h	/^    double DZdiff;$/;"	m	struct:StructPhydroIOCompactDouble
DZdiff	StructuresForIO.h	/^    float DZdiff;$/;"	m	struct:StructPhydroIOCompact
DZdiff	StructuresForIO.h	/^    float DZdiff;$/;"	m	struct:StructPhydroIOCompactMix
DZdiff	StructuresForIO.h	/^    float DZdiff;$/;"	m	struct:StructPhydroIOLean
DZw	DataStructures.h	/^    double    DZw;        \/\/ The time derivative of the weight used in SPSPH$/;"	m	struct:StructPhydro_tag
DZw	HydroMisc.h	/^    double    DZw;$/;"	m	struct:StructHydroAccImport
DZw	StructuresForIO.h	/^    double DZw;$/;"	m	struct:StructPhydroIOCompactDouble
DZw	StructuresForIO.h	/^    float DZw;$/;"	m	struct:StructPhydroIOCompact
DZw	StructuresForIO.h	/^    float DZw;$/;"	m	struct:StructPhydroIOCompactMix
DZw	StructuresForIO.h	/^    float DZw;$/;"	m	struct:StructPhydroIOLean
DampInterval	DataStructures.h	/^    double DampInterval;$/;"	m	struct:StructPall
Data1	IO.c	/^    float Data1; \/\/ $/;"	m	struct:StructWrite4D2UBody	file:
Data2	IO.c	/^    float Data2; \/\/ $/;"	m	struct:StructWrite4D2UBody	file:
Data3	IO.c	/^    float Data3; \/\/ $/;"	m	struct:StructWrite4D2UBody	file:
Data4	IO.c	/^    float Data4; \/\/ $/;"	m	struct:StructWrite4D2UBody	file:
DataDump	IO.c	/^void DataDump(void){$/;"	f
DataFileOperation_Double	config.h	/^    DataFileOperation_Double,$/;"	e	enum:__anon12
DataFileOperation_Halve	config.h	/^    DataFileOperation_Halve,$/;"	e	enum:__anon12
DataFileOperation_Merge	config.h	/^    DataFileOperation_Merge,$/;"	e	enum:__anon12
DataFullCheckHII	SizeDetermination.c	/^static inline void DataFullCheckHII(const int Index){$/;"	f	file:
DataFullCheckHydro	SizeDetermination.c	/^static inline void DataFullCheckHydro(const int Index){$/;"	f	file:
DataFullCheckSNe	SizeDetermination.c	/^static inline void DataFullCheckSNe(const int Index){$/;"	f	file:
DataFullDump	IO.c	/^void DataFullDump(void){$/;"	f
DataPacking	Decomposition.c	/^static void DataPacking(const int SendRank, int NContainerSend[]){$/;"	f	file:
DataPackingNew	Decomposition.c	/^static void DataPackingNew(const int SendRank, int NContainerSend[restrict], void *DecompositionExportSend){$/;"	f	file:
DataUnPacking	Decomposition.c	/^static void DataUnPacking(int NContainerRecv[]){$/;"	f	file:
DataUnPackingNew	Decomposition.c	/^static void DataUnPackingNew(int NContainerRecv[restrict], void *DecompositionExportRecv){$/;"	f	file:
DaughterParticlePositions	ParticleSplitting.c	/^static void DaughterParticlePositions(double Pos[][3]){$/;"	f	file:
Ddif	DataStructures.h	/^    double    Ddif;       \/\/ The diffusion parameter for SPSPH$/;"	m	struct:StructPhydro_tag
Ddif	HydroMisc.h	/^    double    Ddif;          \/\/ Diffusion coef.$/;"	m	struct:StructHydroAccExport
Ddif	StructuresForIO.h	/^    double Ddif;$/;"	m	struct:StructPhydroIOCompactDouble
Ddif	StructuresForIO.h	/^    float Ddif;$/;"	m	struct:StructPhydroIOCompact
Ddif	StructuresForIO.h	/^    float Ddif;$/;"	m	struct:StructPhydroIOCompactMix
Ddif	StructuresForIO.h	/^    float Ddif;$/;"	m	struct:StructPhydroIOLean
DecompFrequencyCounter	Run.c	/^static int DecompFrequencyCounter = 0;$/;"	v	file:
DecompNSample	config.h	42;"	d
Decomposition	DataStructures.h	/^    double Decomposition;$/;"	m	struct:StructTimingResults
DecompositionElementNumberError	Errors.h	16;"	d
DecompositionIterationCount	Decomposition.c	/^static int DecompositionIterationCount;$/;"	v	file:
DecompositionRecv	Decomposition.c	/^StructPbodyptr DecompositionRecv;$/;"	v
DecompositionSend	Decomposition.c	/^StructPbodyptr DecompositionSend;$/;"	v
DecompositionThisStep	DataStructures.h	/^    double DecompositionThisStep;$/;"	m	struct:StructTimingResults
DegreeOfFreedom	DataStructures.h	/^    double DegreeOfFreedom;$/;"	m	struct:StructPall
DelayedFBActiveStars	Delayed.c	/^} *DelayedFBActiveStars;$/;"	v	typeref:struct:StructDelayedFBActiveStars
DelayedFBExportFlagsMaxAllocated	Delayed.c	/^static int DelayedFBExportFlagsMaxAllocated = 0;$/;"	v	file:
DelayedSNe	Delayed.c	/^void DelayedSNe(void){$/;"	f
Delete	Allocators.c	/^void Delete(void *p){$/;"	f
DeleteActiveBaryonGroup	MPIParameters.c	/^void DeleteActiveBaryonGroup(void){$/;"	f
DeleteActiveHydroGroup	MPIParameters.c	/^void DeleteActiveHydroGroup(void){$/;"	f
DeleteBaryonGroup	MPIParameters.c	/^void DeleteBaryonGroup(void){$/;"	f
DeleteHydroGroup	MPIParameters.c	/^void DeleteHydroGroup(void){$/;"	f
Density	DataStructures.h	/^    double  Density;        \/\/ <TMP> <LEAN> $/;"	m	struct:StructPstar_tag
Density	Delayed.c	/^    double Density;$/;"	m	struct:StructDelayedFBActiveStars	file:
Density	SizeDetermination.c	/^    double    Density;$/;"	m	struct:StructCSImport	file:
Density	SizeDetermination.c	/^    double    Density;$/;"	m	struct:StructCSImportSNParticle	file:
Density	SizeDetermination.c	/^    double Density;    \/\/ The mass weighted nomalization factor.$/;"	m	struct:StructCSActiveSNParticle	file:
Density	SizeDetermination.c	/^    double Density;$/;"	m	struct:StructCSStellarFeedbackLocalInfo	file:
Density	StellarFeedback.c	/^    double Density;     \/\/ Mass weighted normalization factor.$/;"	m	struct:StructStellarFeedbackImport	file:
Density	StellarFeedback.c	/^    double Density;    \/\/ The mass weighted nomalization factor.$/;"	m	struct:StructEnergyHeavyElements	file:
Density	StellarFeedback.c	/^    double Density;$/;"	m	struct:StructStellarFeedbackLocalInfo	file:
Density	StellarFeedback.h	/^    double Density; \/\/ The mass weighted nomalization factor.$/;"	m	struct:StructActiveStellarFeedbackParticle
Density	StellarFeedback.h	/^    double Density; \/\/ The mass weighted nomalization factor.$/;"	m	struct:StructActiveStellarFeedbackSNParticle
DensityMax	SizeDetermination.c	/^    double    DensityMax;$/;"	m	struct:StructCSImportHydroParticle	file:
DensityMax	SizeDetermination.c	/^    double DensityMax;$/;"	m	struct:StructCSActiveHydroParticle	file:
DensityMax	SizeDetermination.c	/^    double DensityMax;$/;"	m	struct:StructCSHydroLocalInfo	file:
Diag	FUV.c	/^static double Diag;$/;"	v	file:
Diag	ForceParallelTreeGRAPE.c	/^static double Diag;$/;"	v	file:
Diag	PlantGravityTree.c	/^static double Diag;$/;"	v	file:
Diag	PlantYoungStarTree.c	/^static double Diag;$/;"	v	file:
DiagHydro	PlantHydroTree.c	/^static double DiagHydro;$/;"	v	file:
DiagHydroForEffSA	CalcEffectiveSurfaceArea.c	/^static double DiagHydroForEffSA;$/;"	v	file:
DiagHydroImported	PlantHydroTreeImported.c	/^static double DiagHydroImported;$/;"	v	file:
DiagStellar	PlantStellarTree.c	/^static double DiagStellar;$/;"	v	file:
DiceRunParameters	SetUpTestRun.c	/^} DiceRunParameters;$/;"	v	typeref:struct:StructDiceRun
DirectoryCreationError	Errors.h	8;"	d
DiskEdge	SetUpTestRun.c	11876;"	d	file:
DiskEdge	SetUpTestRun.c	12105;"	d	file:
DiskEdge	SetUpTestRun.c	12169;"	d	file:
DiskEdge	SetUpTestRun.c	12396;"	d	file:
DiskEdge	SetUpTestRun.c	12523;"	d	file:
DistCmp	SetUpTestRun.c	/^static int DistCmp(const void *x, const void *y){$/;"	f	file:
DistMin	HIIregion.c	/^    double    DistMin;$/;"	m	struct:StructHIIImport	file:
DistMin	HIIregion.c	/^    double DistMin;$/;"	m	struct:StructActiveHIIParticle	file:
DistMin	HIIregion.c	/^    double DistMin;$/;"	m	struct:StructHIILocalInfo	file:
Distance	SinkParticle.c	/^    double Distance;    \/\/ Distance to the target sink particle.$/;"	m	struct:StructHydroSinkFlags	file:
Distance	SinkParticle.c	/^    double Distance;    \/\/ Distance to the target sink particle.$/;"	m	struct:StructSinkSinkFlags	file:
Distance	main.c	/^static double Rsphere,Distance;$/;"	v	file:
DistanceMax	DataStructures.h	/^    double  DistanceMax;      \/\/ Maximum distance between particles and the center of this node.$/;"	m	struct:StructHydroNode
DistanceMax	DataStructures.h	/^    double  DistanceMax;      \/\/ The maximum distance between particles and the center of this node.$/;"	m	struct:StructGravityNode
DistanceMax	DataStructures.h	/^    double  DistanceMax;      \/\/ The maximum distance between particles and the center of this node.$/;"	m	struct:StructYoungStarNode
DistanceMin	Delayed.c	/^    double DistanceMin;$/;"	m	struct:StructDelayedFBActiveStars	file:
DistanceMin	SizeDetermination.c	/^    double    DistanceMin;$/;"	m	struct:StructCSImport	file:
DistanceMin	SizeDetermination.c	/^    double    DistanceMin;$/;"	m	struct:StructCSImportHIIParticle	file:
DistanceMin	SizeDetermination.c	/^    double    DistanceMin;$/;"	m	struct:StructCSImportSNParticle	file:
DistanceMin	SizeDetermination.c	/^    double    DistanceMin;$/;"	m	struct:StructCSImportSWParticle	file:
DistanceMin	SizeDetermination.c	/^    double DistanceMin;$/;"	m	struct:StructCSActiveHIIParticle	file:
DistanceMin	SizeDetermination.c	/^    double DistanceMin;$/;"	m	struct:StructCSActiveSNParticle	file:
DistanceMin	SizeDetermination.c	/^    double DistanceMin;$/;"	m	struct:StructCSActiveSWParticle	file:
DistanceMin	SizeDetermination.c	/^    double DistanceMin;$/;"	m	struct:StructCSHIILocalInfo	file:
DistanceMin	SizeDetermination.c	/^    double DistanceMin;$/;"	m	struct:StructCSStellarFeedbackLocalInfo	file:
DistanceMin	SizeDetermination.c	/^    double DistanceMin;$/;"	m	struct:StructCSStellarWindLocalInfo	file:
DistanceMin	StellarFeedback.c	/^    double DistanceMin;$/;"	m	struct:StructEnergyHeavyElements	file:
DistanceMin	StellarFeedback.c	/^    double DistanceMin;$/;"	m	struct:StructStellarFeedbackImport	file:
DistanceMin	StellarFeedback.c	/^    double DistanceMin;$/;"	m	struct:StructStellarFeedbackLocalInfo	file:
DistanceMin	StellarFeedback.h	/^    double DistanceMin;$/;"	m	struct:StructActiveStellarFeedbackParticle
DistanceMin	StellarFeedback.h	/^    double DistanceMin;$/;"	m	struct:StructActiveStellarFeedbackSNParticle
DistanceMinGlobalID	Delayed.c	/^    unsigned long int DistanceMinGlobalID;$/;"	m	struct:StructDelayedFBActiveStars	file:
DistanceMinGlobalID	SizeDetermination.c	/^    unsigned long int  DistanceMinGlobalID;$/;"	m	struct:StructCSImportSNParticle	file:
DistanceMinGlobalID	SizeDetermination.c	/^    unsigned long int  DistanceMinGlobalID;$/;"	m	struct:StructCSImportSWParticle	file:
DistanceMinGlobalID	SizeDetermination.c	/^    unsigned long int DistanceMinGlobalID;$/;"	m	struct:StructCSActiveSNParticle	file:
DistanceMinGlobalID	SizeDetermination.c	/^    unsigned long int DistanceMinGlobalID;$/;"	m	struct:StructCSActiveSWParticle	file:
DistanceMinGlobalID	SizeDetermination.c	/^    unsigned long int DistanceMinGlobalID;$/;"	m	struct:StructCSStellarFeedbackLocalInfo	file:
DistanceMinGlobalID	SizeDetermination.c	/^    unsigned long int DistanceMinGlobalID;$/;"	m	struct:StructCSStellarWindLocalInfo	file:
DistanceMinGlobalID	StellarFeedback.c	/^    unsigned long int DistanceMinGlobalID;$/;"	m	struct:StructEnergyHeavyElements	file:
DistanceMinGlobalID	StellarFeedback.c	/^    unsigned long int DistanceMinGlobalID;$/;"	m	struct:StructStellarFeedbackImport	file:
DistanceMinGlobalID	StellarFeedback.c	/^    unsigned long int DistanceMinGlobalID;$/;"	m	struct:StructStellarFeedbackLocalInfo	file:
DistanceMinGlobalID	StellarFeedback.h	/^    unsigned long int DistanceMinGlobalID;$/;"	m	struct:StructActiveStellarFeedbackParticle
DistanceMinGlobalID	StellarFeedback.h	/^    unsigned long int DistanceMinGlobalID;$/;"	m	struct:StructActiveStellarFeedbackSNParticle
DistributeEnergyHeavyElements	StellarFeedback.c	/^static void DistributeEnergyHeavyElements(const int NExplosion, struct StructEnergyHeavyElements EnergyHeavyElements[restrict], const bool Local){$/;"	f	file:
Div	DataStructures.h	/^    double    Div;        \/\/ <LEAN> $/;"	m	struct:StructPhydro_tag
Div	HydroMisc.h	/^    double    Div;     \/\/ Divergense of velocity.$/;"	m	struct:StructHydroDensityImport
Div	HydroMisc.h	/^    double Div;$/;"	m	struct:StructHydroAccExport
Div	StructuresForIO.h	/^    double Div;$/;"	m	struct:StructPhydroIOCompactDouble
Div	StructuresForIO.h	/^    float Div;$/;"	m	struct:StructPhydroIOCompact
Div	StructuresForIO.h	/^    float Div;$/;"	m	struct:StructPhydroIOCompactMix
DomainDecompResult	Decomposition.c	/^static void DomainDecompResult(char *name){$/;"	f	file:
DomainDecomposition	Decomposition.c	/^void DomainDecomposition(void){$/;"	f
DomainDecompositionOnlyDataExchange	Decomposition.c	/^void DomainDecompositionOnlyDataExchange(void){$/;"	f
DomainDistanceSQR	Delayed.c	/^static inline double DomainDistanceSQR(double Pos[restrict], const int NodeID){$/;"	f	file:
DomainDistanceSQR	HydroAcc.c	/^static inline double __attribute__((always_inline)) DomainDistanceSQR(double Pos[restrict], const int DomainID){$/;"	f	file:
DomainDistanceSQR	HydroDensity.c	/^static inline double __attribute__((always_inline)) DomainDistanceSQR(double Pos[restrict], const int NodeID){$/;"	f	file:
DomainDistanceSQR	HydroKernel.c	/^static inline double __attribute__((always_inline)) DomainDistanceSQR(double Pos[restrict], const int NodeID){ $/;"	f	file:
DomainDistanceSQR	SinkParticle.c	/^static inline double DomainDistanceSQR(double Pos[restrict], const int NodeID){$/;"	f	file:
DomainID	CalcEffectiveSurfaceArea.c	/^    int     DomainID;$/;"	m	struct:StructEffSAExport	file:
DomainID	CalcEffectiveSurfaceArea.c	/^    int    DomainID;$/;"	m	struct:StructNBCacheForEffSA	file:
DomainKey	Decomposition.c	/^static int *DomainKey;$/;"	v	file:
DomainKeyCurrentSize	Decomposition.c	/^static int DomainKeyCurrentSize;$/;"	v	file:
DomainKeyMaxAllocated	Decomposition.c	/^static int DomainKeyMaxAllocated = 0;$/;"	v	file:
DomainOutPut	PreDecomposition.c	/^static void DomainOutPut(char *name){$/;"	f	file:
DomainOutPutKey	Decomposition.c	/^static void DomainOutPutKey(void){$/;"	f	file:
DomainSamplesOutPut	PreDecomposition.c	/^static void DomainSamplesOutPut(char *name){$/;"	f	file:
DragTermForCosmologicalRun	BoundaryCondition.c	/^static void DragTermForCosmologicalRun(void){$/;"	f	file:
DragTermForNonCosmologicalRun	BoundaryCondition.c	/^static void DragTermForNonCosmologicalRun(void){$/;"	f	file:
DtCmp	main.c	/^static int DtCmp(const void *x, const void *y){$/;"	f	file:
Du	DataStructures.h	/^    double    Du;         \/\/ Du\/Dt.$/;"	m	struct:StructPhydro_tag
Du	HydroMisc.h	/^    double    Du;     \/\/ du\/dt.$/;"	m	struct:StructHydroAccImport
Du	StructuresForIO.h	/^    double Du;$/;"	m	struct:StructPhydroIOCompactDouble
Du	StructuresForIO.h	/^    float Du;$/;"	m	struct:StructPhydroIOCompact
Du	StructuresForIO.h	/^    float Du;$/;"	m	struct:StructPhydroIOCompactMix
Du	StructuresForIO.h	/^    float Du;$/;"	m	struct:StructPhydroIOLean
DuCooling	DataStructures.h	/^    double    DuCooling;  \/\/ <LEAN> The amount of the energy loss by the radiative cooling.$/;"	m	struct:StructPhydro_tag
DuCooling	StructuresForIO.h	/^    double DuCooling;$/;"	m	struct:StructPhydroIOCompactDouble
DuCooling	StructuresForIO.h	/^    float DuCooling;$/;"	m	struct:StructPhydroIOCompact
DuCooling	StructuresForIO.h	/^    float DuCooling;$/;"	m	struct:StructPhydroIOCompactMix
DuPrev	DataStructures.h	/^    double    DuPrev;     \/\/ <LEAN> Du\/Dt.$/;"	m	struct:StructPhydro_tag
DuPrev	StructuresForIO.h	/^    double DuPrev;$/;"	m	struct:StructPhydroIOCompactDouble
DuPrev	StructuresForIO.h	/^    float DuPrev;$/;"	m	struct:StructPhydroIOCompact
DuPrev	StructuresForIO.h	/^    float DuPrev;$/;"	m	struct:StructPhydroIOCompactMix
ELECTRON_CHARGE	Constants.h	25;"	d
ELECTRON_CHARGE_CGS	Constants.h	33;"	d
ELECTRON_MASS	Constants.h	24;"	d
ELECTRON_MASS_CGS	Constants.h	32;"	d
ELEMENTAL_CHARGE	Constants.h	23;"	d
ELEMENTAL_CHARGE_CGS	Constants.h	31;"	d
ENERGY_AU	Constants.h	74;"	d
ENERGY_AU_CGS	Constants.h	80;"	d
ENERGY_SI_CGS	Constants.h	9;"	d
ENUMTOSTR	config.h	170;"	d
EQ_INITIAL_TEMPERATURE	TestRuns.c	4922;"	d	file:
ERG_TO_EV	Constants.h	91;"	d
EV_TO_ERG	Constants.h	92;"	d
EV_TO_J	Constants.h	88;"	d
EXParams	TestRuns.c	/^} EXParams;$/;"	v	typeref:struct:StructECParams	file:
E_BARYON	Read.c	6;"	d	file:
E_CDM	Read.c	7;"	d	file:
Ecc	main.c	5387;"	d	file:
EdgeSizeX	PreDecomposition.c	56;"	d	file:
EdgeSizeXY	PreDecomposition.c	57;"	d	file:
EdgeSizeXYZ	PreDecomposition.c	58;"	d	file:
EdgeX	PreDecomposition.c	50;"	d	file:
EdgeXY	PreDecomposition.c	51;"	d	file:
EdgeXYZ	PreDecomposition.c	52;"	d	file:
EdgesForActiveHydro	DataStructures.c	/^struct StructEdges *EdgesForActiveHydro = NULL;$/;"	v	typeref:struct:StructEdges
EdgesForActiveSink	DataStructures.c	/^struct StructEdges *EdgesForActiveSink = NULL;$/;"	v	typeref:struct:StructEdges
EdgesForEffSA	CalcEffectiveSurfaceArea.c	/^static struct StructEdges *EdgesForEffSA = NULL;$/;"	v	typeref:struct:StructEdges	file:
EdgesForEffSAWithExtent	CalcEffectiveSurfaceArea.c	/^static struct StructEdges *EdgesForEffSAWithExtent = NULL;$/;"	v	typeref:struct:StructEdges	file:
EdgesForGravity	DataStructures.c	/^struct StructEdges *EdgesForGravity = NULL;$/;"	v	typeref:struct:StructEdges
EdgesForHydro	DataStructures.c	/^struct StructEdges *EdgesForHydro = NULL;$/;"	v	typeref:struct:StructEdges
EdgesForHydroEffSA	CalcEffectiveSurfaceArea.c	/^static struct StructEdges *EdgesForHydroEffSA = NULL;$/;"	v	typeref:struct:StructEdges	file:
EdgesForHydroEffSAWithExtent	CalcEffectiveSurfaceArea.c	/^static struct StructEdges *EdgesForHydroEffSAWithExtent = NULL;$/;"	v	typeref:struct:StructEdges	file:
EdgesForSink	DataStructures.c	/^struct StructEdges *EdgesForSink = NULL;$/;"	v	typeref:struct:StructEdges
EdgesForStars	DataStructures.c	/^struct StructEdges *EdgesForStars = NULL;$/;"	v	typeref:struct:StructEdges
EdgesForYoungStars	DataStructures.c	/^struct StructEdges *EdgesForYoungStars = NULL;$/;"	v	typeref:struct:StructEdges
EffSADomainDistanceSQR	CalcEffectiveSurfaceArea.c	/^static inline double __attribute__((always_inline)) EffSADomainDistanceSQR(double Pos[restrict], const int DomainID){$/;"	f	file:
EffSADomainDistanceSQRWithExtent	CalcEffectiveSurfaceArea.c	/^static inline double __attribute__((always_inline)) EffSADomainDistanceSQRWithExtent(double Pos[restrict], const int DomainID){$/;"	f	file:
EffSAExportFlags	CalcEffectiveSurfaceArea.c	/^static bool *EffSAExportFlags = NULL;$/;"	v	file:
EffSAExportFlagsMaxAllocated	CalcEffectiveSurfaceArea.c	/^static int EffSAExportFlagsMaxAllocated = 0;$/;"	v	file:
EffSAExportRecv	CalcEffectiveSurfaceArea.c	/^static struct StructEffSAExport *EffSAExportRecv = NULL;$/;"	v	typeref:struct:StructEffSAExport	file:
EffSAExportRecvAllocated	CalcEffectiveSurfaceArea.c	/^static int EffSAExportRecvAllocated = 0;$/;"	v	file:
EffSAExportSend	CalcEffectiveSurfaceArea.c	/^static struct StructEffSAExport *EffSAExportSend;$/;"	v	typeref:struct:StructEffSAExport	file:
EffSAOverlapDomain	CalcEffectiveSurfaceArea.c	/^static inline bool __attribute__((always_inline)) EffSAOverlapDomain(double Pos[restrict], const double h, const int DomainID){$/;"	f	file:
EffSAOverlapDomainAABBWithExtent	CalcEffectiveSurfaceArea.c	/^static inline bool __attribute__((always_inline)) EffSAOverlapDomainAABBWithExtent(double Pos[restrict], const double h, const int DomainID){$/;"	f	file:
EffSAOverlapDomainPositionWithExtent	CalcEffectiveSurfaceArea.c	/^static inline bool __attribute__((always_inline)) EffSAOverlapDomainPositionWithExtent(double Pos[restrict], const int DomainID){$/;"	f	file:
EffSAOverlapDomainToDomain	CalcEffectiveSurfaceArea.c	/^static inline bool __attribute__((always_inline)) EffSAOverlapDomainToDomain(const struct StructEdges Edge0, const struct StructEdges Edge1){$/;"	f	file:
EffSAOverlapDomainWithExtent	CalcEffectiveSurfaceArea.c	/^static inline bool __attribute__((always_inline)) EffSAOverlapDomainWithExtent(double Pos[restrict], const double h, const int DomainID){$/;"	f	file:
EffSAVecSize	CalcEffectiveSurfaceArea.h	2;"	d
EffSAVecSize	StellarFeedback.h	3;"	d
Elements	DataStructures.h	/^    double    Elements[CELibYield_Number]; \/\/ <MIX> H, He, C, N, O, Ne, Mg, Si, S, Ca, Fe, Ni, Eu$/;"	m	struct:StructPhydro_tag
Elements	DataStructures.h	/^    double    Elements[CELibYield_Number]; \/\/ <MIX> H, He, C, N, O, Ne, Mg, Si, S, Ca, Fe, Ni, Eu$/;"	m	struct:StructPstar_tag
Elements	DataStructures.h	/^    double  Elements[CELibYield_Number]; \/\/ <MIX> H, He, C, N, O, Ne, Mg, Si, S, Ca, Fe, Ni$/;"	m	struct:StructPsink_tag
Elements	HydroMisc.h	/^    double Elements[CELibYield_Number-1]; \/\/He, C, N, O, Ne, Mg, Si, S, Ca, Fe, Ni, (Eu)$/;"	m	struct:StructHydroAccExport
Elements	SinkParticle.c	/^    double  Elements[CELibYield_Number]; \/\/H, He, C, N, O, Ne, Mg, Si, S, Ca, Fe, Ni$/;"	m	struct:StructSinkExport	file:
Elements	SinkParticle.c	/^    double  Elements[CELibYield_Number]; \/\/H, He, C, N, O, Ne, Mg, Si, S, Ca, Fe, Ni$/;"	m	struct:StructSinkImport	file:
Elements	StructuresForIO.h	/^    double Elements[13];$/;"	m	struct:StructPhydroIOCompactDouble
Elements	StructuresForIO.h	/^    double Elements[13];$/;"	m	struct:StructPhydroIOCompactMix
Elements	StructuresForIO.h	/^    double Elements[13];$/;"	m	struct:StructPsinkIOCompactDouble
Elements	StructuresForIO.h	/^    double Elements[13];$/;"	m	struct:StructPsinkIOCompactMix
Elements	StructuresForIO.h	/^    double Elements[13];$/;"	m	struct:StructPstarIOCompactDouble
Elements	StructuresForIO.h	/^    double Elements[13];$/;"	m	struct:StructPstarIOCompactMix
Elements	StructuresForIO.h	/^    float Elements[13];$/;"	m	struct:StructPhydroIOCompact
Elements	StructuresForIO.h	/^    float Elements[13];$/;"	m	struct:StructPhydroIOLean
Elements	StructuresForIO.h	/^    float Elements[13];$/;"	m	struct:StructPsinkIOCompact
Elements	StructuresForIO.h	/^    float Elements[13];$/;"	m	struct:StructPsinkIOLean
Elements	StructuresForIO.h	/^    float Elements[13];$/;"	m	struct:StructPstarIOCompact
Elements	StructuresForIO.h	/^    float Elements[13];$/;"	m	struct:StructPstarIOLean
EmuPipeLines	GRAPEEmulator.c	3;"	d	file:
End	Run.c	557;"	d	file:
EndLogs	Logs.c	/^void EndLogs(void){$/;"	f
EnergyConvertToSimulationUnit	StellarFeedback.c	/^static double EnergyConvertToSimulationUnit;$/;"	v	file:
EnergyDensity	DataStructures.h	/^    double    EnergyDensity; \/\/ Energy density used in DISPH$/;"	m	struct:StructPhydro_tag
EnergyDensity	HydroAcc.c	/^    double EnergyDensity; $/;"	m	struct:StructHydroAccCorrectEnegyDensityGradh	file:
EnergyDensity	HydroMisc.h	/^    double    EnergyDensity; \/\/ Energy Density$/;"	m	struct:StructHydroAccExport
EnergyDensity	HydroMisc.h	/^    double    EnergyDensity; \/\/ Energy Density$/;"	m	struct:StructHydroDensityImport
EnergyDensity	StructuresForIO.h	/^    double EnergyDensity;$/;"	m	struct:StructPhydroIOCompactDouble
EnergyDensity	StructuresForIO.h	/^    float EnergyDensity;$/;"	m	struct:StructPhydroIOCompact
EnergyDensity	StructuresForIO.h	/^    float EnergyDensity;$/;"	m	struct:StructPhydroIOCompactMix
EnergyDensity	StructuresForIO.h	/^    float EnergyDensity;$/;"	m	struct:StructPhydroIOLean
EnergyDensityPred	DataStructures.h	/^    double    EnergyDensityPred; \/\/ <TMP> <LEAN> Predictor of the energy density used in DISPH.$/;"	m	struct:StructPhydro_tag
EnergyFraction	main.c	2424;"	d	file:
EnergyMassMetalInjection	Delayed.c	/^static void EnergyMassMetalInjection(const int NLocalTarget, const int NProcs, bool DelayedFBExportFlags[][NProcs-1]){$/;"	f	file:
EnergyMassMetalInjectionEngine	Delayed.c	/^static void EnergyMassMetalInjectionEngine(struct StructDelayedFBInjection FBInjection, const int fff){$/;"	f	file:
EnsembleMeanDecomposition	PreDecomposition.c	4;"	d	file:
Eps	DataStructures.h	/^    double    Eps;          \/\/ <MIX> The softening length.$/;"	m	struct:StructPbody_tag
Eps	DataStructures.h	/^    double Eps;$/;"	m	struct:StructGravityCache
Eps	DataStructures.h	/^    double Eps;$/;"	m	struct:StructYoungStarCache
Eps	FUV.c	/^    double Eps;$/;"	m	struct:StructFUVLeavesExportImport	file:
Eps	ForceParallelTreeGRAPE.c	/^    double Eps;$/;"	m	struct:StructLeavesExportImport	file:
Eps	ForceTree.c	/^    double Eps;$/;"	m	struct:StructForceExport	file:
Eps	PlantGravityTree.c	/^    double Eps;$/;"	m	struct:StructCachedData	file:
Eps	PlantYoungStarTree.c	/^    double Eps;$/;"	m	struct:StructCachedData	file:
Eps	SetUpTestRun.c	/^    double Eps;$/;"	m	struct:StructIOKeisoku	file:
Eps	SetUpTestRun.c	/^    double Eps[4]; \/\/ Eps for particles of gas, dm, (halo) stars, bulge stars.$/;"	m	struct:StructDiceRun	file:
Eps	SetUpTestRun.c	/^    float Eps;$/;"	m	struct:StructDM	file:
Eps	SetUpTestRun.c	/^    float Eps;$/;"	m	struct:StructGas	file:
Eps	SetUpTestRun.c	/^    float Eps;$/;"	m	struct:StructStars	file:
Eps	SinkParticle.c	/^    double  Eps; \/\/ the softening length.$/;"	m	struct:StructSinkExport	file:
Eps	StructuresForIO.h	/^    double Eps;$/;"	m	struct:StructPbodyIOCompactDouble
Eps	StructuresForIO.h	/^    double Eps;$/;"	m	struct:StructPbodyIOCompactMix
Eps	StructuresForIO.h	/^    float Eps;$/;"	m	struct:StructPbodyIOCompact
Eps	StructuresForIO.h	/^    float Eps;$/;"	m	struct:StructPbodyIOLean
Eps2	DataStructures.h	/^    double  Eps2;             \/\/ Mass weighted (softening length)^2.$/;"	m	struct:StructGravityNode
EpsMax	DataStructures.h	/^    double  EpsMax;           \/\/ The maximum gravitational softening length.$/;"	m	struct:StructGravityNode
EpsMin	DataStructures.h	/^    double  EpsMin;           \/\/ The minimum gravitational softening length.$/;"	m	struct:StructGravityNode
Era	DataStructures.h	/^    double    Era;       \/\/ dtmin*2^kmax + TCurrent. \/\/if t>Era, BuildHierarchicalTimeStep()$/;"	m	struct:StructPall
EraLocal	DataStructures.h	/^    double    EraLocal;  \/\/ <TMP> <LEAN>$/;"	m	struct:StructPbody_tag
EraLocal	DataStructures.h	/^    double    EraLocal;  \/\/ Tstep*dtmin.$/;"	m	struct:StructPall
EraLocalEnd	DataStructures.h	/^    double    EraLocalEnd;    \/\/ dtmin*2^kmax. $/;"	m	struct:StructPall
EraLocal_hydro	DataStructures.h	/^    double    EraLocal_hydro;  \/\/ <LEAN> The local time in a current block.$/;"	m	struct:StructPhydro_tag
EraLocal_hydro	StructuresForIO.h	/^    double EraLocal_hydro;$/;"	m	struct:StructPhydroIOCompactDouble
EraLocal_hydro	StructuresForIO.h	/^    float EraLocal_hydro;$/;"	m	struct:StructPhydroIOCompact
EraLocal_hydro	StructuresForIO.h	/^    float EraLocal_hydro;$/;"	m	struct:StructPhydroIOCompactMix
EraStart	DataStructures.h	/^    double    EraStart;  \/\/ EraStart = TCurrent at the first step of HTS.$/;"	m	struct:StructPall
EstimateAbudancePattern	EstimateXFe.c	/^void EstimateAbudancePattern(double Elements[], const double FeH){$/;"	f
EstimateAbudancePatternForMass	EstimateXFe.c	/^void EstimateAbudancePatternForMass(double Elements[], const double FeH, const double Mass){$/;"	f
EstimateAbundancePatternTest	EstimateXFe.c	/^void EstimateAbundancePatternTest(void){$/;"	f
EstimateMassX	EstimateXFe.c	/^double EstimateMassX(const char ElementName[], const double FeH){$/;"	f
EstimateNX	EstimateXFe.c	/^double EstimateNX(const char ElementName[], const double FeH){$/;"	f
EstimateXFe	EstimateXFe.c	/^double EstimateXFe(const char ElementName[], const double FeH){$/;"	f
Evaluate4D2UExtraInfo	IO.c	/^static int Evaluate4D2UExtraInfo(const int Mode, const int Type){$/;"	f	file:
EvaluateColumnDensity	Cooling.c	/^static inline double __attribute__((always_inline)) EvaluateColumnDensity(const int index){$/;"	f	file:
EvaluateColumnDensity	FUV.c	/^static inline double __attribute__((always_inline)) EvaluateColumnDensity(const int index){$/;"	f	file:
EventCounter	HydroExtraOperations.c	/^static int EventCounter = 0;$/;"	v	file:
EventTimeAGB	DataStructures.h	/^    double    EventTimeAGB; \/\/ Next event time of AGB mass loss.$/;"	m	struct:StructPstar_tag
EventTimeAGB	StructuresForIO.h	/^    double EventTimeAGB;$/;"	m	struct:StructPstarIOCompactDouble
EventTimeAGB	StructuresForIO.h	/^    float EventTimeAGB;$/;"	m	struct:StructPstarIOCompact
EventTimeAGB	StructuresForIO.h	/^    float EventTimeAGB;$/;"	m	struct:StructPstarIOCompactMix
EventTimeAGB	StructuresForIO.h	/^    float EventTimeAGB;$/;"	m	struct:StructPstarIOLean
EventTimeNSM	DataStructures.h	/^    double    EventTimeNSM; \/\/ Next event timing of NSM.$/;"	m	struct:StructPstar_tag
EventTimeNSM	StructuresForIO.h	/^    double EventTimeNSM;$/;"	m	struct:StructPstarIOCompactDouble
EventTimeNSM	StructuresForIO.h	/^    float EventTimeNSM;$/;"	m	struct:StructPstarIOCompact
EventTimeNSM	StructuresForIO.h	/^    float EventTimeNSM;$/;"	m	struct:StructPstarIOCompactMix
EventTimeNSM	StructuresForIO.h	/^    float EventTimeNSM;$/;"	m	struct:StructPstarIOLean
EventTimeSNII	DataStructures.h	/^    double    EventTimeSNII;    \/\/ Next event time of SNeII$/;"	m	struct:StructPstar_tag
EventTimeSNII	StructuresForIO.h	/^    double EventTimeSNII;$/;"	m	struct:StructPstarIOCompactDouble
EventTimeSNII	StructuresForIO.h	/^    float EventTimeSNII;$/;"	m	struct:StructPstarIOCompact
EventTimeSNII	StructuresForIO.h	/^    float EventTimeSNII;$/;"	m	struct:StructPstarIOCompactMix
EventTimeSNII	StructuresForIO.h	/^    float EventTimeSNII;$/;"	m	struct:StructPstarIOLean
EventTimeSNIa	DataStructures.h	/^    double    EventTimeSNIa;    \/\/ Next event time of SNeIa$/;"	m	struct:StructPstar_tag
EventTimeSNIa	StructuresForIO.h	/^    double EventTimeSNIa;$/;"	m	struct:StructPstarIOCompactDouble
EventTimeSNIa	StructuresForIO.h	/^    float EventTimeSNIa;$/;"	m	struct:StructPstarIOCompact
EventTimeSNIa	StructuresForIO.h	/^    float EventTimeSNIa;$/;"	m	struct:StructPstarIOCompactMix
EventTimeSNIa	StructuresForIO.h	/^    float EventTimeSNIa;$/;"	m	struct:StructPstarIOLean
ExchangeLimit	Decomposition.c	139;"	d	file:
ExchangeParticleNumbersForExport	SizeDetermination.c	/^static inline int ExchangeParticleNumbersForExport(int NExportThisTime[], int NImportThisTime[]){$/;"	f	file:
ExportFlag	DataStructures.h	/^    unsigned int ExportFlag; \/\/ <TMP> <LEAN> if you use NProcs>32, increase this bit field.$/;"	m	struct:StructPhydro_tag
ExportFlagForGatherScatter	CalcEffectiveSurfaceArea.c	/^static bool *ExportFlagForGatherScatter = NULL;$/;"	v	file:
ExportFlagForGatherScatterIndexList	CalcEffectiveSurfaceArea.c	/^static int *ExportFlagForGatherScatterIndexList = NULL;$/;"	v	file:
ExternalPotentialForNFW	SetUpTestRun.c	/^void ExternalPotentialForNFW(const double M200){$/;"	f
ExternalPotentialForNFW	SetUpTestRun.c	/^void ExternalPotentialForNFW(void){$/;"	f
ExternalPotentialForSelfSimilarCooling	SetUpTestRun.c	/^void ExternalPotentialForSelfSimilarCooling(void){$/;"	f
ExtraIteration	HydroKernel.c	/^    int ExtraIteration;$/;"	m	struct:StructActiveHydroParticle	file:
ExtraIteration	SizeDetermination.c	/^    int ExtraIteration;$/;"	m	struct:StructCSActiveHydroParticle	file:
ExtraIterationFlag	HydroKernel.c	/^    bool      ExtraIterationFlag;$/;"	m	struct:StructHydroKernelExport	file:
ExtraIterationFlag	HydroKernel.c	/^    bool      ExtraIterationFlag;$/;"	m	struct:StructHydroKernelImport	file:
ExtraIterationFlag	SizeDetermination.c	/^    bool      ExtraIterationFlag;$/;"	m	struct:StructCSExport	file:
ExtraIterationFlag	SizeDetermination.c	/^    bool      ExtraIterationFlag;$/;"	m	struct:StructCSImport	file:
ExtraIterationFlag	SizeDetermination.c	/^    bool      ExtraIterationFlag;$/;"	m	struct:StructCSImportHydroParticle	file:
ExtraOperationsForHydroInAGNRun	HydroExtraOperations.c	/^static void ExtraOperationsForHydroInAGNRun(void){$/;"	f	file:
F	DataStructures.h	/^    double    F;          \/\/ <LEAN> $/;"	m	struct:StructPhydro_tag
F	HydroMisc.h	/^    double    F;       \/\/ div\/(div+rot).$/;"	m	struct:StructHydroAccExport
F	StructuresForIO.h	/^    double F;$/;"	m	struct:StructPhydroIOCompactDouble
F	StructuresForIO.h	/^    float F;$/;"	m	struct:StructPhydroIOCompact
F	StructuresForIO.h	/^    float F;$/;"	m	struct:StructPhydroIOCompactMix
FALSE	Astro.h	26;"	d
FARULTRAVIOLET_HEATING	reconfig.h	67;"	d
FARULTRAVIOLET_HEATING	reconfig.h	886;"	d
FARULTRAVIOLET_HEATING	reconfig.h	953;"	d
FBDistanceMin	Delayed.c	/^    double FBDistanceMin;$/;"	m	struct:StructDelayedFBImport	file:
FBDistanceMinID	Delayed.c	/^    unsigned long int  FBDistanceMinID;$/;"	m	struct:StructDelayedFBImport	file:
FBNlist	Delayed.c	/^    int    FBNlist;  \/\/ Nlist.$/;"	m	struct:StructDelayedFBImport	file:
FBRadius	Delayed.c	/^    double    FBRadius; \/\/ FBRadius size.$/;"	m	struct:StructDelayedFBExport	file:
FBRho	Delayed.c	/^    double FBRho;    \/\/ Rho.$/;"	m	struct:StructDelayedFBImport	file:
FOF	DataStructures.c	/^struct StructFOF *FOF = NULL;$/;"	v	typeref:struct:StructFOF
FOFCatalog	DataStructures.c	/^struct StructFOFCatalog *FOFCatalog = NULL;$/;"	v	typeref:struct:StructFOFCatalog
FOFCatalogMassCmp	FOF.c	/^static int FOFCatalogMassCmp(const void *x, const void *y){$/;"	f	file:
FOFCatalogSize	DataStructures.c	/^int FOFCatalogSize = 0;$/;"	v
FOFHaloFinder	FOF.c	/^void FOFHaloFinder(void){$/;"	f
FOFHeader	FOF.c	/^} FOFHeader;$/;"	v	typeref:struct:StructFOFHeader
FOFIDSortCmp	FOF.c	/^static int FOFIDSortCmp(const void *x, const void *y){$/;"	f	file:
FOFSize	DataStructures.c	/^int FOFSize = 0;$/;"	v
FUV	Heating.c	/^double FUV(const double Ti, const double Rho, const double G0, const double Metallicity){$/;"	f
FUVChangeOverFunction	FUV.c	/^static double FUVChangeOverFunction(const double r){$/;"	f	file:
FUVConversionFactor	Cooling.c	/^static double FUVConversionFactor; \/\/ [erg\/g\/s = cm^2\/s^3]$/;"	v	file:
FUVLeavesExport	FUV.c	/^static struct StructFUVLeavesExportImport **FUVLeavesExport;$/;"	v	typeref:struct:StructFUVLeavesExportImport	file:
FUVLeavesImport	FUV.c	/^static struct StructFUVLeavesExportImport *FUVLeavesImport;$/;"	v	typeref:struct:StructFUVLeavesExportImport	file:
FUVMakeExportParticleList	FUV.c	/^static int FUVMakeExportParticleList(const int Index){$/;"	f	file:
FUVRmax	FUV.c	/^static double FUVRmax;$/;"	v	file:
FUVRmax2	FUV.c	/^static double FUVRmax2;$/;"	v	file:
FUVRmin	FUV.c	/^static double FUVRmin;$/;"	v	file:
FUVTreeCache	FUV.c	/^} *FUVTreeCache;$/;"	v	typeref:struct:StructFUVTreeCache
FUVTreeNode	FUV.c	/^struct StructYoungStarNode *FUVTreeNode;$/;"	v	typeref:struct:StructYoungStarNode
FUVTreeNodeDataImplant	FUV.c	/^static void FUVTreeNodeDataImplant(const int CurrentNodeID){$/;"	f	file:
FUVTreeNodeSeparationCriterion	FUV.c	/^static inline bool __attribute__((always_inline)) FUVTreeNodeSeparationCriterion(const int CurrentNodeID, const int CriticalNumber){$/;"	f	file:
FUVTreePreprocessing	FUV.c	/^static void FUVTreePreprocessing(const int NumberofLeavesThisStep){$/;"	f	file:
FUVTreeResultCache	FUV.c	/^} *FUVTreeResultCache = NULL;$/;"	v	typeref:struct:StructFUVTreeResultCache
FUVTreeRoot	FUV.c	/^StructYoungStarRoot FUVTreeRoot;$/;"	v
FUVTreeSoftening	FUV.c	/^static double FUVTreeSoftening = 1;$/;"	v	file:
FUVTreeSublist	FUV.c	/^static int *FUVTreeSublist; $/;"	v	file:
FUV_Epsilon	Cooling.c	152;"	d	file:
FUV_Epsilon	Cooling.c	256;"	d	file:
FUV_Epsilon	Cooling.c	290;"	d	file:
FUV_Epsilon	Cooling.c	721;"	d	file:
FUV_Zsolar	Cooling.c	153;"	d	file:
FUV_Zsolar	Cooling.c	257;"	d	file:
FUV_Zsolar	Cooling.c	291;"	d	file:
FUV_Zsolar	Cooling.c	722;"	d	file:
FUVatR	Heating.c	/^double FUVatR(double R){$/;"	f
FVcUnit2	SetUpTestRun.c	/^static double VcUnit,VcUnit2,FVcUnit2;$/;"	v	file:
Factors	MPIParameters.c	/^static int Factors[3] = {0,0,0};$/;"	v	file:
Feedback	DataStructures.h	/^    double Feedback;$/;"	m	struct:StructTimingResults
FeedbackAddEnergyEngine	SNII.c	/^static void FeedbackAddEnergyEngine(double Pos[restrict], const double Kerneli, $/;"	f	file:
FeedbackComm	DataStructures.h	/^    double FeedbackComm;$/;"	m	struct:StructTimingResults
FeedbackCommThisStep	DataStructures.h	/^    double FeedbackCommThisStep;$/;"	m	struct:StructTimingResults
FeedbackNeighborSearch	DataStructures.h	/^    double FeedbackNeighborSearch;$/;"	m	struct:StructTimingResults
FeedbackNeighborSearchThisStep	DataStructures.h	/^    double FeedbackNeighborSearchThisStep;$/;"	m	struct:StructTimingResults
FeedbackThisStep	DataStructures.h	/^    double FeedbackThisStep;$/;"	m	struct:StructTimingResults
FieldEps2	ForceParallelTreeGRAPE.c	/^static double *FieldEps2;$/;"	v	file:
FieldFUVPos	FUV.c	/^static double (*FieldFUVPos)[3]; $/;"	v	file:
FieldLFUV	FUV.c	/^static double *FieldLFUV;$/;"	v	file:
FieldMass	ForceParallelTreeGRAPE.c	/^static double *FieldMass;$/;"	v	file:
FieldPos	ForceParallelTreeGRAPE.c	/^static double (*FieldPos)[3]; $/;"	v	file:
FileIO3DCollapse	SetUpTestRun.c	/^void FileIO3DCollapse(void){$/;"	f
FileIOBlastWave	SetUpTestRun.c	/^void FileIOBlastWave(void){$/;"	f
FileIOSelfSimilar	SetUpTestRun.c	/^void FileIOSelfSimilar(void){$/;"	f
FileOpen	Astro.h	72;"	d
FileOutPutConstantInterval	IO.c	/^void FileOutPutConstantInterval(void){$/;"	f
FileOutputIsothermalSphericalCollapse	SetUpTestRun.c	/^void FileOutputIsothermalSphericalCollapse(void){$/;"	f
FileStarFormationRate	StarFormation.c	/^char FileStarFormationRate[MaxCharactersInLine];$/;"	v
FinalProcedure	SizeDetermination.c	/^static void FinalProcedure(const int NActives, struct StructActiveParticle AP[restrict]){$/;"	f	file:
FinalizeMPIEnv	MPIParameters.c	/^void FinalizeMPIEnv(void){$/;"	f
FindRestartableFilesID	IO.c	/^static void FindRestartableFilesID(char *optarg, char FilePath[]){$/;"	f	file:
FindWordFromString	Utilities.c	/^bool FindWordFromString(char *src, char *word, char *delimiter){$/;"	f
FindXYZEdges	PreDecomposition.c	/^static void FindXYZEdges(const int NElements, struct StructPreDecomposition Data[restrict]){$/;"	f	file:
FirstAllocationSize	config.h	47;"	d
FirstCall	ParticleSplitting.c	/^static bool FirstCall = true;$/;"	v	file:
FirstCall	PlantHydroTree.c	/^static bool FirstCall = true;$/;"	v	file:
FirstCall	PowderSnow.c	/^static bool FirstCall = true;$/;"	v	file:
FirstCall	RandomNumberGenerator.c	/^static bool FirstCall = true;$/;"	v	file:
FirstCallFUVFEEDBACK	FUV.c	/^static bool FirstCallFUVFEEDBACK = true;$/;"	v	file:
FirstCallPlantYoungStarTree	PlantYoungStarTree.c	/^static bool FirstCallPlantYoungStarTree = true;$/;"	v	file:
FirstCall_CalcActiveDomainEdgesForESA	CalcEffectiveSurfaceArea.c	/^static bool FirstCall_CalcActiveDomainEdgesForESA = true;$/;"	v	file:
FirstCall_CalcHydroDomainEdgesForEffSA	CalcEffectiveSurfaceArea.c	/^static bool FirstCall_CalcHydroDomainEdgesForEffSA = true;$/;"	v	file:
FirstCall_CheckEffSAExportFlags	CalcEffectiveSurfaceArea.c	/^static bool FirstCall_CheckEffSAExportFlags = true;$/;"	v	file:
FirstCall_InitializeRootForEffSA	CalcEffectiveSurfaceArea.c	/^static bool FirstCall_InitializeRootForEffSA = true;$/;"	v	file:
FirstSetViscosityParameters	SetUpTestRun.c	/^int FirstSetViscosityParameters = true;$/;"	v
FirstTimeStep	TimeStep.c	/^void FirstTimeStep(void){$/;"	f
FistFlagForLockFile	IO.c	/^static bool FistFlagForLockFile = true;$/;"	v	file:
FitModel	EstimateXFe.c	/^static double FitModel(const int Index, const double FeH){$/;"	f	file:
FittingCoef	EstimateXFe.c	/^struct StructFittingCoef FittingCoef[] = {$/;"	v	typeref:struct:StructFittingCoef
FittingCoefSize	EstimateXFe.c	/^const int FittingCoefSize = 16;$/;"	v
FlagCoolingTable	Cooling.c	/^static int FlagCoolingTable = OFF;$/;"	v	file:
FlushAccVel	TestRuns.c	/^static void FlushAccVel(void){$/;"	f	file:
FnameAMomentum	DataStructures.c	/^char FnameAMomentum[MaxCharactersInLine];$/;"	v
FnameElapsedTime	DataStructures.c	/^char FnameElapsedTime[MaxCharactersInLine];$/;"	v
FnameEnergy	DataStructures.c	/^char FnameEnergy[MaxCharactersInLine];$/;"	v
FnameMomentum	DataStructures.c	/^char FnameMomentum[MaxCharactersInLine];$/;"	v
FnameStepLog	DataStructures.c	/^char FnameStepLog[MaxCharactersInLine];$/;"	v
ForAngelsShare	config.h	45;"	d
ForceCount	ForceMisc.c	66;"	d	file:
ForceDirect	ForceDirect.c	/^void ForceDirect(void){$/;"	f
ForceEndProcedure	ForceMisc.c	/^void ForceEndProcedure(void){$/;"	f
ForceFromExternalPotentials	ForceFromExternalPotentials.c	/^void ForceFromExternalPotentials(void){$/;"	f
ForceGRAPE	ForceGRAPE.c	/^void ForceGRAPE(void){$/;"	f
ForceParallelTreeGRAPE	ForceParallelTreeGRAPE.c	/^void ForceParallelTreeGRAPE(void){$/;"	f
ForceParallelTreeGRAPEInsert	ForceParallelTreeGRAPE.c	/^void ForceParallelTreeGRAPEInsert(const int NImport, double Pos[restrict][3], double Mass[restrict], double Eps[restrict]){$/;"	f
ForcibleSFCondition	StarFormation.c	/^static bool ForcibleSFCondition(const int index){$/;"	f	file:
FormationTime	DataStructures.h	/^    double  FormationTime;  \/\/ $/;"	m	struct:StructPstar_tag
FormationTime	DataStructures.h	/^    double  FormationTime;  \/\/ The formation epoch.$/;"	m	struct:StructPsink_tag
FormationTime	SetUpTestRun.c	/^    double  FormationTime;$/;"	m	struct:StructStars	file:
FormationTime	StructuresForIO.h	/^    double FormationTime;$/;"	m	struct:StructPsinkIOCompactDouble
FormationTime	StructuresForIO.h	/^    double FormationTime;$/;"	m	struct:StructPstarIOCompactDouble
FormationTime	StructuresForIO.h	/^    float FormationTime;$/;"	m	struct:StructPsinkIOCompact
FormationTime	StructuresForIO.h	/^    float FormationTime;$/;"	m	struct:StructPsinkIOCompactMix
FormationTime	StructuresForIO.h	/^    float FormationTime;$/;"	m	struct:StructPsinkIOLean
FormationTime	StructuresForIO.h	/^    float FormationTime;$/;"	m	struct:StructPstarIOCompact
FormationTime	StructuresForIO.h	/^    float FormationTime;$/;"	m	struct:StructPstarIOCompactMix
FormationTime	StructuresForIO.h	/^    float FormationTime;$/;"	m	struct:StructPstarIOLean
FpAMomentum	DataStructures.c	/^FILE *FpAMomentum;$/;"	v
FpElapsedTime	DataStructures.c	/^FILE *FpElapsedTime;$/;"	v
FpEnergy	DataStructures.c	/^FILE *FpEnergy;$/;"	v
FpMomentum	DataStructures.c	/^FILE *FpMomentum;$/;"	v
FpSFR	StarFormation.c	/^FILE *FpSFR;$/;"	v
FpStepLog	DataStructures.c	/^FILE *FpStepLog;$/;"	v
FreeStructPbody	StructureOperation.c	/^void FreeStructPbody(void){$/;"	f
FreeStructPhydro	StructureOperation.c	/^void FreeStructPhydro(void){$/;"	f
FreeStructPsink	StructureOperation.c	/^void FreeStructPsink(void){$/;"	f
FreeStructPstar	StructureOperation.c	/^void FreeStructPstar(void){$/;"	f
FrozenRedshift	DataStructures.h	/^    double FrozenRedshift;   \/\/ Softening length is comovingly evolved until z > FrozenRedsfhit. $/;"	m	struct:StructPall
G0	DataStructures.h	/^    double  G0;$/;"	m	struct:StructPhydro_tag
G0	H2.c	/^static double G0 = 1.0;$/;"	v	file:
G0	StructuresForIO.h	/^    double G0;$/;"	m	struct:StructPhydroIOCompactDouble
G0	StructuresForIO.h	/^    float G0;$/;"	m	struct:StructPhydroIOCompact
G0	StructuresForIO.h	/^    float G0;$/;"	m	struct:StructPhydroIOCompactMix
G0	StructuresForIO.h	/^    float G0;$/;"	m	struct:StructPhydroIOLean
G0	TestRuns.c	/^    double G0;\/\/Metallicity$/;"	m	struct:StructECParams	file:
G0extLocal	DataStructures.h	/^    double G0extLocal;            \/\/ <LEAN>$/;"	m	struct:StructPhydro_tag
G0extLocal	StructuresForIO.h	/^    double G0extLocal;$/;"	m	struct:StructPhydroIOCompactDouble
G0extLocal	StructuresForIO.h	/^    float G0extLocal;$/;"	m	struct:StructPhydroIOCompact
G0extLocal	StructuresForIO.h	/^    float G0extLocal;$/;"	m	struct:StructPhydroIOCompactMix
G0thin	DataStructures.h	/^    double G0thin;                \/\/ <LEAN>$/;"	m	struct:StructPhydro_tag
G0thin	StructuresForIO.h	/^    double G0thin;$/;"	m	struct:StructPhydroIOCompactDouble
G0thin	StructuresForIO.h	/^    float G0thin;$/;"	m	struct:StructPhydroIOCompact
G0thin	StructuresForIO.h	/^    float G0thin;$/;"	m	struct:StructPhydroIOCompactMix
G0thinLocal	DataStructures.h	/^    double G0thinLocal;           \/\/ <LEAN>$/;"	m	struct:StructPhydro_tag
G0thinLocal	StructuresForIO.h	/^    double G0thinLocal;$/;"	m	struct:StructPhydroIOCompactDouble
G0thinLocal	StructuresForIO.h	/^    float G0thinLocal;$/;"	m	struct:StructPhydroIOCompact
G0thinLocal	StructuresForIO.h	/^    float G0thinLocal;$/;"	m	struct:StructPhydroIOCompactMix
G0thinNextUpdateTime	DataStructures.h	/^    double G0thinNextUpdateTime;  \/\/ <TMP> <LEAN>$/;"	m	struct:StructPhydro_tag
GCBSearchNextRadiusCloud	SetUpTestRun.c	/^static double GCBSearchNextRadiusCloud(const double Mass, const double PrevRadius){$/;"	f	file:
GCBSearchNextRadiusHalo	SetUpTestRun.c	/^static double GCBSearchNextRadiusHalo(const double Mass, const double PrevRadius){$/;"	f	file:
GCCloudM	main.c	/^double GCCloudM;$/;"	v
GCCloudN	main.c	/^int GCCloudN;$/;"	v
GCCloudPower	main.c	/^double GCCloudPower;$/;"	v
GCCloudR	main.c	/^double GCCloudR;$/;"	v
GCCloudType	main.c	/^int GCCloudType;$/;"	v
GCDay_end	main.c	/^double GCDay_end;$/;"	v
GCDay_peri	main.c	/^double GCDay_peri;$/;"	v
GCDay_start	main.c	/^double GCDay_start;$/;"	v
GCDrift	main.c	/^static void GCDrift(const double dt, double Pos[], const double Vel[]){$/;"	f	file:
GCEATHALOGAS	main.c	/^double GCEATHALOGAS;$/;"	v
GCEPSBH	main.c	/^double GCEPSBH;$/;"	v
GCEccentricity	main.c	/^double GCEccentricity;$/;"	v
GCHaloEtaHot	main.c	/^double GCHaloEtaHot;$/;"	v
GCHaloN	main.c	/^int GCHaloN;$/;"	v
GCHaloR0	SetUpTestRun.c	/^static double GCHaloR0 = 1.e+16;$/;"	v	file:
GCHaloRho0	SetUpTestRun.c	/^static double GCHaloRho0 = 1.7e-21;$/;"	v	file:
GCHaloRotation	main.c	/^int GCHaloRotation; \/\/ if 1 halo has angular momentum.$/;"	v
GCHaloRotationFactor	main.c	/^double GCHaloRotationFactor; \/\/ if GCHaloRotation == 1, halo rotates with ThisParam X keplar.$/;"	v
GCHaloSpinPhi	main.c	/^double GCHaloSpinPhi;$/;"	v
GCHaloSpinTheta	main.c	/^double GCHaloSpinTheta;$/;"	v
GCHaloSpinVectorChange	main.c	/^int GCHaloSpinVectorChange; \/\/ if 1, change the spin vector's direction.$/;"	v
GCHaloTruncR	main.c	/^double GCHaloTruncR;$/;"	v
GCHaloType	main.c	/^int GCHaloType; \/\/ Type 0 simple hydrostatic$/;"	v
GCInitPosForRemove	SetUpTestRun.c	/^double GCInitPosForRemove[3];$/;"	v
GCKick	main.c	/^static void GCKick(const double dt, double Vel[], const double Acc[]){$/;"	f	file:
GCMBH	main.c	/^double GCMBH;$/;"	v
GCNorbit	main.c	/^int GCNorbit;$/;"	v
GCOutputDir	main.c	/^char GCOutputDir[MaxCharactersInLine];$/;"	v
GCParticleRemoveCondition	SetUpTestRun.c	/^static bool GCParticleRemoveCondition(const int index){$/;"	f	file:
GCR_peri	main.c	/^double GCR_peri;$/;"	v
GCReturnCloudMass	SetUpTestRun.c	/^static double GCReturnCloudMass(double Radius){$/;"	f	file:
GCReturnHaloMass	SetUpTestRun.c	/^static double GCReturnHaloMass(const double R){ \/\/ unit in gram.$/;"	f	file:
GCReturnHaloTemperature	SetUpTestRun.c	/^static double GCReturnHaloTemperature(const double R){ \/\/ unit in Kelvin.$/;"	f	file:
GCSetInitParticleData	SetUpTestRun.c	/^static void GCSetInitParticleData(const double Pos[], const int Index, const int GlobalID, const double eps, const double mgas, const double Uinit, const int Tag){$/;"	f	file:
GCTStep	main.c	/^static int GCTStep = 0;$/;"	v	file:
GCTorbit	main.c	/^double GCTorbit;$/;"	v
GCWriteHaloProfile	SetUpTestRun.c	/^static void GCWriteHaloProfile(const int Number, const int NumberCloud, const int NumberHalo){ \/\/ Write halo profile$/;"	f	file:
GGm1	DataStructures.h	/^    double GGm1;    \/\/ Gamma (Gamma-1)    $/;"	m	struct:StructPall
GID	StellarFeedback.c	/^long int GID;$/;"	v
GIDHydro	StellarFeedback.c	/^long int GIDHydro;$/;"	v
GIGAYEAR_CGS	Constants.h	104;"	d
GM	SetUpTestRun.c	3264;"	d	file:
GMBHUnit	SetUpTestRun.c	/^static double MBHUnit,GMBHUnit,GMSelfUnit;$/;"	v	file:
GMBulgeUnit	SetUpTestRun.c	/^static double GMBulgeUnit,RaHernquistUnit;$/;"	v	file:
GMSelfUnit	SetUpTestRun.c	/^static double MBHUnit,GMBHUnit,GMSelfUnit;$/;"	v	file:
GRAPEScaleError	Errors.h	20;"	d
GRAVITY_CONSTANT	Constants.h	13;"	d
GRAVITY_CONSTANT_CGS	Constants.h	18;"	d
GRAVITY_RUN	reconfig.h	1009;"	d
GRAVITY_RUN	reconfig.h	101;"	d
GRAVITY_RUN	reconfig.h	148;"	d
GRAVITY_RUN	reconfig.h	193;"	d
GRAVITY_RUN	reconfig.h	244;"	d
GRAVITY_RUN	reconfig.h	289;"	d
GRAVITY_RUN	reconfig.h	339;"	d
GRAVITY_RUN	reconfig.h	379;"	d
GRAVITY_RUN	reconfig.h	404;"	d
GRAVITY_RUN	reconfig.h	436;"	d
GRAVITY_RUN	reconfig.h	471;"	d
GRAVITY_RUN	reconfig.h	512;"	d
GRAVITY_RUN	reconfig.h	55;"	d
GRAVITY_RUN	reconfig.h	564;"	d
GRAVITY_RUN	reconfig.h	603;"	d
GRAVITY_RUN	reconfig.h	725;"	d
GRAVITY_RUN	reconfig.h	784;"	d
GRAVITY_RUN	reconfig.h	830;"	d
GRAVITY_RUN	reconfig.h	874;"	d
GRAVITY_RUN	reconfig.h	941;"	d
GSL_RANDOM_GENERATOR_READ_ERROR	Errors.h	40;"	d
GSL_RANDOM_GENERATOR_WRITE_ERROR	Errors.h	39;"	d
GadgetHeader1	ReadGadgetFormat.c	/^} GadgetHeader1;$/;"	v	typeref:struct:Gadget_io_header_1
GadgetP	ReadGadgetFormat.c	/^} *GadgetP;$/;"	v	typeref:struct:Gadget_particle_data
Gadget_allocate_memory	ReadGadgetFormat.c	/^static void Gadget_allocate_memory(void){$/;"	f	file:
Gadget_io_header_1	ReadGadgetFormat.c	/^struct Gadget_io_header_1$/;"	s	file:
Gadget_load_snapshot	ReadGadgetFormat.c	/^static void Gadget_load_snapshot(char *fname, int files){$/;"	f	file:
Gadget_particle_data	ReadGadgetFormat.c	/^struct Gadget_particle_data $/;"	s	file:
Gadget_reordering	ReadGadgetFormat.c	/^static void Gadget_reordering(void){$/;"	f	file:
Gadget_unit_conversion	ReadGadgetFormat.c	/^static void Gadget_unit_conversion(void){$/;"	f	file:
GalactICS_UnitLength	SetUpTestRun.c	9623;"	d	file:
GalactICS_UnitMass	SetUpTestRun.c	9622;"	d	file:
GalactICS_UnitVelocity	SetUpTestRun.c	9624;"	d	file:
Gamma	DataStructures.h	/^    double Gamma;   \/\/ Gamma : Polytropic index.$/;"	m	struct:StructPall
GasFlag	SetUpTestRun.c	/^    bool GasFlag;$/;"	m	struct:StructReadGalactICSBodyFlag	file:
GasMass	Delayed.c	/^    double GasMass;     \/\/ Local gas mass$/;"	m	struct:StructDelayedFBImport	file:
GasMass	Delayed.c	/^    double GasMass;\/\/ Local gas mass.$/;"	m	struct:StructDelayedFBActiveStars	file:
GasMass	Delayed.c	/^    double GasMass;\/\/ Local gas mass.$/;"	m	struct:StructDelayedFBInjection	file:
GasMass	SizeDetermination.c	/^    double    GasMass;$/;"	m	struct:StructCSImport	file:
GasMass	SizeDetermination.c	/^    double    GasMass;$/;"	m	struct:StructCSImportRPParticle	file:
GasMass	SizeDetermination.c	/^    double    GasMass;$/;"	m	struct:StructCSImportSNParticle	file:
GasMass	SizeDetermination.c	/^    double GasMass;     \/\/ Total gas mass$/;"	m	struct:StructCSActiveRPParticle	file:
GasMass	SizeDetermination.c	/^    double GasMass;\/\/ Local gas mass.$/;"	m	struct:StructCSActiveSNParticle	file:
GasMass	SizeDetermination.c	/^    double GasMass;\/\/ Local gas mass.$/;"	m	struct:StructCSRadiationPressureLocalInfo	file:
GasMass	SizeDetermination.c	/^    double GasMass;\/\/ Local gas mass.$/;"	m	struct:StructCSStellarFeedbackLocalInfo	file:
GasMass	StellarFeedback.c	/^    double GasMass;     \/\/ Local gas mass$/;"	m	struct:StructStellarFeedbackImport	file:
GasMass	StellarFeedback.c	/^    double GasMass;\/\/ Local gas mass.$/;"	m	struct:StructEnergyHeavyElements	file:
GasMass	StellarFeedback.c	/^    double GasMass;\/\/ Local gas mass.$/;"	m	struct:StructStellarFeedbackLocalInfo	file:
GasMass	StellarFeedback.h	/^    double GasMass; \/\/ Local gas mass.$/;"	m	struct:StructActiveStellarFeedbackParticle
GasMass	StellarFeedback.h	/^    double GasMass; \/\/ Local gas mass.$/;"	m	struct:StructActiveStellarFeedbackSNParticle
Gaussian	SetUpTestRun.c	/^static double Gaussian(void){$/;"	f	file:
GenChildParticles	ParticleSplitting.c	/^static void GenChildParticles(const int LocalSplittingTarget){$/;"	f	file:
GenerateStructPbody	StructureOperation.c	/^void GenerateStructPbody(const int Nallocate){$/;"	f
GenerateStructPhydro	StructureOperation.c	/^void GenerateStructPhydro(const int Nallocate){$/;"	f
GenerateStructPsink	StructureOperation.c	/^void GenerateStructPsink(const int Nallocate){$/;"	f
GenerateStructPstar	StructureOperation.c	/^void GenerateStructPstar(const int Nallocate){$/;"	f
GetAccPotWithoutTreeWalk	ForceParallelTreeGRAPE.c	/^static void GetAccPotWithoutTreeWalk(const int NImportAll){$/;"	f	file:
GetActiveNeighborsLimited	NeighborSearch.c	/^int GetActiveNeighborsLimited(double Pos[restrict], const double h, int list[restrict]){$/;"	f
GetActiveNeighborsLimitedFromStellarTree	NeighborSearch.c	/^int GetActiveNeighborsLimitedFromStellarTree(double Pos[restrict], const double h, int list[restrict]){$/;"	f
GetArraySizeLifeTime	LifeTime.h	/^int GetArraySizeLifeTime(void){$/;"	f
GetArraySizeLifeTimeZMF	LifeTime.h	/^int GetArraySizeLifeTimeZMF(void){$/;"	f
GetBaseFileName	Utilities.c	/^bool GetBaseFileName(char *src, char *word, char *delimiter, char *BaseFileName){$/;"	f
GetCPUTime	ElapsedTime.c	/^double GetCPUTime(void){$/;"	f
GetDomainKeyXYZ	PreDecomposition.c	/^int GetDomainKeyXYZ(double Pos[3]){$/;"	f
GetDyingStarMassFromAge	IMF.c	/^double GetDyingStarMassFromAge(double Age, const double Metal){$/;"	f
GetDyingStarMassFromAgeWithClip	IMF.c	/^double GetDyingStarMassFromAgeWithClip(const double Age, const double Metal){$/;"	f
GetElapsedTime	ElapsedTime.c	/^double GetElapsedTime(void){$/;"	f
GetElapsedTime_	ElapsedTime.c	/^double GetElapsedTime_(void){$/;"	f
GetFeedbackRadius	Delayed.c	/^static void GetFeedbackRadius(const int NLocalTarget, const int NProcs, bool DelayedFBExportFlags[][NProcs-1]){$/;"	f	file:
GetFieldFromFUVTree	FUV.c	/^static int GetFieldFromFUVTree(const int CurrentNodeID, const int NField){$/;"	f	file:
GetFieldFromLET	ForceParallelTreeGRAPE.c	/^static int GetFieldFromLET(const int CurrentNodeID, const int NField){$/;"	f	file:
GetFieldFromLETForGetAccPotWithoutTreeWalk	ForceParallelTreeGRAPE.c	/^static int GetFieldFromLETForGetAccPotWithoutTreeWalk(double Position[restrict], const double Eps2, const int NField){$/;"	f	file:
GetFieldFromLETForInsert	ForceParallelTreeGRAPE.c	/^static int GetFieldFromLETForInsert(const int CurrentNodeID, const int NField){$/;"	f	file:
GetFieldFromLocalTree	ForceParallelTreeGRAPE.c	/^static int GetFieldFromLocalTree(const int CurrentNodeID){$/;"	f	file:
GetGammaFUV	Cooling.c	/^static inline double __attribute__((always_inline)) GetGammaFUV(const double nH, const double Metallicity, const double Ncol, const double G0thin, const double G0thinLocal, const double G0extLocal){$/;"	f	file:
GetHydroInteractionFlagsOffset	HydroAcc.c	/^static inline int GetHydroInteractionFlagsOffset(const int i, const int NProcs){$/;"	f	file:
GetIndex	EstimateXFe.c	/^static int GetIndex(const char ElementName[], const int mode){$/;"	f	file:
GetLifeTimeFromStellarMass	IMF.c	/^double GetLifeTimeFromStellarMass(const double Mass, const double Metal){$/;"	f
GetLocalNeighrborList	SizeDetermination.c	/^struct StructGetLocalNeighborList GetLocalNeighrborList(const int Index){$/;"	f
GetMeanMolecularWeight	Unit.c	/^double GetMeanMolecularWeight(double MetallicityWeight){$/;"	f
GetMilliseconds	PowderSnow.c	/^static unsigned long GetMilliseconds(void){$/;"	f	file:
GetNearIntegerLower	BoundaryCondition.c	/^static int GetNearIntegerLower(int IntNumber){$/;"	f	file:
GetNearIntegerLower	FUV.c	/^static int GetNearIntegerLower(int IntNumber){$/;"	f	file:
GetNearIntegerUpper	BoundaryCondition.c	/^static int GetNearIntegerUpper(int IntNumber){$/;"	f	file:
GetNearIntegerUpper	FUV.c	/^static int GetNearIntegerUpper(int IntNumber){$/;"	f	file:
GetNeighborNumbers	NeighborSearch.c	/^int GetNeighborNumbers(double Pos[restrict], const double h){$/;"	f
GetNeighbors	NeighborSearch.c	/^int GetNeighbors(double Pos[restrict], const double h, int list[restrict]){$/;"	f
GetNeighborsDirect	NeighborSearch.c	/^int GetNeighborsDirect(double Pos[restrict], const double h, int list[restrict]){$/;"	f
GetNeighborsDirectLimitedImported	NeighborSearch.c	/^int GetNeighborsDirectLimitedImported(double Pos[restrict], const double h, int list[restrict]){$/;"	f
GetNeighborsFUV	FUV.c	/^static int GetNeighborsFUV(double Pos[restrict], const double h, int list[restrict]){$/;"	f	file:
GetNeighborsFromStellarTree	NeighborSearch.c	/^int GetNeighborsFromStellarTree(double Pos[restrict], const double h, int list[restrict]){$/;"	f
GetNeighborsIterativeApproach	NeighborSearch.c	/^int GetNeighborsIterativeApproach(const int StartNodeID, $/;"	f
GetNeighborsIterativeApproachFOF	NeighborSearch.c	/^int GetNeighborsIterativeApproachFOF(const int  StartNodeID, $/;"	f
GetNeighborsIterativeApproachFromStellarTree	NeighborSearch.c	/^int GetNeighborsIterativeApproachFromStellarTree(const int StartNodeID, $/;"	f
GetNeighborsLimited	NeighborSearch.c	/^int GetNeighborsLimited(double Pos[restrict], const double h, int list[restrict]){$/;"	f
GetNeighborsLimitedFromStellarTree	NeighborSearch.c	/^int GetNeighborsLimitedFromStellarTree(double Pos[restrict], const double h, int list[restrict]){$/;"	f
GetNeighborsLimitedImported	NeighborSearch.c	/^int GetNeighborsLimitedImported(double Pos[restrict], const double h, int list[restrict]){$/;"	f
GetNeighborsLimitedNBCacheIndex	NeighborSearch.c	/^int GetNeighborsLimitedNBCacheIndex(double Pos[restrict], const double h, int list[restrict]){$/;"	f
GetNeighborsPairs	NeighborSearch.c	/^int GetNeighborsPairs(double Pos[restrict], const double h, int list[restrict]){$/;"	f
GetNeighborsPairsDirect	NeighborSearch.c	/^int GetNeighborsPairsDirect(double Pos[restrict], const double h, int list[restrict]){$/;"	f
GetNeighborsPairsDirectLimitedImported	NeighborSearch.c	/^int GetNeighborsPairsDirectLimitedImported(double Pos[restrict], const double h, int list[restrict]){$/;"	f
GetNeighborsPairsForESA	CalcEffectiveSurfaceArea.c	/^static int GetNeighborsPairsForESA(double Pos[restrict], const double h, int list[restrict], const int Index){$/;"	f	file:
GetNeighborsPairsForESADirect	CalcEffectiveSurfaceArea.c	/^static int GetNeighborsPairsForESADirect(double Pos[restrict], const double h, int list[restrict], const int Index){$/;"	f	file:
GetNeighborsPairsInteractiveApproach	NeighborSearch.c	/^int GetNeighborsPairsInteractiveApproach(const int StartNodeID, $/;"	f
GetNeighborsPairsLimited	NeighborSearch.c	/^int GetNeighborsPairsLimited(double Pos[restrict], const double h, int list[restrict]){$/;"	f
GetNeighborsPairsLimitedImported	NeighborSearch.c	/^int GetNeighborsPairsLimitedImported(double Pos[restrict], const double h, int list[restrict]){$/;"	f
GetNeighborsPairsLimitedNBCacheIndex	NeighborSearch.c	/^int GetNeighborsPairsLimitedNBCacheIndex(double Pos[restrict], const double h, int list[restrict]){$/;"	f
GetNeighborsSmoothedNumberIterativeApproach	NeighborSearch.c	/^int GetNeighborsSmoothedNumberIterativeApproach(const int StartNodeID, $/;"	f
GetNumberofNeighbors	HIIregion.c	/^static int GetNumberofNeighbors(double Pos[restrict], const double Radius, int Neighbors[restrict]){$/;"	f	file:
GetNumberofNeighbors	HydroKernel.c	/^static int GetNumberofNeighbors(double Pos[restrict], const double Kernel, int Neighbors[restrict]){$/;"	f	file:
GetPej	StellarFeedback.c	/^static inline double __attribute__((always_inline)) GetPej(const double E_in_erg, const double M_in_Msun){$/;"	f	file:
GetPotential	SetUpTestRun.c	/^static void GetPotential(void){$/;"	f	file:
GetPt	StellarFeedback.c	/^static inline double __attribute__((always_inline)) GetPt(const double E_in_erg, const double nH, const double Z){$/;"	f	file:
GetRadiationPressure	RadiationPressure.c	/^double GetRadiationPressure(int index){$/;"	f
GetRadiationPressureMaxTimestep	RadiationPressure.c	/^double GetRadiationPressureMaxTimestep(void){$/;"	f
GetRadiationPressureSourceLifeTime	RadiationPressure.c	/^double GetRadiationPressureSourceLifeTime(void){$/;"	f
GetRcool	StellarFeedback.c	/^static inline double __attribute__((always_inline)) GetRcool(const double E_in_erg, const double nH, const double Z){$/;"	f	file:
GetRunStatus	IO.c	/^void GetRunStatus(const int argc, char **argv){$/;"	f
GetRunStatusForSingleNodeAnalysis	IO.c	/^int GetRunStatusForSingleNodeAnalysis(const int argc, char **argv){$/;"	f
GetSFBigStepFactor	StarFormation.c	/^static inline __attribute__((always_inline)) double GetSFBigStepFactor(const int index){$/;"	f	file:
GetSNIITemperatureBase	StellarFeedback.c	/^static inline double __attribute__((always_inline)) GetSNIITemperatureBase(struct StructActiveStellarFeedbackParticle AP_i){$/;"	f	file:
GetSNeNumber	Delayed.c	/^static int GetSNeNumber(void){$/;"	f	file:
GetSmoothedNumberofNeighbors	HydroKernel.c	/^static int GetSmoothedNumberofNeighbors(double Pos[restrict], const double Kernel, int Neighbors[restrict], double *SmoothedNumber){$/;"	f	file:
GetSmoothedNumberofNeighbors	StellarFeedback.c	/^static int GetSmoothedNumberofNeighbors(double Pos[restrict], const double Kernel, int Neighbors[restrict], double *SmoothedNumber){$/;"	f	file:
GetStellarWindMaxTimestep	StellarWind.c	/^double GetStellarWindMaxTimestep(void){$/;"	f
GetStellarWindSourceLifeTime	StellarWind.c	/^double GetStellarWindSourceLifeTime(void){$/;"	f
GetUnitAu	Unit.c	/^double GetUnitAu(void){$/;"	f
GetUnitConversionFactorInnerEnergyToTemperature	Unit.c	/^double GetUnitConversionFactorInnerEnergyToTemperature(void){$/;"	f
GetUnitConversionFactorTemperatureToInnerEnergy	Unit.c	/^double GetUnitConversionFactorTemperatureToInnerEnergy(void){$/;"	f
GetUnitCoolingRate	Unit.c	/^double GetUnitCoolingRate(void){$/;"	f
GetUnitDensity	Unit.c	/^double GetUnitDensity(void){$/;"	f
GetUnitDensityCGS	Unit.c	/^double GetUnitDensityCGS(void){$/;"	f
GetUnitEnergy	Unit.c	/^double GetUnitEnergy(void){$/;"	f
GetUnitEnergyPerUnitTime	Unit.c	/^double GetUnitEnergyPerUnitTime(void){$/;"	f
GetUnitGravitationalConstant	Unit.c	/^double GetUnitGravitationalConstant(void){$/;"	f
GetUnitHubble	Unit.c	/^double GetUnitHubble(void){$/;"	f
GetUnitInnerEnergy	Unit.c	/^double GetUnitInnerEnergy(void){$/;"	f
GetUnitKpc	Unit.c	/^double GetUnitKpc(void){$/;"	f
GetUnitLightVel	Unit.c	/^double GetUnitLightVel(void){$/;"	f
GetUnitMassSolarMass	Unit.c	/^double GetUnitMassSolarMass(void){$/;"	f
GetUnitMpc	Unit.c	/^double GetUnitMpc(void){$/;"	f
GetUnitNumberDensityCGS	Unit.c	/^double GetUnitNumberDensityCGS(void){$/;"	f
GetUnitSpecificEnergy	Unit.c	/^double GetUnitSpecificEnergy(void){$/;"	f
GetUnitVel	Unit.c	/^double GetUnitVel(void){$/;"	f
GetWeightForIneteractionList	PreDecomposition.c	/^static int __attribute__((always_inline)) GetWeightForIneteractionList(const int index){$/;"	f	file:
GlassCondition	SetUpTestRun.c	/^void GlassCondition(const double RhoTrue){$/;"	f
GlassCondition3DShockTube	SetUpTestRun.c	/^void GlassCondition3DShockTube(void){$/;"	f
GlobalCSEntryNumbers	SizeDetermination.c	/^int GlobalCSEntryNumbers[CS_TypeNumber];$/;"	v
GlobalID	CalcEffectiveSurfaceArea.c	/^    long int GlobalID;$/;"	m	struct:StructEffSAExport	file:
GlobalID	CalcEffectiveSurfaceArea.c	/^    long int GlobalID;$/;"	m	struct:StructNBCacheForEffSA	file:
GlobalID	DataStructures.h	/^    unsigned long int    GlobalID; \/\/ Global, unique ID for each particles.$/;"	m	struct:StructPbody_tag
GlobalID	FOF.c	/^    unsigned long int GlobalID;$/;"	m	struct:StructFOFIDSort	file:
GlobalID	HydroKernel.c	/^     unsigned long int GlobalID;$/;"	m	struct:StructHydroKernelExport	file:
GlobalID	HydroMisc.h	/^     unsigned long int GlobalID;$/;"	m	struct:StructHydroDensityExport
GlobalID	IO.c	/^    long int GlobalID;$/;"	m	struct:StructWrite4D2UBody	file:
GlobalID	SetUpTestRun.c	/^    unsigned long int   GlobalID;$/;"	m	struct:StructDM	file:
GlobalID	SetUpTestRun.c	/^    unsigned long int   GlobalID;$/;"	m	struct:StructGas	file:
GlobalID	SetUpTestRun.c	/^    unsigned long int   GlobalID;$/;"	m	struct:StructStars	file:
GlobalID	SinkParticle.c	/^    unsigned long int GlobalID; \/\/ GlobalID$/;"	m	struct:StructSinkExport	file:
GlobalID	SinkParticle.c	/^    unsigned long int GlobalID;$/;"	m	struct:StructParticleDataForActiveSinkFOF	file:
GlobalID	SizeDetermination.c	/^     unsigned long int GlobalID;$/;"	m	struct:StructCSExport	file:
GlobalID	SizeDetermination.c	/^    unsigned long int GlobalID;$/;"	m	struct:StructCSImport	file:
GlobalID	SizeDetermination.c	/^    unsigned long long int GlobalID;$/;"	m	struct:StructActiveParticle	file:
GlobalID	StellarFeedback.c	/^    int       GlobalID;$/;"	m	struct:StructStellarFeedbackExport	file:
GlobalID	StellarFeedback.c	/^    int GlobalID;$/;"	m	struct:StructEnergyHeavyElements	file:
GlobalID	StructuresForIO.h	/^    unsigned long int GlobalID;$/;"	m	struct:StructPbodyIOCompact
GlobalID	StructuresForIO.h	/^    unsigned long int GlobalID;$/;"	m	struct:StructPbodyIOCompactDouble
GlobalID	StructuresForIO.h	/^    unsigned long int GlobalID;$/;"	m	struct:StructPbodyIOCompactMix
GlobalID	StructuresForIO.h	/^    unsigned long int GlobalID;$/;"	m	struct:StructPbodyIOLean
Gm1	DataStructures.h	/^    double Gm1;     \/\/ Gamma - 1$/;"	m	struct:StructPall
GradN	DataStructures.h	/^    double    GradN;         \/\/ <LEAN> Grad-N term$/;"	m	struct:StructPhydro_tag
GradN	HydroAcc.c	/^    double GradN; $/;"	m	struct:StructHydroAccCorrectEnegyDensityGradh	file:
GradN	HydroMisc.h	/^    double GradN;$/;"	m	struct:StructHydroDensityImport
GradN	StructuresForIO.h	/^    double GradN;$/;"	m	struct:StructPhydroIOCompactDouble
GradN	StructuresForIO.h	/^    float GradN;$/;"	m	struct:StructPhydroIOCompact
GradN	StructuresForIO.h	/^    float GradN;$/;"	m	struct:StructPhydroIOCompactMix
GradRho	DataStructures.h	/^    double GradRho;               \/\/ <LEAN>$/;"	m	struct:StructPhydro_tag
GradRho	HydroMisc.h	/^    double GradRho;$/;"	m	struct:StructHydroDensityImport
GradRho	StructuresForIO.h	/^    double GradRho;$/;"	m	struct:StructPhydroIOCompactDouble
GradRho	StructuresForIO.h	/^    float GradRho;$/;"	m	struct:StructPhydroIOCompact
GradRho	StructuresForIO.h	/^    float GradRho;$/;"	m	struct:StructPhydroIOCompactMix
Gradh	DataStructures.h	/^    double    Gradh; \/\/ <LEAN> Grad-h term$/;"	m	struct:StructPhydro_tag
Gradh	HydroAcc.c	/^    double Gradh; $/;"	m	struct:StructHydroAccCorrectEnegyDensityGradh	file:
Gradh	HydroMisc.h	/^    double    Gradh;   \/\/ Gradh$/;"	m	struct:StructHydroAccExport
Gradh	HydroMisc.h	/^    double    Gradh;   \/\/ Gradh$/;"	m	struct:StructHydroDensityImport
Gradh	StructuresForIO.h	/^    double Gradh;$/;"	m	struct:StructPhydroIOCompactDouble
Gradh	StructuresForIO.h	/^    float Gradh;$/;"	m	struct:StructPhydroIOCompact
Gradh	StructuresForIO.h	/^    float Gradh;$/;"	m	struct:StructPhydroIOCompactMix
GrandParentGlobalID	DataStructures.h	/^    unsigned long int   GrandParentGlobalID; \/\/ Grand Parent Global ID.$/;"	m	struct:StructPsink_tag
GrandParentGlobalID	DataStructures.h	/^    unsigned long int   GrandParentGlobalID; \/\/ Grand Parent Global ID.$/;"	m	struct:StructPstar_tag
GrandParentGlobalID	StructuresForIO.h	/^    unsigned long int GrandParentGlobalID;$/;"	m	struct:StructPsinkIOCompact
GrandParentGlobalID	StructuresForIO.h	/^    unsigned long int GrandParentGlobalID;$/;"	m	struct:StructPsinkIOCompactDouble
GrandParentGlobalID	StructuresForIO.h	/^    unsigned long int GrandParentGlobalID;$/;"	m	struct:StructPsinkIOCompactMix
GrandParentGlobalID	StructuresForIO.h	/^    unsigned long int GrandParentGlobalID;$/;"	m	struct:StructPsinkIOLean
GrandParentGlobalID	StructuresForIO.h	/^    unsigned long int GrandParentGlobalID;$/;"	m	struct:StructPstarIOCompact
GrandParentGlobalID	StructuresForIO.h	/^    unsigned long int GrandParentGlobalID;$/;"	m	struct:StructPstarIOCompactDouble
GrandParentGlobalID	StructuresForIO.h	/^    unsigned long int GrandParentGlobalID;$/;"	m	struct:StructPstarIOCompactMix
GrandParentGlobalID	StructuresForIO.h	/^    unsigned long int GrandParentGlobalID;$/;"	m	struct:StructPstarIOLean
GravConst	DataStructures.h	/^    double GravConst;   \/\/ Gravitational Constant.$/;"	m	struct:StructPall
GravImbarance	DataStructures.h	/^    double GravImbarance;$/;"	m	struct:StructTimingResults
GravImbaranceThisStep	DataStructures.h	/^    double GravImbaranceThisStep;$/;"	m	struct:StructTimingResults
GravitationalForceFromEarth	SetUpTestRun.c	/^void GravitationalForceFromEarth(void){$/;"	f
Gravity	DataStructures.h	/^    double Gravity;$/;"	m	struct:StructTimingResults
GravityAccPotCache	DataStructures.c	/^struct StructGravityAccPotCache *GravityAccPotCache;$/;"	v	typeref:struct:StructGravityAccPotCache
GravityCache	DataStructures.c	/^struct StructGravityCache *GravityCache;$/;"	v	typeref:struct:StructGravityCache
GravityComm	DataStructures.h	/^    double GravityComm;$/;"	m	struct:StructTimingResults
GravityCommThisStep	DataStructures.h	/^    double GravityCommThisStep;$/;"	m	struct:StructTimingResults
GravityKickFlag	DataStructures.h	/^    bool      GravityKickFlag; \/\/ <LEAN> The kick flag of gravitataional acceleration.$/;"	m	struct:StructPhydro_tag
GravityKickFlag	StructuresForIO.h	/^    bool GravityKickFlag;$/;"	m	struct:StructPhydroIOCompact
GravityKickFlag	StructuresForIO.h	/^    bool GravityKickFlag;$/;"	m	struct:StructPhydroIOCompactDouble
GravityKickFlag	StructuresForIO.h	/^    bool GravityKickFlag;$/;"	m	struct:StructPhydroIOCompactMix
GravityNode	DataStructures.c	/^struct StructGravityNode *GravityNode;$/;"	v	typeref:struct:StructGravityNode
GravityNodeDataImplantNew	PlantGravityTree.c	/^static void GravityNodeDataImplantNew(const int CurrentNodeID){$/;"	f	file:
GravityNodeSeparationCriterion	PlantGravityTree.c	/^static inline bool GravityNodeSeparationCriterion(const int CurrentNodeID, const int CriticalNumber){$/;"	f	file:
GravityRoot	DataStructures.c	/^StructGravityRoot GravityRoot;$/;"	v
GravityThisStep	DataStructures.h	/^    double GravityThisStep;$/;"	m	struct:StructTimingResults
GravityTree	DataStructures.h	/^    double GravityTree;$/;"	m	struct:StructTimingResults
GravityTreePreprocessing	PlantGravityTree.c	/^static void GravityTreePreprocessing(void){$/;"	f	file:
GravityTreeThisStep	DataStructures.h	/^    double GravityTreeThisStep;$/;"	m	struct:StructTimingResults
H0	SetUpTestRun.c	/^    float H0;$/;"	m	struct:StructHeader	file:
HAVE_GRAPE_EMULATION	GRAPEManager.c	6;"	d	file:
HAVE_GRAPE_EMULATOR	ForceGRAPE.c	12;"	d	file:
HAVE_GRAPE_EMULATOR	ForceParallelTreeGRAPE.c	14;"	d	file:
HBAR_ALPHA_C	Constants.h	53;"	d
HBAR_ALPHA_C_CGS	Constants.h	65;"	d
HBAR_C	Constants.h	54;"	d
HBAR_C_CGS	Constants.h	66;"	d
HD_CompactDoubleFormatFlag	config.h	/^    HD_CompactDoubleFormatFlag,$/;"	e	enum:__anon13
HD_CompactFormatFlag	config.h	/^    HD_CompactFormatFlag,$/;"	e	enum:__anon13
HD_CompactMixFormatFlag	config.h	/^    HD_CompactMixFormatFlag,$/;"	e	enum:__anon13
HD_LeanFormatFlag	config.h	/^    HD_LeanFormatFlag,$/;"	e	enum:__anon13
HD_SizeofHeader	config.h	/^    HD_SizeofHeader,$/;"	e	enum:__anon13
HD_SizeofInt	config.h	/^    HD_SizeofInt,$/;"	e	enum:__anon13
HII	SizeDetermination.c	/^        struct StructCSActiveHIIParticle   HII; $/;"	m	union:StructActiveParticle::__anon7	typeref:struct:StructActiveParticle::__anon7::StructCSActiveHIIParticle	file:
HII	SizeDetermination.c	/^        struct StructCSImportHIIParticle   HII; $/;"	m	union:StructCSImport::__anon6	typeref:struct:StructCSImport::__anon6::StructCSImportHIIParticle	file:
HIIFlag	TestRuns.c	/^bool *HIIFlag; $/;"	v
HIILocalDomainEdge	HIIregion.c	/^} HIILocalDomainEdge;$/;"	v	typeref:struct:StructHIILocalDomainEdge	file:
HIIRegion	HIIregion.c	/^    bool HIIRegion;$/;"	m	struct:StructActiveHIIParticle	file:
HIIRegion	SizeDetermination.c	/^    bool HIIRegion;$/;"	m	struct:StructCSActiveHIIParticle	file:
HIIfirst	HIIregion.c	/^static bool HIIfirst = true;$/;"	v	file:
HIIflag	DataStructures.h	/^    bool    HIIflag;        \/\/ <TMP> <LEAN>$/;"	m	struct:StructPstar_tag
HIIregionEntry	SizeDetermination.c	/^static int HIIregionEntry(struct StructActiveParticle AP[], bool CalcSizeExportFlags[], const int NProcs){$/;"	f	file:
HIIregions	HIIregion.c	/^void HIIregions(void){$/;"	f
HUBBLE_CGS	Constants.h	105;"	d
Head	DataStructures.h	/^    int Head;$/;"	m	struct:StructFOF
Head	DataStructures.h	/^    int Head;$/;"	m	struct:StructFOFCatalog
Head	SinkParticle.c	/^    int Head;$/;"	m	struct:StructSinkFOF	file:
Head	SinkParticle.c	/^    int Head;$/;"	m	struct:StructSinkFOFCatalog	file:
Header	SetUpTestRun.c	/^} Header;$/;"	v	typeref:struct:StructHeader
HeaderError	Errors.h	9;"	d
HeliumAbandance	config.h	138;"	d
HeliumWeight	DataStructures.h	/^    double HeliumWeight;$/;"	m	struct:StructPall
HoldFlag	GRAPEManager.c	/^static bool HoldFlag = OFF;$/;"	v	file:
HoldGRAPE	GRAPEManager.c	/^void HoldGRAPE(void){$/;"	f
HoldTime	GRAPEManager.c	/^static double HoldTime;$/;"	v	file:
Hubble	DataStructures.h	/^    double Hubble;      \/\/ The Hubble paramter at z=0. hubble x 100 kms\/s\/Mpc(in simulation unit)$/;"	m	struct:StructPall
Hubble	FOF.c	/^    double Hubble;      \/\/ The Hubble paramter at z=0. hubble x 100 kms\/s\/Mpc(in simulation unit)$/;"	m	struct:StructFOFHeader	file:
HubbleParam	ReadGadgetFormat.c	/^  double   HubbleParam; $/;"	m	struct:Gadget_io_header_1	file:
HubbleZ	DataStructures.h	/^    double HubbleZ;      \/\/ The Hubble paramter at the given redshift.$/;"	m	struct:StructPall
Hybrid	PreDecomposition.c	7;"	d	file:
Hydro	DataStructures.h	/^    double Hydro;$/;"	m	struct:StructTimingResults
Hydro	SizeDetermination.c	/^        struct StructCSActiveHydroParticle Hydro; $/;"	m	union:StructActiveParticle::__anon7	typeref:struct:StructActiveParticle::__anon7::StructCSActiveHydroParticle	file:
Hydro	SizeDetermination.c	/^        struct StructCSImportHydroParticle Hydro; $/;"	m	union:StructCSImport::__anon6	typeref:struct:StructCSImport::__anon6::StructCSImportHydroParticle	file:
HydroAcc	DataStructures.h	/^    double    HydroAcc[3];$/;"	m	struct:StructPhydro_tag
HydroAcc	DataStructures.h	/^    double HydroAcc;$/;"	m	struct:StructTimingResults
HydroAcc	HydroMisc.h	/^    double    HydroAcc[3];  \/\/ dp\/dr.$/;"	m	struct:StructHydroAccImport
HydroAcc	StructuresForIO.h	/^    double HydroAcc[3];$/;"	m	struct:StructPhydroIOCompactDouble
HydroAcc	StructuresForIO.h	/^    float HydroAcc[3];$/;"	m	struct:StructPhydroIOCompact
HydroAcc	StructuresForIO.h	/^    float HydroAcc[3];$/;"	m	struct:StructPhydroIOCompactMix
HydroAcc	StructuresForIO.h	/^    float HydroAcc[3];$/;"	m	struct:StructPhydroIOLean
HydroAccComm	DataStructures.h	/^    double HydroAccComm;$/;"	m	struct:StructTimingResults
HydroAccCommThisStep	DataStructures.h	/^    double HydroAccCommThisStep;$/;"	m	struct:StructTimingResults
HydroAccExportFlagsLog	HydroAcc.c	/^static bool *HydroAccExportFlagsLog; $/;"	v	file:
HydroAccExportRecvLog	HydroAcc.c	/^static struct StructHydroAccExport (*HydroAccExportRecvLog);$/;"	v	typeref:struct:StructHydroAccExport	file:
HydroAccNeighborSearch	DataStructures.h	/^    double HydroAccNeighborSearch;$/;"	m	struct:StructTimingResults
HydroAccNeighborSearchThisStep	DataStructures.h	/^    double HydroAccNeighborSearchThisStep;$/;"	m	struct:StructTimingResults
HydroAccThisStep	DataStructures.h	/^    double HydroAccThisStep;$/;"	m	struct:StructTimingResults
HydroAlpha	DataStructures.h	/^    double HydroAlpha;   \/\/ Artificial Viscosty parameter, alpha $/;"	m	struct:StructPall
HydroBeta	DataStructures.h	/^    double HydroBeta;    \/\/ Artificial Viscosty parameter, beta $/;"	m	struct:StructPall
HydroComm	DataStructures.h	/^    double HydroComm;$/;"	m	struct:StructTimingResults
HydroCommThisStep	DataStructures.h	/^    double HydroCommThisStep;$/;"	m	struct:StructTimingResults
HydroDensity	DataStructures.h	/^    double HydroDensity;$/;"	m	struct:StructTimingResults
HydroDensityComm	DataStructures.h	/^    double HydroDensityComm;$/;"	m	struct:StructTimingResults
HydroDensityCommThisStep	DataStructures.h	/^    double HydroDensityCommThisStep;$/;"	m	struct:StructTimingResults
HydroDensityEndProcessing	HydroDensity.c	/^static void HydroDensityEndProcessing(const int NActives, const int ActiveIndexList[restrict]){ $/;"	f	file:
HydroDensityNeighborSearch	DataStructures.h	/^    double HydroDensityNeighborSearch;$/;"	m	struct:StructTimingResults
HydroDensityNeighborSearchThisStep	DataStructures.h	/^    double HydroDensityNeighborSearchThisStep;$/;"	m	struct:StructTimingResults
HydroDensityThisStep	DataStructures.h	/^    double HydroDensityThisStep;$/;"	m	struct:StructTimingResults
HydroEntry	SizeDetermination.c	/^static int HydroEntry(struct StructActiveParticle AP[], bool CalcSizeExportFlags[], const int NProcs){$/;"	f	file:
HydroEta2	DataStructures.h	/^    double HydroEta2;    \/\/ Artificial Viscosty parameter, eta^2$/;"	m	struct:StructPall
HydroImbarance	DataStructures.h	/^    double HydroImbarance;$/;"	m	struct:StructTimingResults
HydroImbaranceThisStep	DataStructures.h	/^    double HydroImbaranceThisStep;$/;"	m	struct:StructTimingResults
HydroKernel	DataStructures.h	/^    double HydroKernel;$/;"	m	struct:StructTimingResults
HydroKernelComm	DataStructures.h	/^    double HydroKernelComm;$/;"	m	struct:StructTimingResults
HydroKernelCommThisStep	DataStructures.h	/^    double HydroKernelCommThisStep;$/;"	m	struct:StructTimingResults
HydroKernelNeighborSearch	DataStructures.h	/^    double HydroKernelNeighborSearch;$/;"	m	struct:StructTimingResults
HydroKernelNeighborSearchThisStep	DataStructures.h	/^    double HydroKernelNeighborSearchThisStep;$/;"	m	struct:StructTimingResults
HydroKernelThisStep	DataStructures.h	/^    double HydroKernelThisStep;$/;"	m	struct:StructTimingResults
HydroMyID	MPIParameters.c	/^static int HydroNumProcs,HydroMyID;$/;"	v	file:
HydroNeighborSearch	DataStructures.h	/^    double HydroNeighborSearch;$/;"	m	struct:StructTimingResults
HydroNeighborSearchThisStep	DataStructures.h	/^    double HydroNeighborSearchThisStep;$/;"	m	struct:StructTimingResults
HydroNode	DataStructures.c	/^struct StructHydroNode *HydroNode;$/;"	v	typeref:struct:StructHydroNode
HydroNodeDataImplantForEffSA	CalcEffectiveSurfaceArea.c	/^static void HydroNodeDataImplantForEffSA(const int CurrentNodeID){$/;"	f	file:
HydroNodeDataImplantImportedNew	PlantHydroTreeImported.c	/^static void HydroNodeDataImplantImportedNew(const int CurrentNodeID){$/;"	f	file:
HydroNodeDataImplantNew	PlantHydroTree.c	/^static void HydroNodeDataImplantNew(const int CurrentNodeID){$/;"	f	file:
HydroNodeForEffSA	CalcEffectiveSurfaceArea.c	/^struct StructHydroNode *HydroNodeForEffSA = NULL;$/;"	v	typeref:struct:StructHydroNode
HydroNodeImported	DataStructures.c	/^struct StructHydroNode *HydroNodeImported;$/;"	v	typeref:struct:StructHydroNode
HydroNodeSeparationCriterion	PlantHydroTree.c	/^static inline bool HydroNodeSeparationCriterion(const int CurrentNodeID, const int CriticalNumber){$/;"	f	file:
HydroNodeSeparationCriterionForEffSA	CalcEffectiveSurfaceArea.c	/^static inline bool __attribute__((always_inline)) HydroNodeSeparationCriterionForEffSA(const int CurrentNodeID, const int CriticalNumber){$/;"	f	file:
HydroNodeSeparationCriterionImported	PlantHydroTreeImported.c	/^static inline bool HydroNodeSeparationCriterionImported(const int CurrentNodeID, const int CriticalNumber){$/;"	f	file:
HydroNumProcs	MPIParameters.c	/^static int HydroNumProcs,HydroMyID;$/;"	v	file:
HydroRecvRank	DataStructures.h	/^    int HydroRecvRank;$/;"	m	struct:StructCommunicationTable
HydroRoot	DataStructures.c	/^StructHydroRoot HydroRoot;$/;"	v
HydroRootForEffSA	CalcEffectiveSurfaceArea.c	/^StructHydroRoot HydroRootForEffSA;$/;"	v
HydroRootImported	DataStructures.c	/^StructHydroRoot HydroRootImported;$/;"	v
HydroSendRank	DataStructures.h	/^    int HydroSendRank;$/;"	m	struct:StructCommunicationTable
HydroThisStep	DataStructures.h	/^    double HydroThisStep;$/;"	m	struct:StructTimingResults
HydroTimeStepLimiterFlag	DataStructures.h	/^    bool      HydroTimeStepLimiterFlag; \/\/ <TMP> <LEAN>$/;"	m	struct:StructPhydro_tag
HydroTree	DataStructures.h	/^    double HydroTree;$/;"	m	struct:StructTimingResults
HydroTreePreprocessing	PlantHydroTree.c	/^static void HydroTreePreprocessing(void){$/;"	f	file:
HydroTreePreprocessingForEffSA	CalcEffectiveSurfaceArea.c	/^static void HydroTreePreprocessingForEffSA(const int NumberofLeaves, struct StructEffSAExport EffSAExportRecv[restrict]){$/;"	f	file:
HydroTreePreprocessingImported	PlantHydroTreeImported.c	/^static void HydroTreePreprocessingImported(const int NumberofLeaves, struct StructHydroAccExport HydroAccExportRecv[restrict]){$/;"	f	file:
HydroTreeThisStep	DataStructures.h	/^    double HydroTreeThisStep;$/;"	m	struct:StructTimingResults
HydroUpdateFlag	StellarFeedback.c	/^static bool *HydroUpdateFlag = NULL;$/;"	v	file:
HydroUpdateFlagSize	StellarFeedback.c	/^static int HydroUpdateFlagSize = 0;$/;"	v	file:
HydroViscNormal	config.h	140;"	d
HydroViscVelSig	config.h	141;"	d
ID	SetUpTestRun.c	/^    long int ID;$/;"	m	struct:StructIOKeisoku	file:
IMFLongestLifeTime	IMF.c	/^double IMFLongestLifeTime(void){$/;"	f
IMFNormalizedConstant	IMF.c	/^static double IMFNormalizedConstant;$/;"	v	file:
IMFSNIIEjectaMassPerMass	IMF.c	/^double IMFSNIIEjectaMassPerMass(void){$/;"	f
IMFSNIIEjectaMassPerMassLimitedRange	IMF.c	/^double IMFSNIIEjectaMassPerMassLimitedRange(const double MassMax, const double MassMin){$/;"	f
IMFSNIIEjectaMassPerMassLimitedTimeRange	IMF.c	/^double IMFSNIIEjectaMassPerMassLimitedTimeRange(const double TimeMax, const double TimeMin, const double Metallicity){$/;"	f
IMFSNIINumberEjectaYieldPerMassLimitedRange	IMF.c	/^void IMFSNIINumberEjectaYieldPerMassLimitedRange(double MassMax, double MassMin,$/;"	f
IMFSNIINumberPerMass	IMF.c	/^double IMFSNIINumberPerMass(void){$/;"	f
IMFSNIINumberPerMassLimitedRange	IMF.c	/^double IMFSNIINumberPerMassLimitedRange(const double MassMax, const double MassMin){$/;"	f
IMFSNIINumberPerMassLimitedTimeRange	IMF.c	/^double IMFSNIINumberPerMassLimitedTimeRange(const double TimeMax, const double TimeMin, const double Metallicity){$/;"	f
IMFSNIIYieldMassPerMass	IMF.c	/^double IMFSNIIYieldMassPerMass(void){ \/\/ Steinmetz Muller $/;"	f
IMFSNIIYieldMassPerMassLimitedRange	IMF.c	/^double IMFSNIIYieldMassPerMassLimitedRange(const double MassMax, const double MassMin){$/;"	f
IMFShortestLifeTime	IMF.c	/^double IMFShortestLifeTime(void){$/;"	f
IMFTYPE	DataStructures.h	/^    short   IMFTYPE;$/;"	m	struct:StructPstar_tag
IMFTYPE	SetUpTestRun.c	/^    short   IMFTYPE;$/;"	m	struct:StructStars	file:
IMFTYPE	StructuresForIO.h	/^    short IMFTYPE;$/;"	m	struct:StructPstarIOCompact
IMFTYPE	StructuresForIO.h	/^    short IMFTYPE;$/;"	m	struct:StructPstarIOCompactDouble
IMFTYPE	StructuresForIO.h	/^    short IMFTYPE;$/;"	m	struct:StructPstarIOCompactMix
IMFTYPE	StructuresForIO.h	/^    short IMFTYPE;$/;"	m	struct:StructPstarIOLean
IMFTYPE_SP	config.h	152;"	d
IMF_PARAM_H_INCLUDED	IMFParameters.h	2;"	d
IMFdSNIINumberPerMass	IMF.c	/^double IMFdSNIINumberPerMass(const double Mass){$/;"	f
IPI	Astro.h	33;"	d
ISC	SetUpTestRun.c	/^} *ISC;$/;"	v	typeref:struct:StructISC
ISCCmp	SetUpTestRun.c	/^static int ISCCmp(const void *x, const void *y){$/;"	f	file:
IT	main.c	6138;"	d	file:
Id	ReadGadgetFormat.c	/^int *Id;$/;"	v
ImfPower	IMFParameters.h	4;"	d
ImportHydroForEffSA	CalcEffectiveSurfaceArea.c	/^static int ImportHydroForEffSA(const int NExplosion, struct StructActiveStellarFeedbackParticle *ActiveStellarFeedbackParticle){ $/;"	f	file:
ImposeBoundaryCondition	BoundaryCondition.c	/^void ImposeBoundaryCondition(const int mode){$/;"	f
IncrementElements	StellarFeedback.c	/^static inline void __attribute__((always_inline)) IncrementElements(double DestElements[restrict], double SrcElements[restrict], const double Weight){$/;"	f	file:
Index	CalcEffectiveSurfaceArea.c	/^    int    Index;$/;"	m	struct:StructEffSAInput	file:
Index	Delayed.c	/^    int       Index;    \/\/ Index.$/;"	m	struct:StructDelayedFBExport	file:
Index	Delayed.c	/^    int    Index;    \/\/ Index.$/;"	m	struct:StructDelayedFBImport	file:
Index	Delayed.c	/^    int Index;$/;"	m	struct:StructDelayedFBActiveStars	file:
Index	HIIregion.c	/^    int Index;$/;"	m	struct:StructActiveHIIParticle	file:
Index	HydroKernel.c	/^    int Index; \/\/ NBCache[Index].$/;"	m	struct:StructActiveHydroParticle	file:
Index	SinkParticle.c	/^    int     Index;   \/\/ Index of the sink particle.$/;"	m	struct:StructSinkExport	file:
Index	SinkParticle.c	/^    int Index; \/\/ ActiveIndex.$/;"	m	struct:StructSinkPosSizeExport	file:
Index	SizeDetermination.c	/^    int Index; \/\/ NBCache[Index].$/;"	m	struct:StructActiveParticle	file:
Index	SizeDetermination.c	/^    int Index;$/;"	m	struct:StructSortNeighborList	file:
Index	StellarFeedback.h	/^    int Index; \/\/ $/;"	m	struct:StructActiveStellarFeedbackParticle
InfoBiSection	DataStructures.c	/^struct StructInfoBiSection *InfoBiSection;$/;"	v	typeref:struct:StructInfoBiSection
InfoDecomposition	PreDecomposition.c	/^} InfoDecomposition;$/;"	v	typeref:struct:StructDecomposition
Init1DThermalConductivity	SetUpTestRun.c	/^void Init1DThermalConductivity(const int Number, const double T_JUMP){$/;"	f
Init1DTwoFluids	SetUpTestRun.c	/^void Init1DTwoFluids(const int Number){$/;"	f
Init3DCollapseTest	SetUpTestRun.c	/^void Init3DCollapseTest(const int number){$/;"	f
Init3DShockTube	SetUpTestRun.c	/^void Init3DShockTube(const int number){$/;"	f
Init3DShockTubeGrid	SetUpTestRun.c	/^void Init3DShockTubeGrid(const int number){$/;"	f
Init3DThermalConductivity	SetUpTestRun.c	/^void Init3DThermalConductivity(const int Number, const int mode, const double T_JUMP){$/;"	f
InitAGNTorus	SetUpTestRun.c	/^void InitAGNTorus(const int Number, const int DistortionFlag){$/;"	f
InitBlastWave	SetUpTestRun.c	/^void InitBlastWave(const int number){$/;"	f
InitBlastWaveRandom	SetUpTestRun.c	/^void InitBlastWaveRandom(const int number){$/;"	f
InitBreakingDam	SetUpTestRun.c	/^void InitBreakingDam(const int MultiplicationConstant){$/;"	f
InitCloudExplosion	SetUpTestRun.c	/^void InitCloudExplosion(const int number){$/;"	f
InitColdCollapseTest	SetUpTestRun.c	/^void InitColdCollapseTest(const int Number, const double rv, const int MakePotential){$/;"	f
InitColdCollapseTestMixed	SetUpTestRun.c	/^void InitColdCollapseTestMixed(const int Number, const double rv, const double fraction, const int MakePotential){$/;"	f
InitCopyHydroPredictors	Run.c	/^void InitCopyHydroPredictors(void){$/;"	f
InitDomainDecomposition	TestRuns.c	/^static void InitDomainDecomposition(const int TotalNumber, const int Dimension){$/;"	f	file:
InitElliptical	main.c	/^void InitElliptical(void){$/;"	f
InitElliptical2Particles	main.c	/^void InitElliptical2Particles(void){$/;"	f
InitEllipticalMany	main.c	/^void InitEllipticalMany(const int Number){$/;"	f
InitExtraOperationsForHydroInAGNRun	HydroExtraOperations.c	/^static void InitExtraOperationsForHydroInAGNRun(void){$/;"	f	file:
InitFUV	FUV.c	/^void InitFUV(void){$/;"	f
InitGCCloud	SetUpTestRun.c	/^void InitGCCloud(double InitPos[], double InitVel[]){$/;"	f
InitHydroStatic	SetUpTestRun.c	/^void InitHydroStatic(const int NGrid, const int FlagEqualMass, const double DensityRatio){$/;"	f
InitHydroTreeRobustTest	TestRuns.c	/^static void InitHydroTreeRobustTest(const int number, const int power){$/;"	f	file:
InitIsothermalSphericalCollapseTest	SetUpTestRun.c	/^void InitIsothermalSphericalCollapseTest(const int number){$/;"	f
InitKH	SetUpTestRun.c	/^void InitKH(const int NGrid, const int mode, const int seed, $/;"	f
InitKepler	SetUpTestRun.c	/^void InitKepler(const int Number){$/;"	f
InitLogFiles	Logs.c	/^void InitLogFiles(void){$/;"	f
InitM2SphericalCollapseTest	SetUpTestRun.c	/^void InitM2SphericalCollapseTest(const int number){$/;"	f
InitParticles	main.c	/^static void InitParticles(double Eta_start, double Pos[], $/;"	f	file:
InitRadiationPressure	RadiationPressure.c	/^void InitRadiationPressure(void){$/;"	f
InitRandomBoxTest	SetUpTestRun.c	/^void InitRandomBoxTest(const int number){$/;"	f
InitRandomBoxTestHydro	SetUpTestRun.c	/^void InitRandomBoxTestHydro(const int number){$/;"	f
InitRandomSphereTest	SetUpTestRun.c	/^void InitRandomSphereTest(const int number){$/;"	f
InitReinickemeyerTerVehn	TestRuns.c	/^static void InitReinickemeyerTerVehn(const int Ngrid){$/;"	f	file:
InitRotatingDiskWithSink	SetUpTestRun.c	/^void InitRotatingDiskWithSink(const int Number){$/;"	f
InitSelfSimilarCooling	SetUpTestRun.c	/^void InitSelfSimilarCooling(const int number){$/;"	f
InitShockTube	SetUpTestRun.c	/^void InitShockTube(const int Number){$/;"	f
InitShockTube123Problem	SetUpTestRun.c	/^void InitShockTube123Problem(const int Number){$/;"	f
InitShockTubeHK	SetUpTestRun.c	/^void InitShockTubeHK(const int Number){$/;"	f
InitSinkParticles	SinkParticle.c	/^static void InitSinkParticles(void){$/;"	f	file:
InitSinkParticlesFlag	SinkParticle.c	/^static bool InitSinkParticlesFlag = false;$/;"	v	file:
InitSinusoidalWave	SetUpTestRun.c	/^void InitSinusoidalWave(void){$/;"	f
InitSodShockTube	SetUpTestRun.c	/^void InitSodShockTube(const int Number){$/;"	f
InitSphereWithMeanParticleDistance	SetUpTestRun.c	/^void InitSphereWithMeanParticleDistance(const int Number){$/;"	f
InitSphericalParticleDistributionForErrorEstimation	SetUpTestRun.c	/^void InitSphericalParticleDistributionForErrorEstimation(const int Number, const double fraction, const double Radius){$/;"	f
InitSphericalParticleDistributionWithTwoTypes	SetUpTestRun.c	/^void InitSphericalParticleDistributionWithTwoTypes(const int Number, const double fraction, const double Radius, const double Distance){$/;"	f
InitStandardIsothermalTestCase	SetUpTestRun.c	/^void InitStandardIsothermalTestCase(const int number){$/;"	f
InitStellarWind	StellarWind.c	/^void InitStellarWind(void){$/;"	f
InitTestExactCooling	TestRuns.c	/^static void InitTestExactCooling(void){$/;"	f	file:
InitTestFUVFeedback	TestRuns.c	/^static void InitTestFUVFeedback(const int Ngas, const int Nstar, const double Radius_kpc, const double Mass_Msun, const double Z, const double AgeMax_year, const double dt){$/;"	f	file:
InitTestGravityTree	TestRuns.c	/^static void InitTestGravityTree(const int number, const double Power){$/;"	f	file:
InitTestHydroQuantities	TestRuns.c	/^static void InitTestHydroQuantities(const int number, const int mode){$/;"	f	file:
InitTestHydroQuantitiesRand	TestRuns.c	/^static void InitTestHydroQuantitiesRand(const int number){$/;"	f	file:
InitTestHydroTree	TestRuns.c	/^static void InitTestHydroTree(const int number){$/;"	f	file:
InitTestNeighborSearch	TestRuns.c	/^static void InitTestNeighborSearch(const int number){$/;"	f	file:
InitTestParticleSplitting	TestRuns.c	/^static void InitTestParticleSplitting(void){$/;"	f	file:
InitTestRadiationPressure	TestRuns.c	/^void InitTestRadiationPressure(const double nH, const double Radius, const int Nhydro, const int Nstars, double Pos[restrict][3]){$/;"	f
InitTestStromgrenSphere	SetUpTestRun.c	/^void InitTestStromgrenSphere(const double nH, const double Radius, const int Nhydro, const int Nstars, double Pos[restrict][3], double LyAlpha[restrict]){$/;"	f
InitThermalConductivity	ThermalConductivity.c	/^void InitThermalConductivity(void){$/;"	f
InitTreeTest	SetUpTestRun.c	/^void InitTreeTest(const int Number){$/;"	f
InitTurbulentCloud	SetUpTestRun.c	/^void InitTurbulentCloud(char fname[], const int mode, const double LeftMetal, const double RightMetal){$/;"	f
InitUniformBoxTest	SetUpTestRun.c	/^void InitUniformBoxTest(const int number){$/;"	f
InitUniformSphereTest	SetUpTestRun.c	/^void InitUniformSphereTest(const int number){$/;"	f
InitWrite4D2U	IO.c	/^void InitWrite4D2U(void){$/;"	f
InitialMass	DataStructures.h	/^    double  InitialMass;    \/\/ <MIX> <LEAN> Initial Mass $/;"	m	struct:StructPstar_tag
InitialMass	SetUpTestRun.c	/^    double  InitialMass;    \/\/ Initial Mass $/;"	m	struct:StructStars	file:
InitialMass	SizeDetermination.c	/^    double InitialMass;$/;"	m	struct:StructCSActiveSNParticle	file:
InitialMass	SizeDetermination.c	/^    double InitialMass;$/;"	m	struct:StructCSActiveSWParticle	file:
InitialMass	StellarFeedback.h	/^    double InitialMass;$/;"	m	struct:StructActiveStellarFeedbackParticle
InitialMass	StellarFeedback.h	/^    double InitialMass;$/;"	m	struct:StructActiveStellarFeedbackSNParticle
InitialMass	StructuresForIO.h	/^    double InitialMass;$/;"	m	struct:StructPstarIOCompactDouble
InitialMass	StructuresForIO.h	/^    double InitialMass;$/;"	m	struct:StructPstarIOCompactMix
InitialMass	StructuresForIO.h	/^    float InitialMass;$/;"	m	struct:StructPstarIOCompact
InitialRedshift	DataStructures.h	/^    double InitialRedshift;  \/\/ The initial redshift of the simulation.$/;"	m	struct:StructPall
InitialSkipCoolingRoutine	Cooling.c	/^static double InitialSkipCoolingRoutine;$/;"	v	file:
InitialTemperature	TestRuns.c	/^    double InitialTemperature; \/\/ Temperature [K]$/;"	m	struct:StructECParams	file:
InitializeAGNTorusExternalPotentials	SetUpTestRun.c	/^void InitializeAGNTorusExternalPotentials(void){$/;"	f
InitializeActiveBaryonCommunicationOrder	CommunicationTable.c	/^void InitializeActiveBaryonCommunicationOrder(void){$/;"	f
InitializeActiveHydroCommunicationOrder	CommunicationTable.c	/^void InitializeActiveHydroCommunicationOrder(void){$/;"	f
InitializeAllActiveParticleNumbers	SetUpTestRun.c	/^static void InitializeAllActiveParticleNumbers(void){$/;"	f	file:
InitializeBaryonCommunicationOrder	CommunicationTable.c	/^void InitializeBaryonCommunicationOrder(void){$/;"	f
InitializeCircularVelocityFromAGNExternalPotentials	SetUpTestRun.c	/^double InitializeCircularVelocityFromAGNExternalPotentials(const int index, const double r){$/;"	f
InitializeCommunicationBuffers	BufferOperation.c	/^void InitializeCommunicationBuffers(void){$/;"	f
InitializeCommunicationOrder	CommunicationTable.c	/^void InitializeCommunicationOrder(void){$/;"	f
InitializeCommunicationTable	CommunicationTable.c	/^void InitializeCommunicationTable(void){$/;"	f
InitializeCoolingRateLookUpTable	Cooling.c	/^void InitializeCoolingRateLookUpTable(void){$/;"	f
InitializeCoolingTable	Cooling.c	/^void InitializeCoolingTable(void){$/;"	f
InitializeCoolingTableSpaans1997	Cooling.c	/^static void InitializeCoolingTableSpaans1997(void){$/;"	f	file:
InitializeCoolingTableSpaans2008	Cooling.c	/^static void InitializeCoolingTableSpaans2008(void){$/;"	f	file:
InitializeDecomposition	PreDecomposition.c	/^void InitializeDecomposition(void){$/;"	f
InitializeDelayedSNII	Delayed.c	/^void InitializeDelayedSNII(void){$/;"	f
InitializeFUVTree	FUV.c	/^void InitializeFUVTree(void){$/;"	f
InitializeFarUltraVioletField	Heating.c	/^void InitializeFarUltraVioletField(void){$/;"	f
InitializeGRAPE	ForceGRAPE.c	/^void InitializeGRAPE(void){$/;"	f
InitializeGRAPEEmulator	GRAPEEmulator.c	/^void InitializeGRAPEEmulator(void){$/;"	f
InitializeHIIregions	HIIregion.c	/^void InitializeHIIregions(void){$/;"	f
InitializeHydroAccImport	HydroAcc.c	/^static struct StructHydroAccImport InitializeHydroAccImport = {$/;"	v	typeref:struct:StructHydroAccImport	file:
InitializeHydroCommunicationOrder	CommunicationTable.c	/^void InitializeHydroCommunicationOrder(void){$/;"	f
InitializeHydroDensityImport	HydroDensity.c	/^static struct StructHydroDensityImport InitializeHydroDensityImport = {$/;"	v	typeref:struct:StructHydroDensityImport	file:
InitializeHydroInteractionFlags	HydroMisc.c	/^void InitializeHydroInteractionFlags(void){$/;"	f
InitializeIMF	IMF.c	/^void InitializeIMF(void){$/;"	f
InitializeLifeTimeLookUpTable	IMF.c	/^void InitializeLifeTimeLookUpTable(void){$/;"	f
InitializeMPIEnv	MPIParameters.c	/^void InitializeMPIEnv(int *argc, char **argv){$/;"	f
InitializeNavarroWhiteTest	SetUpTestRun.c	/^void InitializeNavarroWhiteTest(const int NGrid){$/;"	f
InitializeParallelTreeGRAPE	ForceParallelTreeGRAPE.c	/^void InitializeParallelTreeGRAPE(void){$/;"	f
InitializeParticleDistributionForEquilibriumTemperatureTest	TestRuns.c	/^void InitializeParticleDistributionForEquilibriumTemperatureTest(const int Number, $/;"	f
InitializeParticleDistributionForMilkyWay	SetUpTestRun.c	/^void InitializeParticleDistributionForMilkyWay(const int Number, const double MassFactor){$/;"	f
InitializeParticleDistributionForMilkyWayWithHaloGas	SetUpTestRun.c	/^void InitializeParticleDistributionForMilkyWayWithHaloGas(const int Number){$/;"	f
InitializeParticleDistributionForMilkyWayWithInvRProf	SetUpTestRun.c	/^void InitializeParticleDistributionForMilkyWayWithInvRProf(const int Number, const double MassFactor){$/;"	f
InitializeRandomGenerator	RandomNumberGenerator.c	/^void InitializeRandomGenerator(unsigned long int RandomSeed){$/;"	f
InitializeRootForEffSA	CalcEffectiveSurfaceArea.c	/^static void InitializeRootForEffSA(void){$/;"	f	file:
InitializeRootForFUV	FUV.c	/^void InitializeRootForFUV(void){$/;"	f
InitializeRootForGravity	PlantGravityTree.c	/^void InitializeRootForGravity(void){$/;"	f
InitializeRootForHydro	PlantHydroTree.c	/^void InitializeRootForHydro(void){$/;"	f
InitializeRootForHydroImported	PlantHydroTreeImported.c	/^void InitializeRootForHydroImported(void){$/;"	f
InitializeRootForLET	ForceParallelTreeGRAPE.c	/^void InitializeRootForLET(void){$/;"	f
InitializeRootForStellar	PlantStellarTree.c	/^void InitializeRootForStellar(void){$/;"	f
InitializeRootForYoungStarTree	PlantYoungStarTree.c	/^void InitializeRootForYoungStarTree(void){$/;"	f
InitializeRun	Run.c	/^void InitializeRun(void){$/;"	f
InitializeRunPotentialError	main.c	/^static void InitializeRunPotentialError(void){$/;"	f	file:
InitializeSNII	SNII.c	/^void InitializeSNII(void){$/;"	f
InitializeStarFormation	StarFormation.c	/^void InitializeStarFormation(void){$/;"	f
InitializeStellarFeedback	StellarFeedback.c	/^void InitializeStellarFeedback(void){$/;"	f
InitializeStructFOF	FOF.c	/^static void InitializeStructFOF(void){$/;"	f	file:
InitializeStructSinkFOF	SinkParticle.c	/^static void InitializeStructSinkFOF(void){$/;"	f	file:
InputEnergyInAnEvent	HydroExtraOperations.c	/^static double InputEnergyInAnEvent;$/;"	v	file:
InputImportHydroElements	SinkParticle.c	2005;"	d	file:
InputLocalHydroElements	SinkParticle.c	1965;"	d	file:
InsertData	SetUpTestRun.c	/^static void InsertData(const int TargetIndex, float Pos[], float Vel[], float Mass, float Rho, float U,$/;"	f	file:
InsertDataTestDomainDecomposition	TestRuns.c	/^static void InsertDataTestDomainDecomposition(const int TargetIndex, float Pos[], float Vel[], float Mass, float Rho, float U,$/;"	f	file:
InsertDataTestDomainDecompositionDouble	TestRuns.c	/^static void InsertDataTestDomainDecompositionDouble(const int TargetIndex, double Pos[], double Vel[], double Mass, double Rho, double U,$/;"	f	file:
InsertDiceData	SetUpTestRun.c	/^static void InsertDiceData(const int TargetIndex, float Pos[], float Vel[], float Mass, float Rho, float U,$/;"	f	file:
InspectParticleFluctuation	PreDecomposition.c	/^void InspectParticleFluctuation(void){$/;"	f
InstantaneousSFCondition	StarFormation.c	/^static bool InstantaneousSFCondition(const int index){$/;"	f	file:
Integral	DataStructures.h	/^    double Integral;$/;"	m	struct:StructTimingResults
IntegralThisStep	DataStructures.h	/^    double IntegralThisStep;$/;"	m	struct:StructTimingResults
IntegrateGCOrbit	main.c	/^static void IntegrateGCOrbit(double InitPos[], double InitVel[]){$/;"	f	file:
Interact	CalcEffectiveSurfaceArea.c	/^    int    Interact;$/;"	m	struct:StructNBCacheForEffSA	file:
InteractionList	DataStructures.h	/^    int  InteractionList;$/;"	m	struct:StructGravityAccPotCache
InteractionList	DataStructures.h	/^    int  InteractionList;$/;"	m	struct:StructYoungStarResultCache
InteractionList	DataStructures.h	/^    int InteractionList; \/\/ <TMP> <LEAN>$/;"	m	struct:StructPbody_tag
InteractionList	FUV.c	/^    int  InteractionList; \/\/ remove$/;"	m	struct:StructFUVTreeResultCache	file:
InteractionList	PreDecomposition.c	/^    int     *InteractionList; $/;"	m	struct:StructDecomposition	file:
InteractionList	PreDecomposition.c	/^    int     InteractionList;$/;"	m	struct:StructPreDecomposition	file:
InteractionList	PreDecomposition.c	/^    int InteractionList;$/;"	m	struct:StructPreDecompositionQsort	file:
InteractionListBase	PreDecomposition.c	5;"	d	file:
InternalEnergyConvertToSimulationUnit	StellarFeedback.c	/^static double InternalEnergyConvertToSimulationUnit;$/;"	v	file:
InterpolatedCoolingRateSpaans2008	Cooling.c	/^double InterpolatedCoolingRateSpaans2008(double Tg, double Zg, double G0g, double fH2g){$/;"	f
InvDumpingFactor	Cooling.c	1043;"	d	file:
InvDumpingFactorCompton	Cooling.c	1748;"	d	file:
InvIMFPower	IMF.c	/^static double InvIMFPower;$/;"	v	file:
InvReferenceMass	HydroExtraOperations.c	/^static double ReferenceMass,InvReferenceMass;$/;"	v	file:
InverseComptonCooling	Cooling.c	/^static double InverseComptonCooling(const double Ti, const double ne, const double redshift){$/;"	f	file:
Iter	main.c	33;"	d	file:
IterationCount	SizeDetermination.c	/^    int IterationCount; \/\/ can be removed $/;"	m	struct:StructCSActiveRPParticle	file:
IterationCount	SizeDetermination.c	/^    int IterationCount;$/;"	m	struct:StructCSActiveSNParticle	file:
IterationCount	StellarFeedback.h	/^    int IterationCount;$/;"	m	struct:StructActiveStellarFeedbackParticle
JMEMSIZE	ForceGRAPE.c	/^static int JMEMSIZE;$/;"	v	file:
JMEMSIZE	ForceParallelTreeGRAPE.c	/^static int JMEMSIZE;$/;"	v	file:
JMEMSIZE	GRAPEEmulator.c	24;"	d	file:
JMEMSIZE	config.h	51;"	d
J_TO_EV	Constants.h	87;"	d
K	H2.c	/^static double K(double Rc){$/;"	f	file:
KPC_CGS	Constants.h	100;"	d
Kcurrent	TimeStep.c	/^int Kcurrent;$/;"	v
KeplerPotential	SetUpTestRun.c	/^void KeplerPotential(void){$/;"	f
Kernel	CalcEffectiveSurfaceArea.c	/^    double  Kernel;  \/\/ Kernel size.$/;"	m	struct:StructEffSAExport	file:
Kernel	CalcEffectiveSurfaceArea.c	/^    double Kernel;            \/\/ Kernel size of this leaf.$/;"	m	struct:StructNBCacheForEffSA	file:
Kernel	CalcEffectiveSurfaceArea.c	/^    double Kernel;$/;"	m	struct:StructEffSAInput	file:
Kernel	DataStructures.h	/^    double    Kernel;     \/\/ Size of kernel. 0<- rij\/Kernel ->2$/;"	m	struct:StructPhydro_tag
Kernel	DataStructures.h	/^    double Kernel;            \/\/ Kernel size of this leaf.$/;"	m	struct:StructNBCache_tag
Kernel	HydroKernel.c	/^    double    Kernel;  \/\/ Kernel size.$/;"	m	struct:StructHydroKernelExport	file:
Kernel	HydroMisc.h	/^    double    Kernel;  \/\/ Kernel size.$/;"	m	struct:StructHydroAccExport
Kernel	HydroMisc.h	/^    double    Kernel;  \/\/ Kernel size.$/;"	m	struct:StructHydroDensityExport
Kernel	PlantHydroTree.c	/^    double Kernel;$/;"	m	struct:StructCachedData	file:
Kernel	PlantHydroTreeImported.c	/^    double Kernel;$/;"	m	struct:StructCachedData	file:
Kernel	PlantStellarTree.c	/^    double Kernel;$/;"	m	struct:StructCachedData	file:
Kernel	SetUpTestRun.c	/^    float Kernel;$/;"	m	struct:StructGas	file:
Kernel	SetUpTestRun.c	/^    float Mass,Kernel,U;$/;"	m	struct:StructWriteCE	file:
Kernel	SinkParticle.c	/^    double    Kernel;  \/\/ Kernel size.$/;"	m	struct:StructSinkPressureForces	file:
Kernel	SizeDetermination.h	/^    double Kernel;$/;"	m	struct:StructGetLocalNeighborList
Kernel	StructuresForIO.h	/^    double Kernel;$/;"	m	struct:StructPhydroIOCompactDouble
Kernel	StructuresForIO.h	/^    float Kernel;$/;"	m	struct:StructPhydroIOCompact
Kernel	StructuresForIO.h	/^    float Kernel;$/;"	m	struct:StructPhydroIOCompactMix
Kernel	StructuresForIO.h	/^    float Kernel;$/;"	m	struct:StructPhydroIOLean
KernelDelayedFB	Delayed.c	/^static inline double KernelDelayedFB(const double r, const double InvKerneli){$/;"	f	file:
KernelFactDec	HIIregion.c	404;"	d	file:
KernelFactDec	HydroDensity.c	867;"	d	file:
KernelFactDec	HydroKernel.c	20;"	d	file:
KernelFactInc	HIIregion.c	403;"	d	file:
KernelFactInc	HydroDensity.c	866;"	d	file:
KernelFactInc	HydroKernel.c	19;"	d	file:
KernelFactInc_First	HIIregion.c	405;"	d	file:
KernelFeedBack	SNII.c	/^static inline double __attribute__((always_inline)) KernelFeedBack(const double r, const double InvKerneli){$/;"	f	file:
KernelHII	HIIregion.c	/^static inline double KernelHII(const double r, const double InvKerneli){ $/;"	f	file:
KernelHydroKernel	NeighborSearch.c	/^static inline double KernelHydroKernel(const double r, const double InvKerneli){ $/;"	f	file:
KernelMax	DataStructures.h	/^	double	KernelMax;        \/\/ Maximum length of kernels.$/;"	m	struct:StructHydroNode
KernelPeak	StellarFeedback.c	/^static double KernelPeak;$/;"	v	file:
KernelPred	DataStructures.h	/^    double    KernelPred; \/\/ <TMP> <LEAN> Predictor of kernel. 0<- rij\/Kernel ->2$/;"	m	struct:StructPhydro_tag
KernelSize	SetUpTestRun.c	/^    double KernelSize;$/;"	m	struct:StructIOKeisoku	file:
KernelSizeEstimationProcedureError	Errors.h	24;"	d
KernelStellarFeedback	StellarFeedback.c	/^static inline double __attribute__((always_inline)) KernelStellarFeedback(const double r, const double InvKerneli){$/;"	f	file:
KeyElementBit	OrderingKey.c	3;"	d	file:
KeyGeneration	DataStructures.h	/^    double KeyGeneration;$/;"	m	struct:StructTimingResults
KeyGenerationThisStep	DataStructures.h	/^    double KeyGenerationThisStep;$/;"	m	struct:StructTimingResults
Kick1Drift	Integral.c	/^void Kick1Drift(void){ \/\/ First Kick and Drift.$/;"	f
Kick2	Integral.c	/^void Kick2(void){ \/\/ Second Kick.$/;"	f
LENGTH_AU	Constants.h	76;"	d
LENGTH_AU_CGS	Constants.h	82;"	d
LENGTH_SI_CGS	Constants.h	6;"	d
LETCache	ForceParallelTreeGRAPE.c	/^struct StructGravityCache *LETCache;$/;"	v	typeref:struct:StructGravityCache
LETNode	ForceParallelTreeGRAPE.c	/^struct StructGravityNode *LETNode;$/;"	v	typeref:struct:StructGravityNode
LETNodeDataImplantNew	ForceParallelTreeGRAPE.c	/^static void LETNodeDataImplantNew(const int CurrentNodeID){$/;"	f	file:
LETNodeSeparationCriterion	ForceParallelTreeGRAPE.c	/^static inline bool LETNodeSeparationCriterion(const int CurrentNodeID, const int CriticalNumber){$/;"	f	file:
LETPreprocessing	ForceParallelTreeGRAPE.c	/^static void LETPreprocessing(const int NumberofLeavesThisStep){$/;"	f	file:
LETRoot	ForceParallelTreeGRAPE.c	/^StructGravityRoot LETRoot;$/;"	v
LETSublist	ForceParallelTreeGRAPE.c	/^static int *LETSublist; $/;"	v	file:
LFUV	DataStructures.h	/^	double	LFUV;             \/\/ Mass of this node. $/;"	m	struct:StructYoungStarNode
LFUV	DataStructures.h	/^    double LFUV;$/;"	m	struct:StructPstar_tag
LFUV	DataStructures.h	/^    double LFUV;$/;"	m	struct:StructYoungStarCache
LFUV	FUV.c	/^    double LFUV;$/;"	m	struct:StructFUVLeavesExportImport	file:
LFUV	FUV.c	/^    double LFUV;$/;"	m	struct:StructFUVTreeCache	file:
LFUV	FUV.c	/^    double LFUV;$/;"	m	struct:StructFUVTreeResultCache	file:
LFUV	PlantYoungStarTree.c	/^    double LFUV;$/;"	m	struct:StructCachedData	file:
LFUV	StructuresForIO.h	/^    double LFUV;$/;"	m	struct:StructPstarIOCompactDouble
LFUV	StructuresForIO.h	/^    float LFUV;$/;"	m	struct:StructPstarIOCompact
LFUV	StructuresForIO.h	/^    float LFUV;$/;"	m	struct:StructPstarIOCompactMix
LFUV	StructuresForIO.h	/^    float LFUV;$/;"	m	struct:StructPstarIOLean
LFUVInvNormalization	FUV.c	/^static double LFUVInvNormalization = 1;$/;"	v	file:
LFUVNormalization	FUV.c	/^static double LFUVNormalization = 1;$/;"	v	file:
LIFETIME_M	LifeTime.h	2;"	d
LIFETIME_Z	LifeTime.h	1;"	d
LIGHT_C	Constants.h	14;"	d
LIGHT_C_CGS	Constants.h	19;"	d
LNLK	SizeDetermination.c	/^static double *LNLK;$/;"	v	file:
LOG	debug.h	10;"	d
LOG	debug.h	12;"	d
LastTime	PowderSnow.c	/^static unsigned long LastTime = 0;$/;"	v	file:
LatestFilesID	IO.c	/^static void LatestFilesID(char *optarg, char FilePath[]){$/;"	f	file:
LatestFilesIDWithSkipMode	IO.c	/^static void LatestFilesIDWithSkipMode(char *optarg, char FilePath[]){$/;"	f	file:
Lbox	DataStructures.h	/^    double Lbox[3];        \/\/ For Periodic condition : a size of the simulation box.$/;"	m	struct:StructPall
Lbox	SetUpTestRun.c	/^    float Lbox;$/;"	m	struct:StructHeader	file:
Lboxh	DataStructures.h	/^    double Lboxh[3];       \/\/ For Periodic condition : Lbox\/2$/;"	m	struct:StructPall
Leaf	CalcEffectiveSurfaceArea.c	/^    int     Leaf;$/;"	m	struct:StructEffSAExport	file:
Leaf	CalcEffectiveSurfaceArea.c	/^    int     Leaf;$/;"	m	struct:StructEffSAResult	file:
Leaf	CalcEffectiveSurfaceArea.c	/^    int    Leaf;$/;"	m	struct:StructNBCacheForEffSA	file:
Leaf	DataStructures.h	/^    int  Leaf;                \/\/ ID to refer the `Phydro' array.$/;"	m	struct:StructNBCache_tag
Leaf	DataStructures.h	/^    int  Leaf;$/;"	m	struct:StructGravityCache
Leaf	DataStructures.h	/^    int  Leaf;$/;"	m	struct:StructYoungStarCache
Leaf	DataStructures.h	/^    int Leaf; \/\/ <LEAN> The ID to the HydroTree leaves.$/;"	m	struct:StructPhydro_tag
Leaf	FUV.c	/^    int  Leaf;$/;"	m	struct:StructFUVTreeCache	file:
Leaf	HIIregion.c	/^    int       Leaf;$/;"	m	struct:StructHIIExport	file:
Leaf	HIIregion.c	/^    int       Leaf;$/;"	m	struct:StructHIIImport	file:
Leaf	HydroKernel.c	/^    int       Leaf;$/;"	m	struct:StructHydroKernelExport	file:
Leaf	HydroKernel.c	/^    int       Leaf;$/;"	m	struct:StructHydroKernelImport	file:
Leaf	HydroMisc.h	/^    int       Leaf;$/;"	m	struct:StructHydroAccExport
Leaf	HydroMisc.h	/^    int       Leaf;$/;"	m	struct:StructHydroAccImport
Leaf	HydroMisc.h	/^    int       Leaf;$/;"	m	struct:StructHydroDensityExport
Leaf	HydroMisc.h	/^    int       Leaf;$/;"	m	struct:StructHydroDensityImport
Leaf	SinkParticle.c	/^    int Leaf;$/;"	m	struct:StructParticleDataForActiveSinkFOF	file:
Leaf	SizeDetermination.c	/^    int       Leaf;$/;"	m	struct:StructCSExport	file:
Leaf	SizeDetermination.c	/^    int       Leaf;$/;"	m	struct:StructCSImport	file:
Leaf	StellarFeedback.c	/^    int       Leaf;$/;"	m	struct:StructStellarFeedbackExport	file:
Leaf	StellarFeedback.c	/^    int    Leaf;$/;"	m	struct:StructStellarFeedbackImport	file:
Leaf	StellarFeedback.c	/^    int Leaf;$/;"	m	struct:StructEnergyHeavyElements	file:
Leaf	StructuresForIO.h	/^    int Leaf;$/;"	m	struct:StructPhydroIOCompact
Leaf	StructuresForIO.h	/^    int Leaf;$/;"	m	struct:StructPhydroIOCompactDouble
Leaf	StructuresForIO.h	/^    int Leaf;$/;"	m	struct:StructPhydroIOCompactMix
LeanIOCondition	IO.c	/^static bool LeanIOCondition(void){$/;"	f	file:
Leaves	DataStructures.h	/^	int	*Leaves;                      \/\/ Leaves, which is morton-ordered local particles index list.$/;"	m	struct:StructHydroRoot_tag
Leaves	DataStructures.h	/^	int	*Leaves;                   \/\/ Leaves, which is morton-ordered local particles index list.$/;"	m	struct:StructGravityRoot_tag
Leaves	DataStructures.h	/^	int	*Leaves;                   \/\/ Leaves, which is morton-ordered local particles index list.$/;"	m	struct:StructYoungStarRoot_tag
Leaves	DataStructures.h	/^	int Leaves;               \/\/ This member points a Pbody or Phydro in the top of the node.$/;"	m	struct:StructGravityNode
Leaves	DataStructures.h	/^	int Leaves;               \/\/ This member points a Pbody or Phydro in the top of the node.$/;"	m	struct:StructHydroNode
Leaves	DataStructures.h	/^	int Leaves;               \/\/ This member points a Pbody or Phydro in the top of the node.$/;"	m	struct:StructYoungStarNode
LeavesExport	ForceParallelTreeGRAPE.c	/^static struct StructLeavesExportImport **LeavesExport;$/;"	v	typeref:struct:StructLeavesExportImport	file:
LeavesImport	ForceParallelTreeGRAPE.c	/^static struct StructLeavesExportImport *LeavesImport;$/;"	v	typeref:struct:StructLeavesExportImport	file:
Left	DataStructures.h	/^    int Left;$/;"	m	struct:StructInfoBiSection
Level	DataStructures.h	/^	short	Level;            \/\/ Level of node in belonging tree structure. \/\/ this can be short.$/;"	m	struct:StructGravityNode
Level	DataStructures.h	/^	short	Level;            \/\/ Level of node in belonging tree structure. \/\/ this can be short.$/;"	m	struct:StructYoungStarNode
Level	DataStructures.h	/^	short Level;              \/\/ Level of node in belonging tree structure. \/\/ this can be short.$/;"	m	struct:StructHydroNode
Level	DataStructures.h	/^    int Level;$/;"	m	struct:StructCommunicationTable
LifeGauge	DataStructures.h	/^    int LifeGauge;                    \/\/ Life gauge of this tree. Check also ``HYDROTREE_LIFEGAUGE''.$/;"	m	struct:StructHydroRoot_tag
LifeTimeMass	LifeTime.h	/^double LifeTimeMass[] = $/;"	v
LifeTimeZ	LifeTime.h	/^double LifeTimeZ[5] = {0.0004,0.004,0.008,0.02,0.05};$/;"	v
LifeTimeZMF	LifeTime.h	/^double LifeTimeZMF[5][30] = $/;"	v
Linear1D	Cooling.c	/^static void Linear1D(const int n, double x[n], double y[n], double xi, double *yi){$/;"	f	file:
LinearInterpolation	StellarWind.c	/^static inline double __attribute__((always_inline)) LinearInterpolation(const double x, const double x1, const double x0, const double y1, const double y0){$/;"	f	file:
LinkingLength	FOF.c	/^static double LinkingLength;$/;"	v	file:
LinkingLength2	FOF.c	/^static double LinkingLength2;$/;"	v	file:
ListUpFOFCatalog	FOF.c	/^void ListUpFOFCatalog(void){$/;"	f
Lmd0	Cooling.c	/^static double Lmd0[NCOOLINGCURVE][NCOOL];$/;"	v	file:
LoadDiceRunParameters	SetUpTestRun.c	/^static void LoadDiceRunParameters(void){$/;"	f	file:
LoadnLyData	HIIregion.c	/^static void LoadnLyData(void){$/;"	f	file:
Local	SinkParticle.c	/^    bool Local;$/;"	m	struct:StructParticleDataForActiveSinkFOF	file:
LocalKernelMax	HIIregion.c	/^static double LocalKernelMax = 0.e0;$/;"	v	file:
LocalKernelMax	HydroKernel.c	/^static double LocalKernelMax = 0.e0;$/;"	v	file:
LocalKernelMax	SizeDetermination.c	/^static double LocalKernelMax = 0.e0;$/;"	v	file:
LocalKernelMax	StellarFeedback.c	/^static double LocalKernelMax = 0.e0;$/;"	v	file:
LocalNeighborList	SizeDetermination.c	/^static int *LocalNeighborList;$/;"	v	file:
LocalNeighborListStride	SizeDetermination.c	/^static int LocalNeighborListStride = 0;$/;"	v	file:
LocalUpdateFlag	HIIregion.c	/^    bool LocalUpdateFlag;$/;"	m	struct:StructActiveHIIParticle	file:
LocalUpdateFlags	HydroKernel.c	/^    bool LocalUpdateFlags; \/\/ Flag for the local update.$/;"	m	struct:StructActiveHydroParticle	file:
LocalUpdateFlags	SizeDetermination.c	/^    bool LocalUpdateFlags; \/\/ Flag for the local update.$/;"	m	struct:StructActiveParticle	file:
LocalUpdateFlags	StellarFeedback.h	/^    bool LocalUpdateFlags; \/\/ Flag for the local update.$/;"	m	struct:StructActiveStellarFeedbackParticle
LockFileMakeError	Errors.h	12;"	d
LockFileName	IO.c	/^static char LockFileName[MaxCharactersInLine];$/;"	v	file:
LockFileRemoveError	Errors.h	13;"	d
LogLifeTimeArray	IMF.c	/^static double LogLifeTimeArray[LIFETIME_Z][LIFETIME_M];$/;"	v	file:
LogOutPutElapsedTime	Logs.c	/^void LogOutPutElapsedTime(void){$/;"	f
LogOutPutEnergyMomentumAngularMomentum	Logs.c	/^void LogOutPutEnergyMomentumAngularMomentum(void){$/;"	f
LogOutPutEnergyMomentumAngularMomentumPredictors	Logs.c	/^void LogOutPutEnergyMomentumAngularMomentumPredictors(void){$/;"	f
LogPrint	GRAPEManager.c	10;"	d	file:
LogSinkParticles	SinkParticle.c	/^static void LogSinkParticles(void){$/;"	f	file:
LogSinkParticlesFirstFlag	SinkParticle.c	/^static bool LogSinkParticlesFirstFlag = true;$/;"	v	file:
LogStarFormationRate	StarFormation.c	/^void LogStarFormationRate(void){$/;"	f
LogTheta	main.c	/^static int LogTheta;$/;"	v	file:
LogTotalMass	Logs.c	/^void LogTotalMass(void){$/;"	f
LogsThisTimeStep	Logs.c	/^void LogsThisTimeStep(void){$/;"	f
Lvalue	Delayed.c	/^    double Lvalue;$/;"	m	struct:StructDelayedFBActiveStars	file:
Lvalue	HIIregion.c	/^    double Lvalue;$/;"	m	struct:StructActiveHIIParticle	file:
Lvalue	HIIregion.c	/^    double Lvalue;$/;"	m	struct:StructBinarySearch	file:
Lvalue	HydroDensity.c	/^    double Lvalue;$/;"	m	struct:StructBinarySearch	file:
Lvalue	HydroKernel.c	/^    double Lvalue;$/;"	m	struct:StructActiveHydroParticle	file:
Lvalue	SizeDetermination.c	/^    double Lvalue;$/;"	m	struct:StructActiveParticle	file:
Lvalue	StellarFeedback.h	/^    double Lvalue;$/;"	m	struct:StructActiveStellarFeedbackParticle
LyAlpha	TestRuns.c	/^double *LyAlpha;$/;"	v
LyAphoton	HIIregion.c	/^    double LyAphoton;  \/\/ The number of Lyman continum photons [s^{-1}].$/;"	m	struct:StructActiveHIIParticle	file:
LyAphoton	SizeDetermination.c	/^    double LyAphoton;  \/\/ The number of Lyman continum photons [s^{-1}].$/;"	m	struct:StructCSActiveHIIParticle	file:
LyZSolar	SetUpTestRun.c	/^static double LyZSolar = 0.243E+47; \/\/ Photon number per solar mass of an SSP particle.$/;"	v	file:
M200_NFW	SetUpTestRun.c	/^double M200_NFW;$/;"	v
MASS_SI_CGS	Constants.h	7;"	d
MAX	Astro.h	9;"	d
MBHUnit	SetUpTestRun.c	/^static double MBHUnit,GMBHUnit,GMSelfUnit;$/;"	v	file:
MBULGE_AGN	SetUpTestRun.c	13083;"	d	file:
MEARTH_CGS	Constants.h	97;"	d
MEGAYEAR_CGS	Constants.h	103;"	d
MIMFMax	IMFParameters.h	5;"	d
MIMFMin	IMFParameters.h	6;"	d
MIN	Astro.h	10;"	d
MOMENT_AU	Constants.h	75;"	d
MOMENT_AU_CGS	Constants.h	81;"	d
MPC_CGS	Constants.h	101;"	d
MPIGetActiveBaryonMyID	MPIParameters.c	/^int MPIGetActiveBaryonMyID(void){$/;"	f
MPIGetActiveBaryonNumProcs	MPIParameters.c	/^int MPIGetActiveBaryonNumProcs(void){$/;"	f
MPIGetActiveHydroMyID	MPIParameters.c	/^int MPIGetActiveHydroMyID(void){$/;"	f
MPIGetActiveHydroNumProcs	MPIParameters.c	/^int MPIGetActiveHydroNumProcs(void){$/;"	f
MPIGetBaryonMyID	MPIParameters.c	/^int MPIGetBaryonMyID(void){$/;"	f
MPIGetBaryonNumProcs	MPIParameters.c	/^int MPIGetBaryonNumProcs(void){$/;"	f
MPIGetFactor	MPIParameters.c	/^int MPIGetFactor(const int direction){$/;"	f
MPIGetFactorFromID	MPIParameters.c	/^int MPIGetFactorFromID(const int direction){$/;"	f
MPIGetHydroMyID	MPIParameters.c	/^int MPIGetHydroMyID(void){$/;"	f
MPIGetHydroNumProcs	MPIParameters.c	/^int MPIGetHydroNumProcs(void){$/;"	f
MPIGetMyID	MPIParameters.c	/^int MPIGetMyID(void){$/;"	f
MPIGetNameLen	MPIParameters.c	/^int MPIGetNameLen(void){$/;"	f
MPIGetNumGrapes	MPIParameters.c	/^int MPIGetNumGrapes(void){$/;"	f
MPIGetNumProcs	MPIParameters.c	/^int MPIGetNumProcs(void){$/;"	f
MPIGetNumProcsPower	MPIParameters.c	/^int MPIGetNumProcsPower(void){$/;"	f
MPIGetProcessorName	MPIParameters.c	/^char *MPIGetProcessorName(void){$/;"	f
MPIGetXYZFactors	MPIParameters.c	/^void MPIGetXYZFactors(int FactorsDist[]){$/;"	f
MPISetMyID	MPIParameters.c	/^void MPISetMyID(int current_id){$/;"	f
MPISetNameLen	MPIParameters.c	/^void MPISetNameLen(int current_namelen){$/;"	f
MPISetNumGrapes	MPIParameters.c	/^void MPISetNumGrapes(int current_numgrapes){$/;"	f
MPISetNumProcs	MPIParameters.c	/^void MPISetNumProcs(int current_numprocs){$/;"	f
MPISetNumProcsPower	MPIParameters.c	/^void MPISetNumProcsPower(int current_numprocs){$/;"	f
MPISetProcessorName	MPIParameters.c	/^void MPISetProcessorName(char *current_processor_name){$/;"	f
MPISetXYZFactors	MPIParameters.c	/^void MPISetXYZFactors(void){$/;"	f
MPI_ACTIVEBARYON_COMM_WORLD	DataStructures.c	/^MPI_Comm MPI_ACTIVEBARYON_COMM_WORLD = MPI_COMM_NULL;$/;"	v
MPI_ACTIVEHYDRO_COMM_WORLD	DataStructures.c	/^MPI_Comm MPI_ACTIVEHYDRO_COMM_WORLD = MPI_COMM_NULL;$/;"	v
MPI_BARYON_COMM_WORLD	DataStructures.c	/^MPI_Comm MPI_BARYON_COMM_WORLD = MPI_COMM_NULL;$/;"	v
MPI_HYDRO_COMM_WORLD	DataStructures.c	/^MPI_Comm MPI_HYDRO_COMM_WORLD = MPI_COMM_NULL;$/;"	v
MPI_ROOT_RANK	MPITags.h	/^    MPI_ROOT_RANK,$/;"	e	enum:__anon2
MSNIIMax	IMFParameters.h	7;"	d
MSNIIMin	IMFParameters.h	8;"	d
MSUN_CGS	Constants.h	96;"	d
M_1_PI	Constants.h	145;"	d
M_2_PI	Constants.h	149;"	d
M_2_SQRTPI	Constants.h	157;"	d
M_E	Constants.h	117;"	d
M_EULER	Constants.h	177;"	d
M_LN10	Constants.h	133;"	d
M_LN2	Constants.h	129;"	d
M_LNPI	Constants.h	173;"	d
M_LOG10E	Constants.h	125;"	d
M_LOG2E	Constants.h	121;"	d
M_PI	Constants.h	113;"	d
M_PI_2	Constants.h	137;"	d
M_PI_4	Constants.h	141;"	d
M_SQRT1_2	Constants.h	169;"	d
M_SQRT2	Constants.h	161;"	d
M_SQRT3	Constants.h	165;"	d
M_SQRTPI	Constants.h	153;"	d
MakeCoolingTable	Cooling.c	/^static void MakeCoolingTable(const int mode){$/;"	f	file:
MakeDir	Utilities.c	/^void MakeDir(const char DirName[]){$/;"	f
MakeExportParticleList	ForceParallelTreeGRAPE.c	/^static int MakeExportParticleList(const int Index){$/;"	f	file:
MakeFOFCatalog	FOF.c	/^static void MakeFOFCatalog(void){$/;"	f	file:
MakeFOFGroups	FOF.c	/^static void MakeFOFGroups(const int index, const int nlist, const int Neighbors[static MaxNeighborSize]){$/;"	f	file:
MakeFUVTreeRoot	FUV.c	/^static void MakeFUVTreeRoot(const int NumberofLeavesThisStep){$/;"	f	file:
MakeGlobalTree	ForceParallelTreeGRAPE.c	20;"	d	file:
MakeGravityRoot	PlantGravityTree.c	/^static void MakeGravityRoot(void){$/;"	f	file:
MakeGridData	TestRuns.c	/^static void MakeGridData(const int BaseNumber){$/;"	f	file:
MakeHIIregion	HIIregion.c	/^static void MakeHIIregion(void){$/;"	f	file:
MakeHydroRoot	PlantHydroTree.c	/^static void MakeHydroRoot(void){$/;"	f	file:
MakeHydroRootForEffSA	CalcEffectiveSurfaceArea.c	/^static void MakeHydroRootForEffSA(const int NumberofLeaves, struct StructEffSAExport EffSAExportRecv[restrict]){$/;"	f	file:
MakeHydroRootImported	PlantHydroTreeImported.c	/^static void MakeHydroRootImported(const int NumberofLeaves){$/;"	f	file:
MakeLETRoot	ForceParallelTreeGRAPE.c	/^static void MakeLETRoot(const int NumberofLeavesThisStep){$/;"	f	file:
MakeLockFile	IO.c	/^static void MakeLockFile(void){$/;"	f	file:
MakeOrderingKey	OrderingKey.c	/^void MakeOrderingKey(void){$/;"	f
MakeParticleDistributionForMomentumFeedbackTest	TestRuns.c	/^void MakeParticleDistributionForMomentumFeedbackTest(const double nH, const double Radius, const int Nhydro, const int Nstars, double StarPos[restrict][3], const double Mstar_in_SolarMass){$/;"	f
MakeParticleDistributionForStellarFeedbackTest2	TestRuns.c	/^void MakeParticleDistributionForStellarFeedbackTest2(const double nH, const double Radius, const int Nhydro, const int Nstars, double StarPos[restrict][3], const double Mstar_in_SolarMass){$/;"	f
MakeSamplingPoints	main.c	/^static void MakeSamplingPoints(double PosOriginal[][3], const bool Random){$/;"	f	file:
MakeSinkFOFCatalog	SinkParticle.c	/^static void MakeSinkFOFCatalog(void){$/;"	f	file:
MakeSinkParticles	SinkParticle.c	/^static void MakeSinkParticles(void){$/;"	f	file:
MakeSinkParticlesNew	SinkParticle.c	/^static void MakeSinkParticlesNew(void){$/;"	f	file:
MakeStellarRoot	PlantStellarTree.c	/^static void MakeStellarRoot(void){$/;"	f	file:
MakeYoungStarRoot	PlantYoungStarTree.c	/^static void MakeYoungStarRoot(const int NYoungStars){$/;"	f	file:
Mass	DataStructures.h	/^	double	Mass;             \/\/ Mass of this node. $/;"	m	struct:StructGravityNode
Mass	DataStructures.h	/^    double    Mass;         \/\/ <MIX> The mass of the particle.$/;"	m	struct:StructPbody_tag
Mass	DataStructures.h	/^    double    Mass;         \/\/ <TMP> <LEAN>$/;"	m	struct:StructPhydro_tag
Mass	DataStructures.h	/^    double  Mass;           \/\/ <MIX> Current Mass$/;"	m	struct:StructPstar_tag
Mass	DataStructures.h	/^    double Mass;$/;"	m	struct:StructFOFCatalog
Mass	DataStructures.h	/^    double Mass;$/;"	m	struct:StructGravityCache
Mass	Delayed.c	/^    double Mass;$/;"	m	struct:StructDelayedFBInjection	file:
Mass	ForceDirect.c	/^    double Mass;$/;"	m	struct:StructForceExport	file:
Mass	ForceGRAPE.c	/^    double Mass;$/;"	m	struct:StructForceExport	file:
Mass	ForceParallelTreeGRAPE.c	/^    double Mass;$/;"	m	struct:StructLeavesExportImport	file:
Mass	HIIregion.c	/^    double    Mass;    \/\/ Mass.$/;"	m	struct:StructHIIImport	file:
Mass	HIIregion.c	/^    double Mass;$/;"	m	struct:StructActiveHIIParticle	file:
Mass	HIIregion.c	/^    double Mass;$/;"	m	struct:StructHIILocalInfo	file:
Mass	HydroMisc.h	/^    double    Mass;    \/\/ Mass.$/;"	m	struct:StructHydroAccExport
Mass	IO.c	/^    float Mass;$/;"	m	struct:StructWrite4D2UBody	file:
Mass	PlantGravityTree.c	/^    double Mass;$/;"	m	struct:StructCachedData	file:
Mass	ReadGadgetFormat.c	/^  float  Mass;$/;"	m	struct:Gadget_particle_data	file:
Mass	SetUpTestRun.c	/^    double Mass;$/;"	m	struct:StructIOKeisoku	file:
Mass	SetUpTestRun.c	/^    float Mass,Kernel,U;$/;"	m	struct:StructWriteCE	file:
Mass	SetUpTestRun.c	/^    float Mass;$/;"	m	struct:StructDM	file:
Mass	SetUpTestRun.c	/^    float Mass;$/;"	m	struct:StructGas	file:
Mass	SetUpTestRun.c	/^    float Mass;$/;"	m	struct:StructReadGalactICSBody	file:
Mass	SetUpTestRun.c	/^    float Mass;$/;"	m	struct:StructReadGalactICSBodyFlag	file:
Mass	SetUpTestRun.c	/^    float Mass;$/;"	m	struct:StructStars	file:
Mass	SinkParticle.c	/^    double    Mass;    \/\/ Mass.$/;"	m	struct:StructSinkPressureForces	file:
Mass	SinkParticle.c	/^    double  Mass;    \/\/ Mass.$/;"	m	struct:StructSinkExport	file:
Mass	SinkParticle.c	/^    double  Mass;    \/\/ Mass.$/;"	m	struct:StructSinkImport	file:
Mass	SinkParticle.c	/^    double Mass;$/;"	m	struct:StructParticleDataForActiveSinkFOF	file:
Mass	SizeDetermination.c	/^    double    Mass;    \/\/ Mass.$/;"	m	struct:StructCSImport	file:
Mass	SizeDetermination.c	/^    double Mass;$/;"	m	struct:StructCSHIILocalInfo	file:
Mass	StructuresForIO.h	/^    double Mass;$/;"	m	struct:StructPbodyIOCompactDouble
Mass	StructuresForIO.h	/^    double Mass;$/;"	m	struct:StructPbodyIOCompactMix
Mass	StructuresForIO.h	/^    double Mass;$/;"	m	struct:StructPstarIOCompactDouble
Mass	StructuresForIO.h	/^    double Mass;$/;"	m	struct:StructPstarIOCompactMix
Mass	StructuresForIO.h	/^    float Mass;$/;"	m	struct:StructPbodyIOCompact
Mass	StructuresForIO.h	/^    float Mass;$/;"	m	struct:StructPbodyIOLean
Mass	StructuresForIO.h	/^    float Mass;$/;"	m	struct:StructPstarIOCompact
Mass	StructuresForIO.h	/^    float Mass;$/;"	m	struct:StructPstarIOLean
Mass	TestRuns.c	/^static double Mass;$/;"	v	file:
MassBH_AGN_CGS	main.c	/^double MassBH_AGN_CGS;$/;"	v
MassConvertToMsun	StellarFeedback.c	/^static double MassConvertToMsun;$/;"	v	file:
MassConvertToSimulationUnit	StellarFeedback.c	/^static double MassConvertToSimulationUnit;$/;"	v	file:
MassDistMin	HIIregion.c	/^    double    MassDistMin;$/;"	m	struct:StructHIIImport	file:
MassDistMin	HIIregion.c	/^    double MassDistMin;$/;"	m	struct:StructActiveHIIParticle	file:
MassDistMin	HIIregion.c	/^    double MassDistMin;$/;"	m	struct:StructHIILocalInfo	file:
MassDistanceMin	SizeDetermination.c	/^    double    MassDistanceMin;$/;"	m	struct:StructCSImport	file:
MassDistanceMin	SizeDetermination.c	/^    double MassDistanceMin;$/;"	m	struct:StructCSActiveHIIParticle	file:
MassDistanceMin	SizeDetermination.c	/^    double MassDistanceMin;$/;"	m	struct:StructCSHIILocalInfo	file:
MassFractionA09	EstimateXFe.c	/^static double MassFractionA09[3] = {0.7381,0.2485,0.0134};$/;"	v	file:
MassGas_AGN_CGS	main.c	/^double MassGas_AGN_CGS;$/;"	v
MassPrev	StarFormation.c	/^static double MassPrev = 0.e0;$/;"	v	file:
MassRatioEnd	main.c	/^int MassRatioStart,MassRatioEnd,MassRatioStep;$/;"	v
MassRatioStart	main.c	/^int MassRatioStart,MassRatioEnd,MassRatioStep;$/;"	v
MassRatioStep	main.c	/^int MassRatioStart,MassRatioEnd,MassRatioStep;$/;"	v
MassTotal	SizeDetermination.c	/^    double    MassTotal;$/;"	m	struct:StructCSImport	file:
MassTotal	SizeDetermination.c	/^    double    MassTotal;$/;"	m	struct:StructCSImportHydroParticle	file:
MassTotal	SizeDetermination.c	/^    double MassTotal;$/;"	m	struct:StructCSActiveHydroParticle	file:
MassTotal	SizeDetermination.c	/^    double MassTotal;$/;"	m	struct:StructCSHydroLocalInfo	file:
Max	HIIregion.c	/^    double Max[3],Min[3];$/;"	m	struct:StructHIILocalDomainEdge	file:
MaxCharactersInLine	Astro.h	3;"	d
MaxIndexList	Delayed.c	/^static int MaxIndexList = 0;$/;"	v	file:
MaxIteration	config.h	41;"	d
MaxIterationTimes	HydroKernel.c	/^static int MaxIterationTimes = 20;$/;"	v	file:
MaxIterationTimes	SizeDetermination.c	/^static int MaxIterationTimes = 20;$/;"	v	file:
MaxIterationTimes	StellarFeedback.c	/^static int MaxIterationTimes = 20;$/;"	v	file:
MaxIterationTimesForInitialGuess	StellarFeedback.c	/^static int MaxIterationTimesForInitialGuess = 10;$/;"	v	file:
MaxIterationTimesForInitialGuessRP	SizeDetermination.c	/^static int MaxIterationTimesForInitialGuessRP = 10;$/;"	v	file:
MaxIterationTimesForInitialGuessSW	SizeDetermination.c	/^static int MaxIterationTimesForInitialGuessSW = 10;$/;"	v	file:
MaxLevel	DataStructures.h	/^    short MaxLevel;                   \/\/ Allowing maximum level of this tree. $/;"	m	struct:StructHydroRoot_tag
MaxLevel	DataStructures.h	/^    short MaxLevel;                \/\/ Allowing maximum level of this tree. $/;"	m	struct:StructGravityRoot_tag
MaxLevel	DataStructures.h	/^    short MaxLevel;                \/\/ Allowing maximum level of this tree. $/;"	m	struct:StructYoungStarRoot_tag
MaxNeighborSize	config.h	89;"	d
MaxSpawnTimes	config.h	148;"	d
MaximumTimeHierarchy	config.h	106;"	d
MeanDistance	TestRuns.c	/^static double MeanDistance;$/;"	v	file:
MeanMolecularWeight	DataStructures.h	/^    double MeanMolecularWeight;$/;"	m	struct:StructPall
MergerAllData	IO.c	/^static void MergerAllData(void){$/;"	f	file:
MergingDistance	DataStructures.h	/^    double  MergingDistance;\/\/ The sink-sink merging distance.$/;"	m	struct:StructPsink_tag
MergingDistance	SinkParticle.c	/^    double MergingDistance;$/;"	m	struct:StructParticleDataForActiveSinkFOF	file:
MergingDistance	StructuresForIO.h	/^    double MergingDistance;$/;"	m	struct:StructPsinkIOCompactDouble
MergingDistance	StructuresForIO.h	/^    float MergingDistance;$/;"	m	struct:StructPsinkIOCompact
MergingDistance	StructuresForIO.h	/^    float MergingDistance;$/;"	m	struct:StructPsinkIOCompactMix
MergingDistance	StructuresForIO.h	/^    float MergingDistance;$/;"	m	struct:StructPsinkIOLean
Metal	Delayed.c	/^    double Metal;$/;"	m	struct:StructDelayedFBInjection	file:
MetalDependentFUV	Heating.c	/^static double MetalDependentFUV(const double Rho, const double G0, const double Metallicity){$/;"	f	file:
MetalDependingCoolingRate	Cooling.c	/^static double MetalDependingCoolingRate(const int index, const double ui, const double rhoi, const double g0i, const double Metallicity){$/;"	f	file:
MetalIndependentFUV	Heating.c	/^static double MetalIndependentFUV(const double Rho, const double G0, const double Metallicity){$/;"	f	file:
MetalInterpolatedCoolingRate	Cooling.c	/^double MetalInterpolatedCoolingRate(const double T, double metal){$/;"	f
MetalMass	SizeDetermination.c	/^    double    MetalMass;$/;"	m	struct:StructCSImport	file:
MetalMass	SizeDetermination.c	/^    double    MetalMass;$/;"	m	struct:StructCSImportRPParticle	file:
MetalMass	SizeDetermination.c	/^    double MetalMass;   \/\/ Total metal mass sum_i m_i*Z_i$/;"	m	struct:StructCSActiveRPParticle	file:
MetalMass	SizeDetermination.c	/^    double MetalMass;\/\/ Local metal mass.$/;"	m	struct:StructCSRadiationPressureLocalInfo	file:
MetalSolar	Cooling.c	/^    MetalSolar,$/;"	e	enum:__anon1	file:
MetalZero	Cooling.c	/^    MetalZero,$/;"	e	enum:__anon1	file:
Metallicity	SizeDetermination.c	/^    double Metallicity;$/;"	m	struct:StructCSActiveSNParticle	file:
Metallicity	SizeDetermination.c	/^    double Metallicity;$/;"	m	struct:StructCSActiveSWParticle	file:
Metallicity	StellarFeedback.c	/^    double Metallicity;$/;"	m	struct:StructEnergyHeavyElements	file:
Metallicity	StellarFeedback.h	/^    double Metallicity;$/;"	m	struct:StructActiveStellarFeedbackParticle
Metallicity	StellarFeedback.h	/^    double Metallicity;$/;"	m	struct:StructActiveStellarFeedbackRPParticle
Metallicity	StellarFeedback.h	/^    double Metallicity;$/;"	m	struct:StructActiveStellarFeedbackSNParticle
Metallicity	TestRuns.c	/^    double Metallicity;\/\/Metallicity$/;"	m	struct:StructECParams	file:
MetallicityType	SetUpTestRun.c	/^    int MetallicityType; \/\/ 0 = Solar(MW), 1 = 0.1 solar(Dwarf), 2 = Primordial, 3 = follow the init condition$/;"	m	struct:StructDiceRun	file:
MgasFrac	SetUpTestRun.c	11870;"	d	file:
MgasFrac	SetUpTestRun.c	12106;"	d	file:
MgasFrac	SetUpTestRun.c	12518;"	d	file:
Mh	main.c	5372;"	d	file:
Mhot	DataStructures.h	/^    double Mhot;            \/\/ Hot gas mass$/;"	m	struct:StructPhydro_tag
Mhot	StructuresForIO.h	/^    double Mhot;$/;"	m	struct:StructPhydroIOCompactDouble
Mhot	StructuresForIO.h	/^    float Mhot;$/;"	m	struct:StructPhydroIOCompact
Mhot	StructuresForIO.h	/^    float Mhot;$/;"	m	struct:StructPhydroIOCompactMix
Mhot	StructuresForIO.h	/^    float Mhot;$/;"	m	struct:StructPhydroIOLean
MilkyWayPotentialHaloDisk	SetUpTestRun.c	/^void MilkyWayPotentialHaloDisk(void){$/;"	f
Min	HIIregion.c	/^    double Max[3],Min[3];$/;"	m	struct:StructHIILocalDomainEdge	file:
MinimumAllocationSize	config.h	46;"	d
MinimumMassFactor	ForceParallelTreeGRAPE.c	439;"	d	file:
MiyamotoNagaiDiskScaleHeight	SetUpTestRun.c	12816;"	d	file:
MiyamotoNagaiDiskScaleLength	SetUpTestRun.c	12815;"	d	file:
Mode	Delayed.c	/^    int Mode;        \/\/ TypeII? or TypeIa? $/;"	m	struct:StructDelayedFBInjection	file:
MomentumFB	DataStructures.h	/^    double MomentumFB[3];               \/\/ momentum injection by SNe$/;"	m	struct:StructPhydro_tag
MomentumFB	StructuresForIO.h	/^    double MomentumFB[3];$/;"	m	struct:StructPhydroIOCompactDouble
MomentumFB	StructuresForIO.h	/^    float MomentumFB[3];$/;"	m	struct:StructPhydroIOCompact
MomentumFB	StructuresForIO.h	/^    float MomentumFB[3];$/;"	m	struct:StructPhydroIOCompactMix
MomentumFB	StructuresForIO.h	/^    float MomentumFB[3];$/;"	m	struct:StructPhydroIOLean
MomentumFeedbackKick	StellarFeedback.c	/^static void MomentumFeedbackKick(void){$/;"	f	file:
MomentumRP	DataStructures.h	/^    double MomentumRP[3];               \/\/ momentum injection by radiation$/;"	m	struct:StructPhydro_tag
MomentumRP	StellarFeedback.c	/^    double MomentumRP;$/;"	m	struct:StructEnergyHeavyElements	file:
MomentumRP	StructuresForIO.h	/^    double MomentumRP[3];$/;"	m	struct:StructPhydroIOCompactDouble
MomentumRP	StructuresForIO.h	/^    float MomentumRP[3];$/;"	m	struct:StructPhydroIOCompact
MomentumRP	StructuresForIO.h	/^    float MomentumRP[3];$/;"	m	struct:StructPhydroIOCompactMix
MomentumRP	StructuresForIO.h	/^    float MomentumRP[3];$/;"	m	struct:StructPhydroIOLean
MultiphaseCoolingSolverASRCH	Cooling.c	/^static double MultiphaseCoolingSolverASRCH(const int index){$/;"	f	file:
MultiphaseEndTime	DataStructures.h	/^    double MultiphaseEndTime; \/\/ 10xt_cross$/;"	m	struct:StructPhydro_tag
MultiphaseEndTime	StructuresForIO.h	/^    double MultiphaseEndTime;$/;"	m	struct:StructPhydroIOCompactDouble
MultiphaseEndTime	StructuresForIO.h	/^    float MultiphaseEndTime;$/;"	m	struct:StructPhydroIOCompact
MultiphaseEndTime	StructuresForIO.h	/^    float MultiphaseEndTime;$/;"	m	struct:StructPhydroIOCompactMix
MultiphaseEndTime	StructuresForIO.h	/^    float MultiphaseEndTime;$/;"	m	struct:StructPhydroIOLean
MultiphaseFlag	DataStructures.h	/^    bool   MultiphaseFlag;  \/\/ If true, the gas particle is evolved under the multiphase mode.$/;"	m	struct:StructPhydro_tag
MultiphaseFlag	StructuresForIO.h	/^    bool MultiphaseFlag;$/;"	m	struct:StructPhydroIOCompact
MultiphaseFlag	StructuresForIO.h	/^    bool MultiphaseFlag;$/;"	m	struct:StructPhydroIOCompactDouble
MultiphaseFlag	StructuresForIO.h	/^    bool MultiphaseFlag;$/;"	m	struct:StructPhydroIOCompactMix
MultiphaseFlag	StructuresForIO.h	/^    bool MultiphaseFlag;$/;"	m	struct:StructPhydroIOLean
MultiplicationConstantForDam	main.c	3494;"	d	file:
Mvir	SetUpTestRun.c	10974;"	d	file:
Mvir	SetUpTestRun.c	10997;"	d	file:
Mvir	SetUpTestRun.c	8173;"	d	file:
Mvir	SetUpTestRun.c	8196;"	d	file:
N0	H2.c	/^static double N0 = 1.e+14;  \/\/ cm^-2$/;"	v	file:
NActives	DataStructures.h	/^    unsigned long int    NActives;      \/\/ The number of active particles.$/;"	m	struct:StructPall
NActivesAll	DataStructures.h	/^    unsigned long int    NActivesAll;   \/\/ The number of active particles.$/;"	m	struct:StructPall
NActivesAll_t	DataStructures.h	/^    unsigned long int    NActivesAll_t;   \/\/ The total number of active particles.$/;"	m	struct:StructPall
NActivesDM	DataStructures.h	/^    unsigned long int    NActivesDM;    \/\/ The number of active "DM" particles.$/;"	m	struct:StructPall
NActivesDM_t	DataStructures.h	/^    unsigned long int    NActivesDM_t;    \/\/ The total number of active "DM" particles.$/;"	m	struct:StructPall
NActivesHydro	DataStructures.h	/^    unsigned long int    NActivesHydro; \/\/ The number of active "Hydro" particles.$/;"	m	struct:StructPall
NActivesHydro_t	DataStructures.h	/^    unsigned long int    NActivesHydro_t; \/\/ The total number of active "Hydro" particles.$/;"	m	struct:StructPall
NActivesSink	DataStructures.h	/^    unsigned long int    NActivesSink;  \/\/ The number of active "Sink" particles.$/;"	m	struct:StructPall
NActivesSink_t	DataStructures.h	/^    unsigned long int    NActivesSink_t;  \/\/ The total number of active "Star" particles.$/;"	m	struct:StructPall
NActivesStars	DataStructures.h	/^    unsigned long int    NActivesStars; \/\/ The number of active "Star" particles.$/;"	m	struct:StructPall
NActivesStars_t	DataStructures.h	/^    unsigned long int    NActivesStars_t; \/\/ The total number of active "Star" particles.$/;"	m	struct:StructPall
NActives_t	DataStructures.h	/^    unsigned long int    NActives_t;      \/\/ The total number of active particles.$/;"	m	struct:StructPall
NAdditionUnit	config.h	43;"	d
NBCache	DataStructures.c	/^StructNBCache *NBCache;$/;"	v
NBCacheForEffSA	CalcEffectiveSurfaceArea.c	/^} *NBCacheForEffSA = NULL, *CachedDataForEffSA = NULL;$/;"	v	typeref:struct:StructNBCacheForEffSA	file:
NBImported	HydroAcc.c	/^} *NBLocal,*NBImported;$/;"	v	typeref:struct:StructNB	file:
NBImportedCache	DataStructures.c	/^StructNBCache *NBImportedCache;$/;"	v
NBLength	HydroAcc.c	/^static int NBLength = 0;$/;"	v	file:
NBLocal	HydroAcc.c	/^} *NBLocal,*NBImported;$/;"	v	typeref:struct:StructNB	file:
NCOOL	Cooling.c	909;"	d	file:
NCOOLINGCURVE	Cooling.c	910;"	d	file:
NContactedDomains	HIIregion.c	/^static int NContactedDomains;$/;"	v	file:
NContactedDomains	HydroKernel.c	/^static int NContactedDomains;$/;"	v	file:
NDM	DataStructures.h	/^    unsigned long int    NDM;$/;"	m	struct:StructPall
NDM_t	DataStructures.h	/^    unsigned long int    NDM_t;$/;"	m	struct:StructPall
NDM_t	FOF.c	/^    unsigned long int    NDM_t;$/;"	m	struct:StructFOFHeader	file:
NEUTRON_MASS	Constants.h	28;"	d
NEUTRON_MASS_CGS	Constants.h	36;"	d
NEWTON_SI_CGS	Constants.h	5;"	d
NEffSAExportRecv	CalcEffectiveSurfaceArea.c	/^static int NEffSAExportRecv = 0;$/;"	v	file:
NEffSAExportSendAllocated	CalcEffectiveSurfaceArea.c	/^static int NEffSAExportSendAllocated = 0;$/;"	v	file:
NExplosionLog	CalcEffectiveSurfaceArea.c	/^int NExplosionLog;$/;"	v
NExportImportLogFirst	HydroAcc.c	/^static bool NExportImportLogFirst = true;$/;"	v	file:
NExportLog	HydroAcc.c	/^static int *NExportLog;$/;"	v	file:
NExportThisTimeNew2	SizeDetermination.c	/^        int NExportThisTimeNew2[NProcs];$/;"	v
NFOFCrit	FOF.c	5;"	d	file:
NFOFGroups	DataStructures.c	/^int NFOFGroups;$/;"	v
NGasParticles_AGN	main.c	/^int NGasParticles_AGN;$/;"	v
NImportLog	HydroAcc.c	/^static int *NImportLog;$/;"	v	file:
NImportThisTimeNew2	SizeDetermination.c	/^        int NImportThisTimeNew2[NProcs];$/;"	v
NONE	Astro.h	30;"	d
NORM	Astro.h	17;"	d
NORM2	Astro.h	18;"	d
NSMCount	DataStructures.h	/^    int       NSMCount;         \/\/ Number of NSM event.$/;"	m	struct:StructPstar_tag
NSMCount	StructuresForIO.h	/^    int NSMCount;$/;"	m	struct:StructPstarIOCompact
NSMCount	StructuresForIO.h	/^    int NSMCount;$/;"	m	struct:StructPstarIOCompactDouble
NSMCount	StructuresForIO.h	/^    int NSMCount;$/;"	m	struct:StructPstarIOCompactMix
NSMCount	StructuresForIO.h	/^    int NSMCount;$/;"	m	struct:StructPstarIOLean
NTime	Run.c	/^    NTime,$/;"	e	enum:__anon3	file:
NTypes	config.h	/^    NTypes,$/;"	e	enum:__anon11
Name	EstimateXFe.c	/^	 char Name[100];$/;"	m	struct:StructAverageElementMass	file:
Name	EstimateXFe.c	/^	 char Name[100];$/;"	m	struct:StructFittingCoef	file:
Name	EstimateXFe.c	/^	 char Name[100];$/;"	m	struct:StructSolarAbundancePattern	file:
Nbin	TestRuns.c	5463;"	d	file:
Nboards	ForceGRAPE.c	/^static int Nboards;$/;"	v	file:
Ndeg	main.c	/^static double Ndeg;$/;"	v	file:
Ne	ReadGadgetFormat.c	/^  float  Rho, U, Temp, Ne;$/;"	m	struct:Gadget_particle_data	file:
NeighborIndexCmp	TestRuns.c	/^static int NeighborIndexCmp(const void *_x, const void *_y){$/;"	f	file:
NeighborKeepSize	HydroAcc.c	355;"	d	file:
NeighborListOverFlow	Errors.h	23;"	d
Neighbors	Delayed.c	/^static int Neighbors[MaxNeighborSize];$/;"	v	file:
Neighbors	FOF.c	/^static int Neighbors[MaxNeighborSize];$/;"	v	file:
Neighbors	HydroAcc.c	/^    int Neighbors[NeighborKeepSize];$/;"	m	struct:StructNB	file:
Neighbors	SizeDetermination.h	/^    int *Neighbors;$/;"	m	struct:StructGetLocalNeighborList
Nend	main.c	/^static int Nstart,Nend;$/;"	v	file:
NewSimulation	config.h	/^    NewSimulation,$/;"	e	enum:__anon12
Next	DataStructures.h	/^	int Next;$/;"	m	struct:StructGravityNode
Next	DataStructures.h	/^	int Next;$/;"	m	struct:StructHydroNode
Next	DataStructures.h	/^	int Next;$/;"	m	struct:StructYoungStarNode
Next	DataStructures.h	/^    StructPbodyptr Next; \/\/ <TMP> <LEAN>$/;"	m	struct:StructPbody_tag
Next	DataStructures.h	/^    StructPhydroptr Next;   \/\/ <TMP> <LEAN>$/;"	m	struct:StructPhydro_tag
Next	DataStructures.h	/^    StructPsinkptr  Next;   \/\/ <TMP> <LEAN> $/;"	m	struct:StructPsink_tag
Next	DataStructures.h	/^    StructPstarptr  Next;   \/\/ <TMP> <LEAN>$/;"	m	struct:StructPstar_tag
Next	DataStructures.h	/^    int Next;$/;"	m	struct:StructFOF
Next	SinkParticle.c	/^    int Next;$/;"	m	struct:StructSinkFOF	file:
NextFUVTreeNode	FUV.c	/^static int NextFUVTreeNode(const int NodeID){$/;"	f	file:
NextGravityNode	PlantGravityTree.c	/^static int NextGravityNode(const int NodeID){$/;"	f	file:
NextHydroNode	PlantHydroTree.c	/^static int NextHydroNode(const int NodeID){$/;"	f	file:
NextHydroNodeForEffSA	CalcEffectiveSurfaceArea.c	/^static int NextHydroNodeForEffSA(const int NodeID){$/;"	f	file:
NextHydroNodeImported	PlantHydroTreeImported.c	/^static int NextHydroNodeImported(const int NodeID){$/;"	f	file:
NextLETNode	ForceParallelTreeGRAPE.c	/^static int NextLETNode(const int NodeID){$/;"	f	file:
NextLeaf	DataStructures.h	/^    unsigned long int    NextLeaf;   \/\/ <TMP> <LEAN> Next Leaf for Tree (Grav). This indicates NextLeaf in Pbody[NextLeaf].$/;"	m	struct:StructPbody_tag
NextLeaf	DataStructures.h	/^    unsigned long int NextLeaf; \/\/ <TMP> <LEAN> Next Leaf for Tree (Neighbor Search).$/;"	m	struct:StructPhydro_tag
NextStellarNode	PlantStellarTree.c	/^static int NextStellarNode(const int NodeID){$/;"	f	file:
NextUpdateEra	DataStructures.h	/^    double    NextUpdateEra;     \/\/ <LEAN> The next update timing in Era. This variable is used when the HydroTimeStepLimiterFlag is true.$/;"	m	struct:StructPhydro_tag
NextUpdateEra	StructuresForIO.h	/^    double NextUpdateEra;$/;"	m	struct:StructPhydroIOCompactDouble
NextUpdateEra	StructuresForIO.h	/^    float NextUpdateEra;$/;"	m	struct:StructPhydroIOCompact
NextUpdateEra	StructuresForIO.h	/^    float NextUpdateEra;$/;"	m	struct:StructPhydroIOCompactMix
NextYoungStarNode	PlantYoungStarTree.c	/^static int NextYoungStarNode(const int NodeID){$/;"	f	file:
Nfact	SetUpTestRun.c	6538;"	d	file:
Ngas	ReadGadgetFormat.c	/^int     NumPart, Ngas;$/;"	v
Ngas	TestRuns.c	/^static int Ngas;$/;"	v	file:
Nhydro	DataStructures.h	/^    unsigned long int    Nhydro;$/;"	m	struct:StructPall
Nhydro	TestRuns.c	/^int Nhydro; $/;"	v
Nhydro_t	DataStructures.h	/^    unsigned long int    Nhydro_t;$/;"	m	struct:StructPall
Nhydro_t	FOF.c	/^    unsigned long int    Nhydro_t;$/;"	m	struct:StructFOFHeader	file:
Ninit	GRAPEEmulator.c	/^static int Ninit = 0;$/;"	v	file:
Niteration_for_debug	SizeDetermination.c	/^static int Niteration_for_debug = 0;$/;"	v	file:
Nlist	CalcEffectiveSurfaceArea.c	/^    int     Nlist;$/;"	m	struct:StructEffSAResult	file:
Nlist	DataStructures.h	/^    unsigned int Nlist;      \/\/ <LEAN>$/;"	m	struct:StructPhydro_tag
Nlist	Delayed.c	/^    int Nlist;$/;"	m	struct:StructDelayedFBActiveStars	file:
Nlist	HIIregion.c	/^    int       Nlist;   \/\/ Nlist.$/;"	m	struct:StructHIIImport	file:
Nlist	HIIregion.c	/^    int Nlist;$/;"	m	struct:StructActiveHIIParticle	file:
Nlist	HIIregion.c	/^    int Nlist;$/;"	m	struct:StructHIILocalInfo	file:
Nlist	HydroAcc.c	/^    int Nlist;$/;"	m	struct:StructNB	file:
Nlist	HydroKernel.c	/^    int       Nlist;   \/\/ Nlist.$/;"	m	struct:StructHydroKernelImport	file:
Nlist	HydroKernel.c	/^    int Nlist; \/\/ Number of neighbors.$/;"	m	struct:StructActiveHydroParticle	file:
Nlist	HydroMisc.h	/^    int       Nlist;   \/\/ Nlist.$/;"	m	struct:StructHydroDensityImport
Nlist	HydroMisc.h	/^    int       Nlist;$/;"	m	struct:StructHydroAccImport
Nlist	SinkParticle.c	/^    int       Nlist;$/;"	m	struct:StructSinkPressureForces	file:
Nlist	SizeDetermination.c	/^    int       Nlist;   \/\/ Nlist.$/;"	m	struct:StructCSImport	file:
Nlist	SizeDetermination.c	/^    int Nlist; \/\/ Number of neighbors.$/;"	m	struct:StructActiveParticle	file:
Nlist	SizeDetermination.c	/^    int Nlist;$/;"	m	struct:StructCSHIILocalInfo	file:
Nlist	SizeDetermination.c	/^    int Nlist;$/;"	m	struct:StructCSHydroLocalInfo	file:
Nlist	SizeDetermination.c	/^    int Nlist;$/;"	m	struct:StructCSRadiationPressureLocalInfo	file:
Nlist	SizeDetermination.c	/^    int Nlist;$/;"	m	struct:StructCSStellarFeedbackLocalInfo	file:
Nlist	SizeDetermination.c	/^    int Nlist;$/;"	m	struct:StructCSStellarWindLocalInfo	file:
Nlist	SizeDetermination.h	/^    int Nlist;$/;"	m	struct:StructGetLocalNeighborList
Nlist	StellarFeedback.c	/^    int    Nlist; \/\/ Nlist.$/;"	m	struct:StructStellarFeedbackImport	file:
Nlist	StellarFeedback.c	/^    int Nlist;$/;"	m	struct:StructStellarFeedbackLocalInfo	file:
Nlist	StellarFeedback.h	/^    int Nlist; \/\/ Number of neighbors.$/;"	m	struct:StructActiveStellarFeedbackParticle
Nlist	StructuresForIO.h	/^    unsigned int Nlist;$/;"	m	struct:StructPhydroIOCompact
Nlist	StructuresForIO.h	/^    unsigned int Nlist;$/;"	m	struct:StructPhydroIOCompactDouble
Nlist	StructuresForIO.h	/^    unsigned int Nlist;$/;"	m	struct:StructPhydroIOCompactMix
NnbSort	SizeDetermination.c	/^static int NnbSort;$/;"	v	file:
NoLocalSink	SizeDetermination.c	/^    bool      NoLocalSink;$/;"	m	struct:StructCSImportHydroParticle	file:
NoLocalSink	SizeDetermination.c	/^    bool   NoLocalSink;$/;"	m	struct:StructCSActiveHydroParticle	file:
NoLocalSink	SizeDetermination.c	/^    bool   NoLocalSink;$/;"	m	struct:StructCSHydroLocalInfo	file:
NoSplit	ParticleSplitting.c	/^    NoSplit,$/;"	e	enum:SplitColor	file:
NodeID	SinkParticle.c	/^    int NodeID;         \/\/ The node ID of the target sink particle.$/;"	m	struct:StructHydroSinkFlags	file:
NodeID	SinkParticle.c	/^    int NodeID;         \/\/ The node ID of the target sink particle.$/;"	m	struct:StructSinkSinkFlags	file:
NodeID	SinkParticle.c	/^    int NodeID;         \/\/ The node ID of the target sink particle.$/;"	m	struct:StructSinkSinkFlags2	file:
Npipes	ForceGRAPE.c	/^static int Npipes;$/;"	v	file:
Npipes	ForceParallelTreeGRAPE.c	/^static int Npipes;$/;"	v	file:
Npm	DataStructures.h	/^    unsigned int Npm; $/;"	m	struct:StructPall
Ns	DataStructures.h	/^    unsigned int Ns;$/;"	m	struct:StructPall
Nsink	DataStructures.h	/^    unsigned long int    Nsink;$/;"	m	struct:StructPall
Nsink_t	DataStructures.h	/^    unsigned long int    Nsink_t;$/;"	m	struct:StructPall
Nstar	TestRuns.c	/^static int Nstar;$/;"	v	file:
Nstars	DataStructures.h	/^    unsigned long int    Nstars;$/;"	m	struct:StructPall
Nstars	TestRuns.c	/^int Nstars;$/;"	v
Nstars_t	DataStructures.h	/^    unsigned long int    Nstars_t;$/;"	m	struct:StructPall
Nstars_t	FOF.c	/^    unsigned long int    Nstars_t;$/;"	m	struct:StructFOFHeader	file:
Nstart	main.c	/^static int Nstart,Nend;$/;"	v	file:
NthChildren	DataStructures.h	/^    short   NthChildren;$/;"	m	struct:StructPstar_tag
NthChildren	FOF.c	/^    short NthChildren;$/;"	m	struct:StructFOFIDSort	file:
NthChildren	SetUpTestRun.c	/^    short   NthChildren;$/;"	m	struct:StructStars	file:
NthChildren	StructuresForIO.h	/^    short NthChildren;$/;"	m	struct:StructPstarIOCompact
NthChildren	StructuresForIO.h	/^    short NthChildren;$/;"	m	struct:StructPstarIOCompactDouble
NthChildren	StructuresForIO.h	/^    short NthChildren;$/;"	m	struct:StructPstarIOCompactMix
NthChildren	StructuresForIO.h	/^    short NthChildren;$/;"	m	struct:StructPstarIOLean
Ntotal	DataStructures.h	/^    unsigned long int    Ntotal;$/;"	m	struct:StructPall
Ntotal	PreDecomposition.c	/^    int     Ntotal;     $/;"	m	struct:StructDecomposition	file:
Ntotal_t	DataStructures.h	/^    unsigned long int    Ntotal_t;$/;"	m	struct:StructPall
Ntotal_t	FOF.c	/^    unsigned long int    Ntotal_t;$/;"	m	struct:StructFOFHeader	file:
NumPart	ReadGadgetFormat.c	/^int     NumPart, Ngas;$/;"	v
NumProcs	DataStructures.h	/^    int NumProcs;$/;"	m	struct:StructPall
Number	DataStructures.h	/^    int Number;$/;"	m	struct:StructFOFCatalog
Number	SinkParticle.c	/^    int Number;$/;"	m	struct:StructSinkFOFCatalog	file:
NumberCounter	SetUpTestRun.c	/^void NumberCounter(int Numbers[], char fname[]){$/;"	f
NumberDensity	CalcEffectiveSurfaceArea.c	/^    double  NumberDensity;$/;"	m	struct:StructEffSAExport	file:
NumberDensity	CalcEffectiveSurfaceArea.c	/^    double NumberDensity;     \/\/ Number density$/;"	m	struct:StructNBCacheForEffSA	file:
NumberDensity	CalcEffectiveSurfaceArea.c	/^    double NumberDensity;$/;"	m	struct:StructEffSAInput	file:
NumberDensity	DataStructures.h	/^    double    NumberDensity; \/\/ <LEAN> Number density$/;"	m	struct:StructPhydro_tag
NumberDensity	HydroAcc.c	/^    double NumberDensity; $/;"	m	struct:StructHydroAccCorrectEnegyDensityGradh	file:
NumberDensity	HydroMisc.h	/^    double NumberDensity;$/;"	m	struct:StructHydroDensityImport
NumberDensity	SizeDetermination.c	/^    double NumberDensity;$/;"	m	struct:StructCSActiveSNParticle	file:
NumberDensity	SizeDetermination.c	/^    double NumberDensity;$/;"	m	struct:StructCSActiveSWParticle	file:
NumberDensity	SizeDetermination.c	/^    double NumberDensity;$/;"	m	struct:StructCSImportSNParticle	file:
NumberDensity	SizeDetermination.c	/^    double NumberDensity;$/;"	m	struct:StructCSImportSWParticle	file:
NumberDensity	SizeDetermination.c	/^    double NumberDensity;$/;"	m	struct:StructCSStellarFeedbackLocalInfo	file:
NumberDensity	SizeDetermination.c	/^    double NumberDensity;$/;"	m	struct:StructCSStellarWindLocalInfo	file:
NumberDensity	StellarFeedback.c	/^    double NumberDensity;$/;"	m	struct:StructEnergyHeavyElements	file:
NumberDensity	StellarFeedback.h	/^    double NumberDensity;$/;"	m	struct:StructActiveStellarFeedbackParticle
NumberDensity	StructuresForIO.h	/^    double NumberDensity;$/;"	m	struct:StructPhydroIOCompactDouble
NumberDensity	StructuresForIO.h	/^    float NumberDensity;$/;"	m	struct:StructPhydroIOCompact
NumberDensity	StructuresForIO.h	/^    float NumberDensity;$/;"	m	struct:StructPhydroIOCompactMix
NumberDensity	TestRuns.c	/^    double NumberDensity; \/\/Number density$/;"	m	struct:StructECParams	file:
NumberofAbsorbedParticles	DataStructures.h	/^    int     NumberofAbsorbedParticles;    \/\/ The number of absorbed gas particles.$/;"	m	struct:StructPsink_tag
NumberofAbsorbedParticles	SinkParticle.c	/^static int NumberofAbsorbedParticles = 0;$/;"	v	file:
NumberofAbsorbedParticles	StructuresForIO.h	/^    int NumberofAbsorbedParticles;$/;"	m	struct:StructPsinkIOCompact
NumberofAbsorbedParticles	StructuresForIO.h	/^    int NumberofAbsorbedParticles;$/;"	m	struct:StructPsinkIOCompactDouble
NumberofAbsorbedParticles	StructuresForIO.h	/^    int NumberofAbsorbedParticles;$/;"	m	struct:StructPsinkIOCompactMix
NumberofAbsorbedParticles	StructuresForIO.h	/^    int NumberofAbsorbedParticles;$/;"	m	struct:StructPsinkIOLean
NumberofActiveLeaves	DataStructures.h	/^	int	NumberofActiveLeaves; \/\/ Number of `active' particles in this node. $/;"	m	struct:StructGravityNode
NumberofActiveLeaves	DataStructures.h	/^	int	NumberofActiveLeaves; \/\/ Number of `active' particles in this node. $/;"	m	struct:StructHydroNode
NumberofActiveLeaves	DataStructures.h	/^	int	NumberofActiveLeaves; \/\/ Number of `active' particles in this node. $/;"	m	struct:StructYoungStarNode
NumberofAllocatedFUVTreeResultCache	FUV.c	/^static int NumberofAllocatedFUVTreeResultCache = 0;$/;"	v	file:
NumberofAllocatedLeaves	DataStructures.h	/^	int	NumberofAllocatedLeaves;      \/\/ Maximum allocated memory for *Leaves.$/;"	m	struct:StructHydroRoot_tag
NumberofAllocatedLeaves	DataStructures.h	/^	int	NumberofAllocatedLeaves;   \/\/ Maximum allocated memory for *Leaves.$/;"	m	struct:StructGravityRoot_tag
NumberofAllocatedLeaves	DataStructures.h	/^	int	NumberofAllocatedLeaves;   \/\/ Maximum allocated memory for *Leaves.$/;"	m	struct:StructYoungStarRoot_tag
NumberofAllocatedLeaves	PlantGravityTree.c	/^static int NumberofAllocatedLeaves = 0;$/;"	v	file:
NumberofAllocatedLeaves	PlantHydroTree.c	/^static int NumberofAllocatedLeaves = 0;$/;"	v	file:
NumberofAllocatedLeaves	PlantHydroTreeImported.c	/^static int NumberofAllocatedLeaves = 0;$/;"	v	file:
NumberofAllocatedLeaves	PlantStellarTree.c	/^static int NumberofAllocatedLeaves = 0;$/;"	v	file:
NumberofAllocatedLeaves	PlantYoungStarTree.c	/^static int NumberofAllocatedLeaves = 0;$/;"	v	file:
NumberofAllocatedLeavesImport	FUV.c	/^static int NumberofAllocatedLeavesImport = 0;$/;"	v	file:
NumberofAllocatedLeavesImport	ForceParallelTreeGRAPE.c	/^static int NumberofAllocatedLeavesImport = 0;$/;"	v	file:
NumberofAllocatedNodes	DataStructures.h	/^	int	NumberofAllocatedNodes;       \/\/ Whole allocated nodes for this tree.$/;"	m	struct:StructHydroRoot_tag
NumberofAllocatedNodes	DataStructures.h	/^	int	NumberofAllocatedNodes;    \/\/ Whole allocated nodes for this tree.$/;"	m	struct:StructGravityRoot_tag
NumberofAllocatedNodes	DataStructures.h	/^	int	NumberofAllocatedNodes;    \/\/ Whole allocated nodes for this tree.$/;"	m	struct:StructYoungStarRoot_tag
NumberofBufferExportRecvAllocated	DataStructures.c	/^int NumberofBufferExportRecvAllocated;$/;"	v
NumberofBufferExportSendAllocated	DataStructures.c	/^int *NumberofBufferExportSendAllocated;$/;"	v
NumberofBufferHydroInteractionFlagsAllocated	DataStructures.c	/^int NumberofBufferHydroInteractionFlagsAllocated;$/;"	v
NumberofBufferImportRecvAllocated	DataStructures.c	/^int *NumberofBufferImportRecvAllocated;$/;"	v
NumberofBufferImportSendAllocated	DataStructures.c	/^int NumberofBufferImportSendAllocated;$/;"	v
NumberofChildren	DataStructures.h	/^	short NumberofChildren;   \/\/ Number of child-node in this node.$/;"	m	struct:StructGravityNode
NumberofChildren	DataStructures.h	/^	short NumberofChildren;   \/\/ Number of child-node in this node.$/;"	m	struct:StructHydroNode
NumberofChildren	DataStructures.h	/^	short NumberofChildren;   \/\/ Number of child-node in this node.$/;"	m	struct:StructYoungStarNode
NumberofCurrentHydroActive	FUV.c	/^static int NumberofCurrentHydroActive = 0;$/;"	v	file:
NumberofDataSet_nLy	HIIregion.c	17;"	d	file:
NumberofFUVLeavesAllocated	FUV.c	/^static int NumberofFUVLeavesAllocated = 0;$/;"	v	file:
NumberofFieldAllocated	ForceParallelTreeGRAPE.c	/^static int NumberofFieldAllocated = 0;$/;"	v	file:
NumberofFieldAllocatedFUVFEEDBACK	FUV.c	/^static int NumberofFieldAllocatedFUVFEEDBACK = 0;$/;"	v	file:
NumberofHydroAccExportRecvLog	HydroAcc.c	/^static int NumberofHydroAccExportRecvLog;$/;"	v	file:
NumberofHydroAccExportRecvLogAllocated	HydroAcc.c	/^static int NumberofHydroAccExportRecvLogAllocated = 0;$/;"	v	file:
NumberofLETLeavesAllocated	ForceParallelTreeGRAPE.c	/^static int NumberofLETLeavesAllocated = 0;$/;"	v	file:
NumberofLeaves	DataStructures.h	/^	int	NumberofLeaves;               \/\/ Current number of used nodes.$/;"	m	struct:StructHydroRoot_tag
NumberofLeaves	DataStructures.h	/^	int	NumberofLeaves;            \/\/ Current number of used nodes.$/;"	m	struct:StructGravityRoot_tag
NumberofLeaves	DataStructures.h	/^	int	NumberofLeaves;            \/\/ Current number of used nodes.$/;"	m	struct:StructYoungStarRoot_tag
NumberofLeaves	DataStructures.h	/^	int NumberofLeaves;       \/\/ Number of particles in this node.$/;"	m	struct:StructGravityNode
NumberofLeaves	DataStructures.h	/^	int NumberofLeaves;       \/\/ Number of particles in this node.$/;"	m	struct:StructHydroNode
NumberofLeaves	DataStructures.h	/^	int NumberofLeaves;       \/\/ Number of particles in this node.$/;"	m	struct:StructYoungStarNode
NumberofLeavesInGroup	DataStructures.h	/^	int	NumberofLeavesInGroup;     \/\/ n_g for tree + grape.$/;"	m	struct:StructGravityRoot_tag
NumberofLeavesInGroup	DataStructures.h	/^	int	NumberofLeavesInGroup;     \/\/ n_g for tree + grape.$/;"	m	struct:StructYoungStarRoot_tag
NumberofLy	HIIregion.c	/^int NumberofLy = 0;$/;"	v
NumberofNodeCreationLimit	DataStructures.h	/^    int NumberofNodeCreationLimit;    \/\/ Maximum number of particles for the lowest node.$/;"	m	struct:StructHydroRoot_tag
NumberofNodeCreationLimit	DataStructures.h	/^    int NumberofNodeCreationLimit; \/\/ Maximum number of particles for the lowest node.$/;"	m	struct:StructGravityRoot_tag
NumberofNodeCreationLimit	DataStructures.h	/^    int NumberofNodeCreationLimit; \/\/ Maximum number of particles for the lowest node.$/;"	m	struct:StructYoungStarRoot_tag
NumberofNodes	DataStructures.h	/^	int	NumberofNodes;                \/\/ Whole allocated nodes for this tree.$/;"	m	struct:StructHydroRoot_tag
NumberofNodes	DataStructures.h	/^	int	NumberofNodes;             \/\/ Whole allocated nodes for this tree.$/;"	m	struct:StructGravityRoot_tag
NumberofNodes	DataStructures.h	/^	int	NumberofNodes;             \/\/ Whole allocated nodes for this tree.$/;"	m	struct:StructYoungStarRoot_tag
NumberofPCInteractions	main.c	/^long int NumberofPCInteractions;$/;"	v
NumberofPPInteractions	main.c	/^long int NumberofPPInteractions;$/;"	v
OBJDIR	Makefile	/^  OBJDIR  = .$/;"	m
OBJDIR	Makefile	/^OBJDIR    = .\/obj$/;"	m
OBJECTS	Makefile	/^OBJECTS   = $(addprefix $(OBJDIR)\/, $(notdir $(SOURCES:.c=.o)))$/;"	m
OFF	Astro.h	29;"	d
ON	Astro.h	28;"	d
Offset	PowderSnow.c	/^static unsigned long Offset = 1525860078344;$/;"	v	file:
Offset	TestRuns.c	1628;"	d	file:
OldUpdateAdaptiveSofteningFactor	Cosmological.c	/^void OldUpdateAdaptiveSofteningFactor(void){$/;"	f
Omega0	ReadGadgetFormat.c	/^  double   Omega0;$/;"	m	struct:Gadget_io_header_1	file:
OmegaB	DataStructures.h	/^    double OmegaB;      \/\/ OmegaB = rho_b\/rho_crit. $/;"	m	struct:StructPall
OmegaB	FOF.c	/^    double OmegaB;      \/\/ OmegaB = rho_b\/rho_crit. $/;"	m	struct:StructFOFHeader	file:
OmegaCDM	DataStructures.h	/^    double OmegaCDM;    \/\/ OmegaCDM = rho_cdm\/rho_crit.$/;"	m	struct:StructPall
OmegaCDM	FOF.c	/^    double OmegaCDM;    \/\/ OmegaCDM = rho_cdm\/rho_crit.$/;"	m	struct:StructFOFHeader	file:
OmegaL	DataStructures.h	/^    double OmegaL;      \/\/ OmegaL = 1.0 - OmegaM. $/;"	m	struct:StructPall
OmegaL	FOF.c	/^    double OmegaL;      \/\/ OmegaL = 1.0 - OmegaM. $/;"	m	struct:StructFOFHeader	file:
OmegaLambda	ReadGadgetFormat.c	/^  double   OmegaLambda;$/;"	m	struct:Gadget_io_header_1	file:
OmegaM	DataStructures.h	/^    double OmegaM;      \/\/ OmegaM = OmegaB + OmegaCDM.$/;"	m	struct:StructPall
OmegaM	FOF.c	/^    double OmegaM;      \/\/ OmegaM = OmegaB + OmegaCDM.$/;"	m	struct:StructFOFHeader	file:
Omega_b	SetUpTestRun.c	/^    float Omega_b;$/;"	m	struct:StructHeader	file:
Omega_l	SetUpTestRun.c	/^    float Omega_l;$/;"	m	struct:StructHeader	file:
Omega_m	SetUpTestRun.c	/^    float Omega_m;$/;"	m	struct:StructHeader	file:
OpeningAngle	DataStructures.h	/^	double OpeningAngle;$/;"	m	struct:StructGravityRoot_tag
OpeningAngle	DataStructures.h	/^	double OpeningAngle;$/;"	m	struct:StructYoungStarRoot_tag
OpeningAngleForTest	main.c	4335;"	d	file:
OrderingKey	DataStructures.h	/^    unsigned long long int OrderingKey; \/\/ <TMP> <LEAN> Key for ordering.$/;"	m	struct:StructPbody_tag
OrderingKey	DataStructures.h	/^    unsigned long long int OrderingKey; \/\/ Key for ordering.$/;"	m	struct:StructGravityNode
OrderingKey	DataStructures.h	/^    unsigned long long int OrderingKey; \/\/ Key for ordering.$/;"	m	struct:StructHydroNode
OutPut3DCollapseTest	SetUpTestRun.c	/^void OutPut3DCollapseTest(char *name){$/;"	f
OutPutASCIIDATA	IO.c	/^void OutPutASCIIDATA(void){$/;"	f
OutPutAllParticlesInASCIIFormat	SetUpTestRun.c	/^void OutPutAllParticlesInASCIIFormat(void){$/;"	f
OutPutBlastWaveAll	SetUpTestRun.c	/^void OutPutBlastWaveAll(char *name){$/;"	f
OutPutColdCollapse	SetUpTestRun.c	/^void OutPutColdCollapse(char *fname){$/;"	f
OutPutDarkMatter	SetUpTestRun.c	/^void OutPutDarkMatter(char *fname_dm){$/;"	f
OutPutDir	FOF.c	/^char OutPutDir[] = ".\/data\/FOF";$/;"	v
OutPutElliptical	main.c	/^void OutPutElliptical(void){$/;"	f
OutPutElliptical2Particles	main.c	/^void OutPutElliptical2Particles(void){$/;"	f
OutPutEllipticalMany	main.c	/^void OutPutEllipticalMany(const int Number){$/;"	f
OutPutFileNumber	DataStructures.h	/^    int OutPutFileNumber;$/;"	m	struct:StructPall
OutPutInterval	DataStructures.h	/^    double OutPutInterval;$/;"	m	struct:StructPall
OutPutNFW	SetUpTestRun.c	/^void OutPutNFW(void){$/;"	f
OutPutNavarroWhite	SetUpTestRun.c	/^void OutPutNavarroWhite(char *fname_hydro, char *fname_star, char *fname_dm){$/;"	f
OutPutShockTube	SetUpTestRun.c	/^void OutPutShockTube(char *fname){$/;"	f
OutPutZeroPlane	SetUpTestRun.c	/^void OutPutZeroPlane(char *name){$/;"	f
OutputParameterLogs	ParameterLogs.c	/^void OutputParameterLogs(void){$/;"	f
OutputParticleDistribution	TestRuns.c	/^static void OutputParticleDistribution(const int flag){$/;"	f	file:
OverDensityZ	DataStructures.h	/^    double OverDensityZ; \/\/ OverDensity at the given redshift. \/\/ In SCDM, this value is fixed at 178.$/;"	m	struct:StructPall
OverMaxIterationTimes	HydroKernel.c	/^static bool OverMaxIterationTimes = false;$/;"	v	file:
OverMaxIterationTimes	SizeDetermination.c	/^static bool OverMaxIterationTimes = false;$/;"	v	file:
OverMaxIterationTimes	StellarFeedback.c	/^static bool OverMaxIterationTimes = false;$/;"	v	file:
OverlapActiveDomainHIIradius	HIIregion.c	/^static inline bool __attribute__((always_inline)) OverlapActiveDomainHIIradius(double Pos[restrict], const double h, const int NodeID){ $/;"	f	file:
OverlapDomainDelayed	Delayed.c	/^static inline bool OverlapDomainDelayed(double Pos[restrict], const double h, const int NodeID){$/;"	f	file:
OverlapDomainDensity	HydroDensity.c	/^static inline bool __attribute__((always_inline)) OverlapDomainDensity(double Pos[restrict], const double h, const int NodeID){$/;"	f	file:
OverlapDomainGather	HydroAcc.c	/^static inline bool __attribute__((always_inline)) OverlapDomainGather(double Pos[restrict], const double h, const int DomainID){$/;"	f	file:
OverlapDomainHIIRadius	HIIregion.c	/^static inline bool __attribute__((always_inline)) OverlapDomainHIIRadius(double Pos[restrict], const double h, const int NodeID){ $/;"	f	file:
OverlapDomainKernel	HydroKernel.c	/^static inline bool __attribute__((always_inline)) OverlapDomainKernel(double Pos[restrict], const double h, const int NodeID){ $/;"	f	file:
OverlapDomainStellarFeedback	StellarFeedback.c	/^static inline bool __attribute__((always_inline)) OverlapDomainStellarFeedback(double Pos[restrict], const double h, const int NodeID){ $/;"	f	file:
OverwriteNeighborInfo	HydroKernel.c	/^static inline void OverwriteNeighborInfo($/;"	f	file:
PC_CGS	Constants.h	99;"	d
PERIODIC_RUN	reconfig.h	140;"	d
PERIODIC_RUN	reconfig.h	185;"	d
PERIODIC_RUN	reconfig.h	232;"	d
PERIODIC_RUN	reconfig.h	47;"	d
PERIODIC_RUN	reconfig.h	747;"	d
PERIODIC_RUN	reconfig.h	866;"	d
PERIODIC_RUN	reconfig.h	930;"	d
PI	Astro.h	32;"	d
PLANK_HBAR	Constants.h	15;"	d
PLANK_HBAR_CGS	Constants.h	20;"	d
PREDECOMPOSITION_MINIMUM_SAMPLING_CONTROL_FACTOR	PreDecomposition.c	348;"	d	file:
PRESNFLAG	main.c	/^int PRESNFLAG;$/;"	v
PRESN_DURATION	main.c	/^double PRESN_DURATION; \/\/ in year.$/;"	v
PRESN_SNR	main.c	/^double PRESN_SNR; \/\/ in Msun\/year.$/;"	v
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	1002;"	d
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	122;"	d
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	144;"	d
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	189;"	d
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	240;"	d
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	281;"	d
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	332;"	d
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	372;"	d
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	397;"	d
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	429;"	d
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	464;"	d
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	505;"	d
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	51;"	d
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	557;"	d
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	596;"	d
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	635;"	d
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	674;"	d
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	718;"	d
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	777;"	d
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	821;"	d
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	84;"	d
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	870;"	d
PRINT_LOG_TIMESTEP_IN_PHYSICAL_UNIT	reconfig.h	934;"	d
PROTON_CHARGE	Constants.h	27;"	d
PROTON_CHARGE_CGS	Constants.h	35;"	d
PROTON_MASS	Constants.h	26;"	d
PROTON_MASS_CGS	Constants.h	34;"	d
Pall	DataStructures.c	/^struct  StructPall     Pall;$/;"	v	typeref:struct:StructPall
ParallelDumpAllData	IO.c	/^void ParallelDumpAllData(char fname[]){$/;"	f
ParallelReadAllData	IO.c	/^void ParallelReadAllData(void){$/;"	f
ParallelReadWriteAllData	IO.c	/^static void ParallelReadWriteAllData(void){$/;"	f	file:
ParallelTreeNew	ForceTree.c	/^void ParallelTreeNew(void){$/;"	f
ParallelWriteAllData	IO.c	/^void ParallelWriteAllData(char fname[]){$/;"	f
ParallelWriteAllDataASCIIFormat	IO.c	/^void ParallelWriteAllDataASCIIFormat(char fname[]){$/;"	f
ParallelWriteAllDataCompactDoubleIO	IO.c	/^static void ParallelWriteAllDataCompactDoubleIO(FILE *fp){$/;"	f	file:
ParallelWriteAllDataCompactIO	IO.c	/^static void ParallelWriteAllDataCompactIO(FILE *fp){$/;"	f	file:
ParallelWriteAllDataCompactMixIO	IO.c	/^static void ParallelWriteAllDataCompactMixIO(FILE *fp){$/;"	f	file:
ParallelWriteAllDataFullIO	IO.c	/^static void ParallelWriteAllDataFullIO(FILE *fp){$/;"	f	file:
ParallelWriteAllDataLeanIO	IO.c	/^static void ParallelWriteAllDataLeanIO(FILE *fp){$/;"	f	file:
Parent	DataStructures.h	/^	int Parent;$/;"	m	struct:StructGravityNode
Parent	DataStructures.h	/^	int Parent;$/;"	m	struct:StructHydroNode
Parent	DataStructures.h	/^	int Parent;$/;"	m	struct:StructYoungStarNode
ParentGlobalID	DataStructures.h	/^    unsigned long int   ParentGlobalID; \/\/ Global ID of parent particles.$/;"	m	struct:StructPsink_tag
ParentGlobalID	DataStructures.h	/^    unsigned long int   ParentGlobalID; \/\/ Global ID of parent particles.$/;"	m	struct:StructPstar_tag
ParentGlobalID	SetUpTestRun.c	/^    unsigned long int   ParentGlobalID;$/;"	m	struct:StructStars	file:
ParentGlobalID	StructuresForIO.h	/^    unsigned long int ParentGlobalID;$/;"	m	struct:StructPsinkIOCompact
ParentGlobalID	StructuresForIO.h	/^    unsigned long int ParentGlobalID;$/;"	m	struct:StructPsinkIOCompactDouble
ParentGlobalID	StructuresForIO.h	/^    unsigned long int ParentGlobalID;$/;"	m	struct:StructPsinkIOCompactMix
ParentGlobalID	StructuresForIO.h	/^    unsigned long int ParentGlobalID;$/;"	m	struct:StructPsinkIOLean
ParentGlobalID	StructuresForIO.h	/^    unsigned long int ParentGlobalID;$/;"	m	struct:StructPstarIOCompact
ParentGlobalID	StructuresForIO.h	/^    unsigned long int ParentGlobalID;$/;"	m	struct:StructPstarIOCompactDouble
ParentGlobalID	StructuresForIO.h	/^    unsigned long int ParentGlobalID;$/;"	m	struct:StructPstarIOCompactMix
ParentGlobalID	StructuresForIO.h	/^    unsigned long int ParentGlobalID;$/;"	m	struct:StructPstarIOLean
Parity	Astro.h	15;"	d
ParticleAbsorption	SinkParticle.c	/^static inline void __attribute__((always_inline)) ParticleAbsorption(const int leaf_sink, const double Pos[restrict], const double Vel[restrict], const double Mass, double Elements[], const int Type){$/;"	f	file:
ParticleDataArrayConsistencyError	Errors.h	10;"	d
ParticleDistributionGenetator	SetUpTestRun.c	/^void ParticleDistributionGenetator(int number, unsigned long int seed){$/;"	f
ParticleDistributions	main.c	/^static void ParticleDistributions(char basename[]){$/;"	f	file:
ParticleDistributionsForKH	main.c	/^static void ParticleDistributionsForKH(char basename[]){$/;"	f	file:
ParticleNumberBase	PreDecomposition.c	6;"	d	file:
ParticleRemoverArbitraryCriteria	ParticleAddRemoveOperation.c	/^void ParticleRemoverArbitraryCriteria(bool (*criteria)(const int index)){$/;"	f
ParticleSampling	PreDecomposition.c	/^static int ParticleSampling(void){$/;"	f	file:
ParticleSamplingEnsemble	PreDecomposition.c	/^static int ParticleSamplingEnsemble(const int Element){$/;"	f	file:
ParticleSamplingPositionOnly	PreDecomposition.c	/^static int ParticleSamplingPositionOnly(const int Element, double Pos[restrict][3]){$/;"	f	file:
ParticleSamplingWithInteractionList	PreDecomposition.c	/^static int ParticleSamplingWithInteractionList(const int Element, double Pos[restrict][3], int InteractionList[]){$/;"	f	file:
ParticleSamplingXYZ	PreDecomposition.c	/^static int ParticleSamplingXYZ(const int Element, struct StructPreDecomposition Send[]){$/;"	f	file:
ParticleSampling_	PreDecomposition.c	/^static int ParticleSampling_(const int NSample){$/;"	f	file:
ParticleSplitting	ParticleSplitting.c	/^void ParticleSplitting(void){$/;"	f
ParticlesExchangeLimited	Decomposition.c	/^static void ParticlesExchangeLimited(void){$/;"	f	file:
ParticlesExchangeLimitedNew	Decomposition.c	/^static void ParticlesExchangeLimitedNew(void){$/;"	f	file:
PathCoolingHeatingLog	Cooling.c	/^static char PathCoolingHeatingLog[] = ".\/CoolingHeatingLog"; $/;"	v	file:
PathCoolingHeatingLog	Heating.c	/^static char PathCoolingHeatingLog[] = ".\/CoolingHeatingLog"; $/;"	v	file:
Pbody	DataStructures.c	/^StructPbodyptr *Pbody;$/;"	v
PbodyElements	DataStructures.c	/^StructPbodyptr    PbodyElements = NULL;   \/\/ Linked List$/;"	v
PbodyElementsSize	DataStructures.c	/^unsigned int PbodyElementsSize = 0;$/;"	v
PbodyHydro	DataStructures.h	295;"	d
PbodyHydroAcc	DataStructures.h	301;"	d
PbodyHydroDiv	DataStructures.h	307;"	d
PbodyHydroDu	DataStructures.h	304;"	d
PbodyHydroDuCooling	DataStructures.h	305;"	d
PbodyHydroDuPrev	DataStructures.h	306;"	d
PbodyHydroKernel	DataStructures.h	297;"	d
PbodyHydroKernelPred	DataStructures.h	298;"	d
PbodyHydroRho	DataStructures.h	299;"	d
PbodyHydroRhoPred	DataStructures.h	300;"	d
PbodyHydroRot	DataStructures.h	308;"	d
PbodyHydroU	DataStructures.h	302;"	d
PbodyHydroUPred	DataStructures.h	303;"	d
PbodyHydroVelP	DataStructures.h	296;"	d
PbodyHydroVsig	DataStructures.h	309;"	d
PbodyHydroZ	DataStructures.h	310;"	d
PbodyHydroZII	DataStructures.h	311;"	d
PbodyHydroZIa	DataStructures.h	312;"	d
PbodyKeyCmp	StructureOperation.c	/^static int PbodyKeyCmp(const void *x, const void *y){$/;"	f	file:
PbodySink	DataStructures.h	321;"	d
PbodySinkAM	DataStructures.h	322;"	d
PbodySinkFormationTime	DataStructures.h	323;"	d
PbodySinkZ	DataStructures.h	324;"	d
PbodySinkZII	DataStructures.h	325;"	d
PbodySinkZIa	DataStructures.h	326;"	d
PbodySize	DataStructures.c	/^unsigned int PbodySize = 0;$/;"	v
PbodyStar	DataStructures.h	314;"	d
PbodyStarTypeII	DataStructures.h	318;"	d
PbodyStarTypeIa	DataStructures.h	319;"	d
PbodyStarZ	DataStructures.h	315;"	d
PbodyStarZII	DataStructures.h	316;"	d
PbodyStarZIa	DataStructures.h	317;"	d
Pej	StellarFeedback.c	/^    double Pej;$/;"	m	struct:StructEnergyHeavyElements	file:
PeriodicDistance	PeriodicWrapping.c	/^double PeriodicDistance(const double x1, const double x2, const int dim){$/;"	f
PeriodicWrapping	PeriodicWrapping.c	/^void PeriodicWrapping(void){$/;"	f
PeriodicWrappingi	PeriodicWrapping.c	/^void PeriodicWrappingi(double Pos[restrict]){$/;"	f
PhotonCount	HIIregion.c	/^    double    PhotonCount;    \/\/ Total absorbed photon number per sec.$/;"	m	struct:StructHIIImport	file:
PhotonCount	HIIregion.c	/^    double PhotonCount;$/;"	m	struct:StructActiveHIIParticle	file:
PhotonCount	HIIregion.c	/^    double PhotonCount;$/;"	m	struct:StructHIILocalInfo	file:
PhotonCount	SizeDetermination.c	/^    double    PhotonCount;    \/\/ Total absorbed photon number per sec.$/;"	m	struct:StructCSImport	file:
PhotonCount	SizeDetermination.c	/^    double    PhotonCount;    \/\/ Total absorbed photon number per sec.$/;"	m	struct:StructCSImportHIIParticle	file:
PhotonCount	SizeDetermination.c	/^    double PhotonCount;$/;"	m	struct:StructCSActiveHIIParticle	file:
PhotonCount	SizeDetermination.c	/^    double PhotonCount;$/;"	m	struct:StructCSHIILocalInfo	file:
PhotonCountDistMin	HIIregion.c	/^    double    PhotonCountDistMin;$/;"	m	struct:StructHIIImport	file:
PhotonCountDistMin	HIIregion.c	/^    double PhotonCountDistMin;$/;"	m	struct:StructActiveHIIParticle	file:
PhotonCountDistMin	HIIregion.c	/^    double PhotonCountDistMin;$/;"	m	struct:StructHIILocalInfo	file:
PhotonCountDistanceMin	SizeDetermination.c	/^    double    PhotonCountDistanceMin;$/;"	m	struct:StructCSImport	file:
PhotonCountDistanceMin	SizeDetermination.c	/^    double    PhotonCountDistanceMin;$/;"	m	struct:StructCSImportHIIParticle	file:
PhotonCountDistanceMin	SizeDetermination.c	/^    double PhotonCountDistanceMin;$/;"	m	struct:StructCSActiveHIIParticle	file:
PhotonCountDistanceMin	SizeDetermination.c	/^    double PhotonCountDistanceMin;$/;"	m	struct:StructCSHIILocalInfo	file:
Phydro	DataStructures.c	/^StructPhydroptr *Phydro;$/;"	v
PhydroAcc	DataStructures.h	494;"	d
PhydroActive	DataStructures.h	496;"	d
PhydroBody	DataStructures.h	490;"	d
PhydroElements	DataStructures.c	/^StructPhydroptr   PhydroElements = NULL;  \/\/ Linked List$/;"	v
PhydroElementsSize	DataStructures.c	/^unsigned int PhydroElementsSize = 0;$/;"	v
PhydroKeyCmp	StructureOperation.c	/^static int PhydroKeyCmp(const void *x, const void *y){$/;"	f	file:
PhydroMass	DataStructures.h	495;"	d
PhydroPos	DataStructures.h	491;"	d
PhydroPosP	DataStructures.h	492;"	d
PhydroSize	DataStructures.c	/^unsigned int PhydroSize = 0;$/;"	v
PhydroVel	DataStructures.h	493;"	d
PickUpHaloData	FOF.c	/^static void PickUpHaloData(const int index, const int FOFindex){$/;"	f	file:
PickupTargets	CalcEffectiveSurfaceArea.c	/^static void PickupTargets(const int NExplosion, struct StructActiveStellarFeedbackParticle *ActiveStellarFeedbackParticle){$/;"	f	file:
PlantFUVTree	FUV.c	/^static void PlantFUVTree(const int NumberofLeavesThisStep){$/;"	f	file:
PlantGravityTree	PlantGravityTree.c	/^void PlantGravityTree(void){$/;"	f
PlantHydroTree	PlantHydroTree.c	/^void PlantHydroTree(void){$/;"	f
PlantHydroTreeImported	PlantHydroTreeImported.c	/^void PlantHydroTreeImported(const int NumberofLeaves, struct StructHydroAccExport HydroAccExportRecv[restrict]){$/;"	f
PlantHydroTreeKernelMaxUpdate	PlantHydroTree.c	/^void PlantHydroTreeKernelMaxUpdate(void){$/;"	f
PlantHydroTreeUpdate	PlantHydroTree.c	/^void PlantHydroTreeUpdate(void){$/;"	f
PlantImportTreeForEffSA	CalcEffectiveSurfaceArea.c	/^static void PlantImportTreeForEffSA(const int NumberofLeaves, struct StructEffSAExport EffSAExportRecv[restrict]){$/;"	f	file:
PlantLET	ForceParallelTreeGRAPE.c	/^static void PlantLET(const int NumberofLeavesThisStep){$/;"	f	file:
PlantStellarTree	PlantStellarTree.c	/^void PlantStellarTree(void){$/;"	f
PlantStellarTreePartial	PlantStellarTree.c	/^void PlantStellarTreePartial(void){$/;"	f
PlantTreeForEffSA	CalcEffectiveSurfaceArea.c	/^static void PlantTreeForEffSA(const int NumberofLeaves, struct StructActiveStellarFeedbackParticle *ActiveStellarFeedbackParticle){ $/;"	f	file:
PlantYoungStarTree	PlantYoungStarTree.c	/^void PlantYoungStarTree(void){$/;"	f
PlotData	TestRuns.c	/^static void PlotData(void){$/;"	f	file:
Pos	CalcEffectiveSurfaceArea.c	/^    double  Pos[3];  \/\/ Position.$/;"	m	struct:StructEffSAExport	file:
Pos	CalcEffectiveSurfaceArea.c	/^    double Pos[3];            \/\/ Position of this leaf.$/;"	m	struct:StructNBCacheForEffSA	file:
Pos	CalcEffectiveSurfaceArea.c	/^    double Pos[3];$/;"	m	struct:StructEffSAInput	file:
Pos	DataStructures.h	/^	double	Pos[3];           \/\/ Center of this node.$/;"	m	struct:StructGravityNode
Pos	DataStructures.h	/^	double	Pos[3];           \/\/ Center of this node.$/;"	m	struct:StructHydroNode
Pos	DataStructures.h	/^	double	Pos[3];           \/\/ Center of this node.$/;"	m	struct:StructYoungStarNode
Pos	DataStructures.h	/^    double    Pos[3];       \/\/ <MIX> The position of the particle.$/;"	m	struct:StructPbody_tag
Pos	DataStructures.h	/^    double Pos; \/\/ center of the node $/;"	m	struct:StructInfoBiSection
Pos	DataStructures.h	/^    double Pos[3];            \/\/ Position of this leaf.$/;"	m	struct:StructNBCache_tag
Pos	DataStructures.h	/^    double Pos[3];$/;"	m	struct:StructFOFCatalog
Pos	DataStructures.h	/^    double Pos[3];$/;"	m	struct:StructGravityCache
Pos	DataStructures.h	/^    double Pos[3];$/;"	m	struct:StructYoungStarCache
Pos	Delayed.c	/^    double    Pos[3];   \/\/ Position.$/;"	m	struct:StructDelayedFBExport	file:
Pos	Delayed.c	/^    double Pos[3]; \/\/ Position.$/;"	m	struct:StructDelayedFBInjection	file:
Pos	FUV.c	/^    double Pos[3];$/;"	m	struct:StructFUVLeavesExportImport	file:
Pos	FUV.c	/^    double Pos[3];$/;"	m	struct:StructFUVTreeCache	file:
Pos	ForceDirect.c	/^    double Pos[3];$/;"	m	struct:StructForceExport	file:
Pos	ForceGRAPE.c	/^    double Pos[3];$/;"	m	struct:StructForceExport	file:
Pos	ForceParallelTreeGRAPE.c	/^    double Pos[3];$/;"	m	struct:StructLeavesExportImport	file:
Pos	ForceTree.c	/^    double Pos[3];$/;"	m	struct:StructForceExport	file:
Pos	HIIregion.c	/^    double    Pos[3];  \/\/ Position.$/;"	m	struct:StructHIIExport	file:
Pos	HIIregion.c	/^    double Pos[3];$/;"	m	struct:StructActiveHIIParticle	file:
Pos	HydroKernel.c	/^    double    Pos[3];  \/\/ Position.$/;"	m	struct:StructHydroKernelExport	file:
Pos	HydroMisc.h	/^    double    Pos[3];  \/\/ Position.$/;"	m	struct:StructHydroAccExport
Pos	HydroMisc.h	/^    double    Pos[3];  \/\/ Position.$/;"	m	struct:StructHydroDensityExport
Pos	IO.c	/^    float Pos[3];$/;"	m	struct:StructWrite4D2UBody	file:
Pos	PlantGravityTree.c	/^    double Pos[3];$/;"	m	struct:StructCachedData	file:
Pos	PlantHydroTree.c	/^    double Pos[3];$/;"	m	struct:StructCachedData	file:
Pos	PlantHydroTreeImported.c	/^    double Pos[3];$/;"	m	struct:StructCachedData	file:
Pos	PlantStellarTree.c	/^    double Pos[3];$/;"	m	struct:StructCachedData	file:
Pos	PlantYoungStarTree.c	/^    double Pos[3];$/;"	m	struct:StructCachedData	file:
Pos	PreDecomposition.c	/^    double  (*Pos)[3]; $/;"	m	struct:StructDecomposition	file:
Pos	PreDecomposition.c	/^    double  Pos[3];$/;"	m	struct:StructPreDecomposition	file:
Pos	PreDecomposition.c	/^    double Pos[3];$/;"	m	struct:StructPreDecompositionQsort	file:
Pos	ReadGadgetFormat.c	/^  float  Pos[3];$/;"	m	struct:Gadget_particle_data	file:
Pos	SetUpTestRun.c	/^    double Pos[3];$/;"	m	struct:StructIOKeisoku	file:
Pos	SetUpTestRun.c	/^    float Pos[3];$/;"	m	struct:StructDM	file:
Pos	SetUpTestRun.c	/^    float Pos[3];$/;"	m	struct:StructGas	file:
Pos	SetUpTestRun.c	/^    float Pos[3];$/;"	m	struct:StructReadGalactICSBody	file:
Pos	SetUpTestRun.c	/^    float Pos[3];$/;"	m	struct:StructReadGalactICSBodyFlag	file:
Pos	SetUpTestRun.c	/^    float Pos[3];$/;"	m	struct:StructStars	file:
Pos	SetUpTestRun.c	/^    float Pos[3];$/;"	m	struct:StructWriteCE	file:
Pos	SinkParticle.c	/^    double    Pos[3];  \/\/ Position.$/;"	m	struct:StructSinkPressureForces	file:
Pos	SinkParticle.c	/^    double  Pos[3];  \/\/ Positions.$/;"	m	struct:StructSinkCheckExport	file:
Pos	SinkParticle.c	/^    double  Pos[3];  \/\/ Positions.$/;"	m	struct:StructSinkExport	file:
Pos	SinkParticle.c	/^    double  Pos[3];  \/\/ Positions.$/;"	m	struct:StructSinkImport	file:
Pos	SinkParticle.c	/^    double  Pos[3];  \/\/ Positions.$/;"	m	struct:StructSinkPosSizeExport	file:
Pos	SinkParticle.c	/^    double Pos[3];$/;"	m	struct:StructParticleDataForActiveSinkFOF	file:
Pos	SizeDetermination.c	/^    double    Pos[3];  \/\/ Position.$/;"	m	struct:StructCSExport	file:
Pos	SizeDetermination.c	/^    double Pos[3];$/;"	m	struct:StructActiveParticle	file:
Pos	StellarFeedback.c	/^    double    Pos[3];  \/\/ Position.$/;"	m	struct:StructStellarFeedbackExport	file:
Pos	StellarFeedback.c	/^    double Pos[3];$/;"	m	struct:StructEnergyHeavyElements	file:
Pos	StellarFeedback.h	/^    double Pos[3];$/;"	m	struct:StructActiveStellarFeedbackParticle
Pos	StructuresForIO.h	/^    double Pos[3];$/;"	m	struct:StructPbodyIOCompactDouble
Pos	StructuresForIO.h	/^    double Pos[3];$/;"	m	struct:StructPbodyIOCompactMix
Pos	StructuresForIO.h	/^    float Pos[3];$/;"	m	struct:StructPbodyIOCompact
Pos	StructuresForIO.h	/^    float Pos[3];$/;"	m	struct:StructPbodyIOLean
Pos	TestRuns.c	/^double (*Pos)[3];$/;"	v
PosCmpX	PreDecomposition.c	/^static int PosCmpX(const void *x, const void *y){$/;"	f	file:
PosCmpY	PreDecomposition.c	/^static int PosCmpY(const void *x, const void *y){$/;"	f	file:
PosCmpZ	PreDecomposition.c	/^static int PosCmpZ(const void *x, const void *y){$/;"	f	file:
PosMax	DataStructures.h	/^    double PosMax[3];                 \/\/ Maximum courner of particle extention. $/;"	m	struct:StructHydroRoot_tag
PosMax	DataStructures.h	/^    double PosMax[3];              \/\/ Particle distribution edges, maximum.$/;"	m	struct:StructGravityRoot_tag
PosMax	DataStructures.h	/^    double PosMax[3];              \/\/ Particle distribution edges, maximum.$/;"	m	struct:StructYoungStarRoot_tag
PosMax	DataStructures.h	/^    double PosMax[3];$/;"	m	struct:StructEdges
PosMin	DataStructures.h	/^    double PosMin[3];                 \/\/ Minimum courner of particle extention. $/;"	m	struct:StructHydroRoot_tag
PosMin	DataStructures.h	/^    double PosMin[3];              \/\/ Particle distribution edges, minimum.$/;"	m	struct:StructGravityRoot_tag
PosMin	DataStructures.h	/^    double PosMin[3];              \/\/ Particle distribution edges, minimum.$/;"	m	struct:StructYoungStarRoot_tag
PosMin	DataStructures.h	/^    double PosMin[3];$/;"	m	struct:StructEdges
PosP	DataStructures.h	/^    double    PosP[3];      \/\/ <TMP> <LEAN> The predictor of the particle position.$/;"	m	struct:StructPbody_tag
PosP	DataStructures.h	/^    double    PosP[3];      \/\/ <TMP> <LEAN>$/;"	m	struct:StructPhydro_tag
PosP	DataStructures.h	/^    double  PosP[3];        \/\/ <TMP> <LEAN> $/;"	m	struct:StructPsink_tag
Pot	DataStructures.h	/^    double    Pot;          \/\/ The potential energy.$/;"	m	struct:StructPbody_tag
Pot	DataStructures.h	/^    double Pot;$/;"	m	struct:StructGravityAccPotCache
Pot	DataStructures.h	/^    double Pot;$/;"	m	struct:StructPhydro_tag
Pot	DataStructures.h	/^    double Pot;$/;"	m	struct:StructYoungStarResultCache
Pot	ForceTree.c	/^    double Pot;$/;"	m	struct:StructForceImport	file:
Pot	HydroMisc.h	/^     double   Pot;$/;"	m	struct:StructHydroDensityExport
Pot	HydroMisc.h	/^    double   Pot;$/;"	m	struct:StructHydroDensityImport
Pot	StructuresForIO.h	/^    double Pot;$/;"	m	struct:StructPbodyIOCompactDouble
Pot	StructuresForIO.h	/^    double Pot;$/;"	m	struct:StructPhydroIOCompactDouble
Pot	StructuresForIO.h	/^    float Pot;$/;"	m	struct:StructPbodyIOCompact
Pot	StructuresForIO.h	/^    float Pot;$/;"	m	struct:StructPbodyIOCompactMix
Pot	StructuresForIO.h	/^    float Pot;$/;"	m	struct:StructPbodyIOLean
Pot	StructuresForIO.h	/^    float Pot;$/;"	m	struct:StructPhydroIOCompact
Pot	StructuresForIO.h	/^    float Pot;$/;"	m	struct:StructPhydroIOCompactMix
Pot	StructuresForIO.h	/^    float Pot;$/;"	m	struct:StructPhydroIOLean
PotentialDirect	ForceDirect.c	/^void PotentialDirect(void){$/;"	f
PotentialMin	SizeDetermination.c	/^    double    PotentialMin;$/;"	m	struct:StructCSImport	file:
PotentialMin	SizeDetermination.c	/^    double    PotentialMin;$/;"	m	struct:StructCSImportHydroParticle	file:
PotentialMin	SizeDetermination.c	/^    double PotentialMin;$/;"	m	struct:StructCSActiveHydroParticle	file:
PotentialMin	SizeDetermination.c	/^    double PotentialMin;$/;"	m	struct:StructCSHydroLocalInfo	file:
PowderSnowIDGenerator	PowderSnow.c	/^unsigned long PowderSnowIDGenerator(void){$/;"	f
PowderSnowSetShardID	PowderSnow.c	/^void PowderSnowSetShardID(const int id){$/;"	f
PowderSnowSetShardIDLowerSevenBits	PowderSnow.c	/^void PowderSnowSetShardIDLowerSevenBits(const int id){$/;"	f
PowderSnowSetShardIDbyLocalEnv	PowderSnow.c	/^static void PowderSnowSetShardIDbyLocalEnv(void){$/;"	f	file:
PowerLawIndex	TestRuns.c	/^static double PowerLawIndex;$/;"	v	file:
PreDecompositionEdge	PreDecomposition.c	/^static double *PreDecompositionEdge[3];$/;"	v	file:
PreDecompositionEdgeSize	PreDecomposition.c	/^static int *PreDecompositionEdgeSize[3];$/;"	v	file:
PreDecompositionFactor	PreDecomposition.c	/^static int PreDecompositionFactor[3];$/;"	v	file:
PreDecompositionMaxEdgeSize	PreDecomposition.c	/^static int PreDecompositionMaxEdgeSize[3];$/;"	v	file:
PreDecompositionNodeIndex	PreDecomposition.c	/^static int PreDecompositionNodeIndex[3];$/;"	v	file:
PreDecompositionRecv	PreDecomposition.c	/^} *PreDecompositionSend,*PreDecompositionRecv;$/;"	v	typeref:struct:StructPreDecomposition
PreDecompositionRecvMaxAllocated	PreDecomposition.c	/^static int PreDecompositionRecvMaxAllocated = 0;$/;"	v	file:
PreDecompositionSend	PreDecomposition.c	/^} *PreDecompositionSend,*PreDecompositionRecv;$/;"	v	typeref:struct:StructPreDecomposition
PreDecompositionSendMaxAllocated	PreDecomposition.c	/^static int PreDecompositionSendMaxAllocated = 0;$/;"	v	file:
PreDomainDecomposition	PreDecomposition.c	/^void PreDomainDecomposition(const int mode){$/;"	f
PreDomainDecompositionBisection	PreDecomposition.c	/^static void PreDomainDecompositionBisection(const int mode){$/;"	f	file:
PreDomainDecompositionXYZ	PreDecomposition.c	/^static void PreDomainDecompositionXYZ(const int mode){$/;"	f	file:
PrepareDomainKey	Decomposition.c	/^static void PrepareDomainKey(void){$/;"	f	file:
PrintForceFlops	ForceMisc.c	/^void PrintForceFlops(double Time){$/;"	f
PrintMultiphase	Run.c	/^static void PrintMultiphase(const int Tag){$/;"	f	file:
PrintMultiphaseEcheck	Run.c	/^static void PrintMultiphaseEcheck(const int Tag){$/;"	f	file:
PseudoDensity	DataStructures.h	/^    double    PseudoDensity;          \/\/ The fundamental quantity of SPSPH$/;"	m	struct:StructPhydro_tag
PseudoDensity	HydroAcc.c	/^    double PseudoDensity; $/;"	m	struct:StructHydroAccCorrectEnegyDensityGradh	file:
PseudoDensity	HydroMisc.h	/^    double    PseudoDensity; \/\/ Pseudo Density$/;"	m	struct:StructHydroDensityImport
PseudoDensity	HydroMisc.h	/^    double    PseudoDensity; \/\/ Pseudo-Density$/;"	m	struct:StructHydroAccExport
PseudoDensity	StructuresForIO.h	/^    double PseudoDensity;$/;"	m	struct:StructPhydroIOCompactDouble
PseudoDensity	StructuresForIO.h	/^    float PseudoDensity;$/;"	m	struct:StructPhydroIOCompact
PseudoDensity	StructuresForIO.h	/^    float PseudoDensity;$/;"	m	struct:StructPhydroIOCompactMix
PseudoDensity	StructuresForIO.h	/^    float PseudoDensity;$/;"	m	struct:StructPhydroIOLean
PseudoDensityPred	DataStructures.h	/^    double    PseudoDensityPred;      \/\/ <TMP> The predictor of y$/;"	m	struct:StructPhydro_tag
PseudoDensityPred	StructuresForIO.h	/^    float PseudoDensityPred;$/;"	m	struct:StructPhydroIOLean
Psink	DataStructures.c	/^StructPsinkptr *Psink;$/;"	v
PsinkAcc	DataStructures.h	618;"	d
PsinkActive	DataStructures.h	620;"	d
PsinkBody	DataStructures.h	614;"	d
PsinkElements	DataStructures.c	/^StructPsinkptr    PsinkElements = NULL;   \/\/ Linked List$/;"	v
PsinkElementsSize	DataStructures.c	/^unsigned int PsinkElementsSize = 0;$/;"	v
PsinkKeyCmp	StructureOperation.c	/^static int PsinkKeyCmp(const void *x, const void *y){$/;"	f	file:
PsinkMass	DataStructures.h	619;"	d
PsinkPos	DataStructures.h	615;"	d
PsinkPosP	DataStructures.h	616;"	d
PsinkSize	DataStructures.c	/^unsigned int PsinkSize = 0;$/;"	v
PsinkVel	DataStructures.h	617;"	d
Pstar	DataStructures.c	/^StructPstarptr *Pstar;$/;"	v
PstarAcc	DataStructures.h	575;"	d
PstarActive	DataStructures.h	577;"	d
PstarBody	DataStructures.h	571;"	d
PstarElements	DataStructures.c	/^StructPstarptr    PstarElements = NULL;   \/\/ Linked List$/;"	v
PstarElementsSize	DataStructures.c	/^unsigned int PstarElementsSize = 0;$/;"	v
PstarKeyCmp	StructureOperation.c	/^static int PstarKeyCmp(const void *x, const void *y){$/;"	f	file:
PstarMass	DataStructures.h	576;"	d
PstarPos	DataStructures.h	572;"	d
PstarPosP	DataStructures.h	573;"	d
PstarSize	DataStructures.c	/^unsigned int PstarSize = 0;$/;"	v
PstarVel	DataStructures.h	574;"	d
Pt	StellarFeedback.c	/^    double Pt;$/;"	m	struct:StructEnergyHeavyElements	file:
Qheat	Delayed.c	/^    double Qheat;$/;"	m	struct:StructDelayedFBInjection	file:
R2	SizeDetermination.c	/^    double R2;$/;"	m	struct:StructSortNeighborList	file:
REAL	Constants.h	3;"	d
REDUCEDFUVHEATINGRATE_TMAX	Cooling.c	678;"	d	file:
REDUCEDFUVHEATINGRATE_TMIN	Cooling.c	677;"	d	file:
RHOcZ	DataStructures.h	/^    double RHOcZ;        \/\/ Critical density at the given redshift. $/;"	m	struct:StructPall
ROOT_ALLOCATION_ERROR	Errors.h	17;"	d
RP	SizeDetermination.c	/^        struct StructCSActiveRPParticle    RP; $/;"	m	union:StructActiveParticle::__anon7	typeref:struct:StructActiveParticle::__anon7::StructCSActiveRPParticle	file:
RP	SizeDetermination.c	/^        struct StructCSImportRPParticle    RP; $/;"	m	union:StructCSImport::__anon6	typeref:struct:StructCSImport::__anon6::StructCSImportRPParticle	file:
RP	StellarFeedback.h	/^        struct StructActiveStellarFeedbackRPParticle RP;$/;"	m	union:StructActiveStellarFeedbackParticle::__anon10	typeref:struct:StructActiveStellarFeedbackParticle::__anon10::StructActiveStellarFeedbackRPParticle
RP_lifetime	RadiationPressure.c	/^static double RP_lifetime;$/;"	v	file:
RPfunctionCerevino	RadiationPressure.c	/^static inline double __attribute__((always_inline)) RPfunctionCerevino(const int index){$/;"	f	file:
RPfunctionOkamoto	RadiationPressure.c	/^static inline double __attribute__((always_inline)) RPfunctionOkamoto(const int index){$/;"	f	file:
RYDBERG_CONSTANT	Constants.h	57;"	d
RYDBERG_CONSTANT_CGS	Constants.h	69;"	d
Ra1Unit	SetUpTestRun.c	/^static double Ra1Unit,Ra1Unit2,Ra2Unit,Ra2Unit2; $/;"	v	file:
Ra1Unit2	SetUpTestRun.c	/^static double Ra1Unit,Ra1Unit2,Ra2Unit,Ra2Unit2; $/;"	v	file:
Ra1_AGN	SetUpTestRun.c	13074;"	d	file:
Ra2Unit	SetUpTestRun.c	/^static double Ra1Unit,Ra1Unit2,Ra2Unit,Ra2Unit2; $/;"	v	file:
Ra2Unit2	SetUpTestRun.c	/^static double Ra1Unit,Ra1Unit2,Ra2Unit,Ra2Unit2; $/;"	v	file:
Ra2_AGN	SetUpTestRun.c	13075;"	d	file:
RaHernquistUnit	SetUpTestRun.c	/^static double GMBulgeUnit,RaHernquistUnit;$/;"	v	file:
RaHernquist_AGN	SetUpTestRun.c	13084;"	d	file:
RaUnit	SetUpTestRun.c	/^static double RaUnit,RaUnit2,RbUnit,RbUnit2; $/;"	v	file:
RaUnit2	SetUpTestRun.c	/^static double RaUnit,RaUnit2,RbUnit,RbUnit2; $/;"	v	file:
Ra_AGN	SetUpTestRun.c	13073;"	d	file:
RadiationPressureEntry	SizeDetermination.c	/^static int RadiationPressureEntry(struct StructActiveParticle AP[], bool CalcSizeExportFlags[], const int NProcs){$/;"	f	file:
RadiationPressureKick	RadiationPressure.c	/^void RadiationPressureKick(void){$/;"	f
RadiationPressureRadiusInitialGuess	SizeDetermination.c	/^double RadiationPressureRadiusInitialGuess(const int Index){$/;"	f
Radius	Delayed.c	/^    double Radius; \/\/ FBRadius size.$/;"	m	struct:StructDelayedFBInjection	file:
Radius	Delayed.c	/^    double Radius;$/;"	m	struct:StructDelayedFBActiveStars	file:
Radius	HIIregion.c	/^    double    Radius;  \/\/ Radius.$/;"	m	struct:StructHIIExport	file:
Radius	HIIregion.c	/^    double Radius;$/;"	m	struct:StructActiveHIIParticle	file:
Radius	SizeDetermination.c	/^    double    Radius;  \/\/ Radius$/;"	m	struct:StructCSExport	file:
Radius	SizeDetermination.c	/^    double Radius; \/\/ 2xRadius is the support scale.$/;"	m	struct:StructActiveParticle	file:
Radius	StellarFeedback.c	/^    double    Radius;  \/\/ Feedback radius (2xRadius is the actual feedback radius).$/;"	m	struct:StructStellarFeedbackExport	file:
Radius	StellarFeedback.c	/^    double Radius;$/;"	m	struct:StructEnergyHeavyElements	file:
Radius	StellarFeedback.h	/^    double Radius;  \/\/ Feedback radius is 2*Radius.$/;"	m	struct:StructActiveStellarFeedbackParticle
Radius	TestRuns.c	/^double Radius; \/\/ in pc.$/;"	v
Radius	TestRuns.c	/^static double Radius;$/;"	v	file:
RadiusBaseDragBoundaryConditionForCosmologicalRun	BoundaryCondition.c	/^static void RadiusBaseDragBoundaryConditionForCosmologicalRun(void){$/;"	f	file:
RadiusFactDec	SizeDetermination.c	29;"	d	file:
RadiusFactInc	SizeDetermination.c	28;"	d	file:
RadiusFactInc_First	SizeDetermination.c	30;"	d	file:
RadiusRP	DataStructures.h	/^    double RadiusRP;$/;"	m	struct:StructPstar_tag
RadiusRP	StructuresForIO.h	/^    double RadiusRP;$/;"	m	struct:StructPstarIOCompactDouble
RadiusRP	StructuresForIO.h	/^    float RadiusRP;$/;"	m	struct:StructPstarIOCompact
RadiusRP	StructuresForIO.h	/^    float RadiusRP;$/;"	m	struct:StructPstarIOCompactMix
RadiusRP	StructuresForIO.h	/^    float RadiusRP;$/;"	m	struct:StructPstarIOLean
RadiusSW	DataStructures.h	/^    double RadiusSW;$/;"	m	struct:StructPstar_tag
RadiusSW	StructuresForIO.h	/^    double RadiusSW;$/;"	m	struct:StructPstarIOCompactDouble
RadiusSW	StructuresForIO.h	/^    float RadiusSW;$/;"	m	struct:StructPstarIOCompact
RadiusSW	StructuresForIO.h	/^    float RadiusSW;$/;"	m	struct:StructPstarIOCompactMix
RadiusSW	StructuresForIO.h	/^    float RadiusSW;$/;"	m	struct:StructPstarIOLean
RaiseActiveFlags	TimeStep.c	/^void RaiseActiveFlags(void){$/;"	f
RandomGenerator	DataStructures.c	/^gsl_rng *RandomGenerator;$/;"	v
RankTranslator	MPIParameters.c	/^int RankTranslator(MPI_Group Group1, int Rank1, MPI_Group Group2){$/;"	f
Rate1	H2.c	/^static double Rate1(double Tk){$/;"	f	file:
Rate2	H2.c	/^static double Rate2(double Tk){$/;"	f	file:
RbUnit	SetUpTestRun.c	/^static double RaUnit,RaUnit2,RbUnit,RbUnit2; $/;"	v	file:
RbUnit2	SetUpTestRun.c	/^static double RaUnit,RaUnit2,RbUnit,RbUnit2; $/;"	v	file:
Rb_AGN	SetUpTestRun.c	13076;"	d	file:
Rcool	StellarFeedback.c	/^    double Rcool;$/;"	m	struct:StructEnergyHeavyElements	file:
ReAllocate	Allocators.c	/^void *ReAllocate(void *ptr, size_t nSize){$/;"	f
ReConnectBaryonPointers	StarFormation.c	/^static void ReConnectBaryonPointers(void){$/;"	f	file:
ReConnectHydroAndSinkPointers	SinkParticle.c	/^static void ReConnectHydroAndSinkPointers(void){$/;"	f	file:
ReConnectPointers	StructureOperation.c	/^void ReConnectPointers(void){$/;"	f
ReConnectPointersForNSM	StructureOperation.c	/^void ReConnectPointersForNSM(void){$/;"	f
Read3DShockTube	SetUpTestRun.c	/^void Read3DShockTube(const int number, char LoadFileName[]){$/;"	f
ReadAGNParams	main.c	/^static void ReadAGNParams(char *fname){$/;"	f	file:
ReadAllData	IO.c	/^void ReadAllData(void){$/;"	f
ReadBinaryGalactICS	SetUpTestRun.c	/^void ReadBinaryGalactICS(char fname[], const double GasFlactionDisk, const double GasFlactionHalo){$/;"	f
ReadBinaryGalactICSFlag	SetUpTestRun.c	/^void ReadBinaryGalactICSFlag(char fname[]){$/;"	f
ReadBlastWave	SetUpTestRun.c	/^void ReadBlastWave(void){$/;"	f
ReadCosmologicalData	Read.c	/^void ReadCosmologicalData(void){$/;"	f
ReadCosmologicalHalfwayData	Read.c	/^void ReadCosmologicalHalfwayData(char *fname){$/;"	f
ReadDiceASCII	SetUpTestRun.c	/^void ReadDiceASCII(char fname[]){$/;"	f
ReadDiceBinary	SetUpTestRun.c	/^void ReadDiceBinary(char fname[]){$/;"	f
ReadDiceLine	SetUpTestRun.c	/^static void ReadDiceLine(char fname[], const int Nlines, const int mycount_comp[], const double Eps[]){$/;"	f	file:
ReadDiceLineBinary	SetUpTestRun.c	/^static void ReadDiceLineBinary(char fname[], const int Nlines, const int mycount_comp[], const double Eps[]){$/;"	f	file:
ReadExactCoolingParams	TestRuns.c	/^static void ReadExactCoolingParams(char fname[]){$/;"	f	file:
ReadGCParams	main.c	/^static void ReadGCParams(char fname[]){$/;"	f	file:
ReadGadetFormat	ReadGadgetFormat.c	/^int ReadGadetFormat(void){$/;"	f
ReadGalactICS	SetUpTestRun.c	/^void ReadGalactICS(void){$/;"	f
ReadHeader	IO.c	/^static void ReadHeader(FILE *fp, int HeaderArray[]){$/;"	f	file:
ReadInitCloudExplosion	SetUpTestRun.c	/^void ReadInitCloudExplosion(void){$/;"	f
ReadKeisokuBenchParallel	SetUpTestRun.c	/^void ReadKeisokuBenchParallel(void){$/;"	f
ReadKeisokuCheckParallel	SetUpTestRun.c	/^void ReadKeisokuCheckParallel(const int number){$/;"	f
ReadMergerRestart	SetUpTestRun.c	/^void ReadMergerRestart(char fname[]){$/;"	f
ReadMultiMassCosmologicalInitialCondition	SetUpTestRun.c	/^void ReadMultiMassCosmologicalInitialCondition(char fbody[], char fboundary[]){$/;"	f
ReadMultiMassNbodyInitialCondition	SetUpTestRun.c	/^void ReadMultiMassNbodyInitialCondition(void){$/;"	f
ReadMusic	SetUpTestRun.c	/^void ReadMusic(char fname[], const bool BinaryFlag){$/;"	f
ReadMusicLine	SetUpTestRun.c	/^static void ReadMusicLine(char fname[], const int Nlines, const int mycount_comp[], const double Eps[], const double Mdm){$/;"	f	file:
ReadMusicLineBinary	SetUpTestRun.c	/^static void ReadMusicLineBinary(char fname[], const int Nlines, const int mycount_comp[], const double Eps[], const double Mdm){$/;"	f	file:
ReadNFWInitialCondition	SetUpTestRun.c	/^void ReadNFWInitialCondition(void){$/;"	f
ReadNFWTdyn	SetUpTestRun.c	/^void ReadNFWTdyn(void){$/;"	f
ReadOldCosmologicalData	Read.c	/^void ReadOldCosmologicalData(const int FileID){$/;"	f
ReadOldCosmologicalDataFull	Read.c	/^void ReadOldCosmologicalDataFull(const int FileID){$/;"	f
ReadParallelDataOnSingleNode	IO.c	/^void ReadParallelDataOnSingleNode(void){$/;"	f
ReadParallelDataOnSingleNodeCompact	IO.c	/^static int ReadParallelDataOnSingleNodeCompact(FILE *fp, const int Ntotal, int counter, int CountTypes[]){$/;"	f	file:
ReadParallelDataOnSingleNodeCompactDouble	IO.c	/^static int ReadParallelDataOnSingleNodeCompactDouble(FILE *fp, const int Ntotal, int counter, int CountTypes[]){$/;"	f	file:
ReadParallelDataOnSingleNodeCompactMix	IO.c	/^static int ReadParallelDataOnSingleNodeCompactMix(FILE *fp, const int Ntotal, int counter, int CountTypes[]){$/;"	f	file:
ReadParallelDataOnSingleNodeFull	IO.c	/^static int ReadParallelDataOnSingleNodeFull(FILE *fp, const int Ntotal, int counter, int CountTypes[]){$/;"	f	file:
ReadParallelDataOnSingleNodeLean	IO.c	/^static int ReadParallelDataOnSingleNodeLean(FILE *fp, const int Ntotal, int counter, int CountTypes[]){$/;"	f	file:
ReadParametersForSymmetrizedPotentialError	main.c	/^static void ReadParametersForSymmetrizedPotentialError(void){$/;"	f	file:
ReadParticleSplittingTestParams	TestRuns.c	/^void ReadParticleSplittingTestParams(char *fname){$/;"	f
ReadSantaBarbaraInitialCondition	SetUpTestRun.c	/^void ReadSantaBarbaraInitialCondition(const int mode){ $/;"	f
ReadTestFUVFeedbackParams	TestRuns.c	/^static void ReadTestFUVFeedbackParams(void){$/;"	f	file:
ReadTestRadiationPressureParams	TestRuns.c	/^void ReadTestRadiationPressureParams(char *fname){$/;"	f
ReadTestStromgrenSphereParams	TestRuns.c	/^void ReadTestStromgrenSphereParams(char *fname){$/;"	f
ReadTypeUnDefined	Errors.h	7;"	d
ReconnectBodytoHydro	StructureOperation.c	/^void ReconnectBodytoHydro(void){$/;"	f
ReconnectBodytoSink	StructureOperation.c	/^void ReconnectBodytoSink(void){$/;"	f
ReconnectBodytoStar	StructureOperation.c	/^void ReconnectBodytoStar(void){$/;"	f
ReconnectHydrotoBody	StructureOperation.c	/^void ReconnectHydrotoBody(void){$/;"	f
ReconnectSinktoBody	StructureOperation.c	/^void ReconnectSinktoBody(void){$/;"	f
ReconnectStartoBody	StructureOperation.c	/^void ReconnectStartoBody(void){$/;"	f
RecvRank	DataStructures.h	/^    int RecvRank;$/;"	m	struct:StructCommunicationTable
RecvSize	DataStructures.h	/^    int RecvSize;$/;"	m	struct:StructCommunicationTable
Redge_AGN_CGS	main.c	/^double Redge_AGN_CGS;$/;"	v
RedistributionDivVRotV	HydroAcc.c	/^static void RedistributionDivVRotV(const int NExportThisTime[restrict], const int NImportThisTime[restrict], struct StructHydroAccExport *HydroAccExportSend[restrict], const int NImportAll, struct StructHydroAccExport HydroAccExportRecv[restrict]){$/;"	f	file:
Redshift	DataStructures.h	/^    double    Redshift;     \/\/ Current Redshift.$/;"	m	struct:StructPall
Redshift	FOF.c	/^    double Redshift;$/;"	m	struct:StructFOFHeader	file:
Redshift	ReadGadgetFormat.c	/^double  Time, Redshift;$/;"	v
Redshift	TestRuns.c	/^    double Redshift;\/\/Redshift$/;"	m	struct:StructECParams	file:
ReducedFUVHeatingRate	Cooling.c	/^static double ReducedFUVHeatingRate(const double Heating, const double Ti){$/;"	f	file:
ReferenceMass	HydroExtraOperations.c	/^static double ReferenceMass,InvReferenceMass;$/;"	v	file:
ReleaseAllBuffers	BufferOperation.c	/^void ReleaseAllBuffers(void){$/;"	f
ReleaseBufferExportRecv	BufferOperation.c	/^static void ReleaseBufferExportRecv(void){$/;"	f	file:
ReleaseBufferExportSend	BufferOperation.c	/^static void ReleaseBufferExportSend(void){$/;"	f	file:
ReleaseBufferHydroInteractionFlags	HydroMisc.c	/^void ReleaseBufferHydroInteractionFlags(void){$/;"	f
ReleaseBufferImportRecv	BufferOperation.c	/^static void ReleaseBufferImportRecv(void){$/;"	f	file:
ReleaseBufferImportSend	BufferOperation.c	/^static void ReleaseBufferImportSend(void){$/;"	f	file:
ReleaseEnergyHeavyElements	StellarFeedback.c	/^static void ReleaseEnergyHeavyElements(const int NExplosion, const int StellarFeedBackList[restrict]){$/;"	f	file:
ReleaseGRAPE	GRAPEManager.c	/^void ReleaseGRAPE(void){$/;"	f
ReleaseGRAPE_EveryTime	GRAPEManager.c	9;"	d	file:
ReleaseStructFOF	FOF.c	/^void ReleaseStructFOF(void){$/;"	f
ReleaseStructFOFCatalog	FOF.c	/^static void ReleaseStructFOFCatalog(void){$/;"	f	file:
ReleaseStructSinkFOF	SinkParticle.c	/^static void ReleaseStructSinkFOF(void){$/;"	f	file:
ReleaseStructSinkFOFCatalog	SinkParticle.c	/^static void ReleaseStructSinkFOFCatalog(void){$/;"	f	file:
ReleasedEnergy	Delayed.c	/^    double ReleasedEnergy; $/;"	m	struct:StructDelayedFBActiveStars	file:
RemoveLockFile	IO.c	/^static void RemoveLockFile(void){$/;"	f	file:
Rend	SetUpTestRun.c	12403;"	d	file:
Rend	SetUpTestRun.c	9521;"	d	file:
Rend	SetUpTestRun.c	9566;"	d	file:
ReportAllocatedMemorySizes	BufferOperation.c	/^void ReportAllocatedMemorySizes(void){$/;"	f
ResetInitialZ	Run.c	/^static void ResetInitialZ(void){$/;"	f	file:
ResetKernelSize	StellarFeedback.c	/^static void ResetKernelSize(const int NActives, const int Niteration, const int NProcs, $/;"	f	file:
ResetKernelSizeModified	HydroKernel.c	/^static void ResetKernelSizeModified(const int NActives, const int Niteration, const int NProcs, $/;"	f	file:
ResetLRvalues	SizeDetermination.c	/^static void ResetLRvalues(const int NActives, const int Niteration, const int NProcs, bool CSExportFlags[restrict], struct StructActiveParticle AP[restrict]){ $/;"	f	file:
ResetRandomSeedForRandomGenerator	RandomNumberGenerator.c	/^void ResetRandomSeedForRandomGenerator(unsigned long int RandomSeed){$/;"	f
ResetSinkThresholdDensity	TestRuns.c	/^static void ResetSinkThresholdDensity(void){$/;"	f	file:
ResetWrite4D2UExtraCounter	IO.c	/^void ResetWrite4D2UExtraCounter(void){$/;"	f
RestartFileName	DataStructures.h	/^    char RestartFileName[MaxCharactersInLine];$/;"	m	struct:StructPall
RestartFileSearchError	Errors.h	11;"	d
RestartID	IO.c	/^static int RestartID = 0;$/;"	v	file:
RestartRun	Run.c	/^void RestartRun(void){$/;"	f
RestartSimulation	config.h	/^    RestartSimulation,$/;"	e	enum:__anon12
RestoreAllData	SizeDetermination.c	/^static void RestoreAllData(const int NActives, struct StructActiveParticle AP[restrict]){$/;"	f	file:
RestoreSphericalParticleDistribution	SetUpTestRun.c	/^void RestoreSphericalParticleDistribution(const int Number, double Pos[][3], double Mass[], double Eps[], const double M_p, const double Eps_p, const double Radius, const double Distance){$/;"	f
RestoreSphericalParticleDistributionErrorEstimation	SetUpTestRun.c	/^void RestoreSphericalParticleDistributionErrorEstimation(const int Number, double Pos[][3], double Mass[], double Eps[]){$/;"	f
RetrunStellarFeedbackLocalInfo	StellarFeedback.c	/^struct StructStellarFeedbackLocalInfo RetrunStellarFeedbackLocalInfo(double Pos[restrict], const double Radius){$/;"	f
ReturnAlpha	HIIregion.c	/^static double ReturnAlpha(void){$/;"	f	file:
ReturnArtificialViscocityGM	HydroAcc.c	/^static double __attribute__((always_inline))  ReturnArtificialViscocityGM(const double vx, $/;"	f	file:
ReturnArtificialViscocityHosono	HydroAcc.c	/^static double __attribute__((always_inline)) ReturnArtificialViscocityHosono(const double DivVi, $/;"	f	file:
ReturnArtificialViscocityReimann	HydroAcc.c	/^static double __attribute__((always_inline)) ReturnArtificialViscocityReimann(const double vx, $/;"	f	file:
ReturnCS	HydroAcc.c	/^static inline double __attribute__((always_inline)) ReturnCS(const double Rhoi, const double Ui){$/;"	f	file:
ReturnCSij	HydroAcc.c	/^static inline double __attribute__((always_inline)) ReturnCSij(const double Rhoj, const double Uj, double csi){$/;"	f	file:
ReturnCalcSizeElementNumber	SizeDetermination.c	/^int ReturnCalcSizeElementNumber(const int Type, const bool Global){$/;"	f
ReturnCalcSizeOffset	SizeDetermination.c	/^int ReturnCalcSizeOffset(const int Type){$/;"	f
ReturnCloudyCoolingRate	Cooling.c	/^static inline double ReturnCloudyCoolingRate(const double Rho, const double U, const double Metallicity){$/;"	f	file:
ReturnDistanceForExponent	SetUpTestRun.c	/^static double ReturnDistanceForExponent(const double F, const double Rd){$/;"	f	file:
ReturnDistanceForInvR	SetUpTestRun.c	/^static double ReturnDistanceForInvR(const double F, const double Rd){$/;"	f	file:
ReturnDistanceForNFW	SetUpTestRun.c	/^static double ReturnDistanceForNFW(const double F, const double Cnfw){$/;"	f	file:
ReturnEmptyBodyStructurePointer	StructureOperation.c	/^StructPbodyptr ReturnEmptyBodyStructurePointer(void){$/;"	f
ReturnEmptyBodyStructurePointerWithCounter	StructureOperation.c	/^StructPbodyptr ReturnEmptyBodyStructurePointerWithCounter(int *IndexStart){$/;"	f
ReturnEmptyHydroStructurePointer	StructureOperation.c	/^StructPhydroptr ReturnEmptyHydroStructurePointer(void){$/;"	f
ReturnEmptyHydroStructurePointerWithCounter	StructureOperation.c	/^StructPhydroptr ReturnEmptyHydroStructurePointerWithCounter(int *IndexStart){$/;"	f
ReturnEmptySinkStructurePointer	StructureOperation.c	/^StructPsinkptr ReturnEmptySinkStructurePointer(void){$/;"	f
ReturnEmptySinkStructurePointerWithCounter	StructureOperation.c	/^StructPsinkptr ReturnEmptySinkStructurePointerWithCounter(int *IndexStart){$/;"	f
ReturnEmptyStarStructurePointer	StructureOperation.c	/^StructPstarptr ReturnEmptyStarStructurePointer(void){$/;"	f
ReturnEmptyStarStructurePointerWithCounter	StructureOperation.c	/^StructPstarptr ReturnEmptyStarStructurePointerWithCounter(int *IndexStart){$/;"	f
ReturnGCAcc	main.c	/^static double ReturnGCAcc(const double Pos[], const int Dim){$/;"	f	file:
ReturnGCEtaFromT	main.c	/^static double ReturnGCEtaFromT(double Tstart){$/;"	f	file:
ReturnGCOrbitalPeriod	main.c	/^static double ReturnGCOrbitalPeriod(void){$/;"	f	file:
ReturnGCPhiFromEta	main.c	/^static double ReturnGCPhiFromEta(const double Eta){$/;"	f	file:
ReturnGCSemiMajorAxis	main.c	/^static double ReturnGCSemiMajorAxis(void){$/;"	f	file:
ReturnGCSemiMinorAxis	main.c	/^static double ReturnGCSemiMinorAxis(void){$/;"	f	file:
ReturnGCTFromEta	main.c	/^static double ReturnGCTFromEta(double Eta, double Tr){$/;"	f	file:
ReturnInteractionListInDouble	ForceMisc.c	/^double ReturnInteractionListInDouble(void){$/;"	f
ReturnMaximumExtendedDirection	PreDecomposition.c	/^static int ReturnMaximumExtendedDirection(const int NParticles, struct StructPreDecompositionQsort PreDecomp[]){$/;"	f	file:
ReturnMilkyWayVirialTemperature	SetUpTestRun.c	/^static double ReturnMilkyWayVirialTemperature(void){$/;"	f	file:
ReturnMortonKey	OrderingKey.c	/^static long long int ReturnMortonKey(const long long int keyelement){$/;"	f	file:
ReturnNeighborNumber	NeighborSearch.c	/^int ReturnNeighborNumber(const int CurrentNodeID, double Pos[restrict], const double h){$/;"	f
ReturnNeighborsAbsorbedPhoton	HIIregion.c	/^static double ReturnNeighborsAbsorbedPhoton(double Pos[restrict], const double Radius, int Neighbors[restrict], int *nlist){$/;"	f	file:
ReturnNeighborsInfo	HIIregion.c	/^static struct StructHIILocalInfo ReturnNeighborsInfo(struct StructActiveHIIParticle *ActiveHIIParticle_i, int Neighbors[restrict]){$/;"	f	file:
ReturnNeighborsMass	HIIregion.c	/^static double ReturnNeighborsMass(double Pos[restrict], const double Radius, int Neighbors[restrict], int *nlist){$/;"	f	file:
ReturnNumberofLyPhoton	HIIregion.c	/^double ReturnNumberofLyPhoton(const int index, const int step){$/;"	f
ReturnPotForSymmetrizedPotentailError	main.c	/^static double ReturnPotForSymmetrizedPotentailError(void){$/;"	f	file:
ReturnPoverRho2	HydroAcc.c	/^static inline double __attribute__((always_inline)) ReturnPoverRho2(const double Rho, const double U){$/;"	f	file:
ReturnPoverRho2ForBarotropicRun	HydroAcc.c	/^static inline double __attribute__((always_inline)) ReturnPoverRho2ForBarotropicRun(const double rho){$/;"	f	file:
ReturnRecombinationConstantAlpha	HIIregion.c	/^double ReturnRecombinationConstantAlpha(void){$/;"	f
ReturnSoundSpeedForBarotoropicRun	HydroAcc.c	/^static inline double __attribute__((always_inline)) ReturnSoundSpeedForBarotoropicRun(const double rho){$/;"	f	file:
ReturnSoundSpeedForBarotoropicRun	HydroDensity.c	/^static inline double __attribute__((always_inline)) ReturnSoundSpeedForBarotoropicRun(const double rho){$/;"	f	file:
ReturnStromgrenRadius	TestRuns.c	/^static double ReturnStromgrenRadius(const double nH, const double LyAlpha){$/;"	f	file:
ReturnStructureDelayedFBImport	Delayed.c	/^static struct StructDelayedFBImport ReturnStructureDelayedFBImport(double Pos[restrict], const double Kerneli){$/;"	f	file:
ReturnStructureDensityDivRotEngine	HydroDensity.c	/^static struct StructHydroDensityImport ReturnStructureDensityDivRotEngine($/;"	f	file:
ReturnStructureDensityDivRotEngineDirect	HydroDensity.c	/^static struct StructHydroDensityImport ReturnStructureDensityDivRotEngineDirect($/;"	f	file:
ReturnStructureDuDtHydroAccCorrectionEngine	HydroAcc.c	/^static struct StructHydroAccImport ReturnStructureDuDtHydroAccCorrectionEngine(const int index, const int mode){$/;"	f	file:
ReturnStructureDuDtHydroAccEngine	HydroAcc.c	/^static struct StructHydroAccImport ReturnStructureDuDtHydroAccEngine(const int index, const int mode,$/;"	f	file:
ReturnStructureEffSAEngine	CalcEffectiveSurfaceArea.c	/^static struct StructEffSAResult ReturnStructureEffSAEngine(struct StructEffSAInput Input){$/;"	f	file:
ReturnStructureEffSAVecCheckEngine	CalcEffectiveSurfaceArea.c	/^static struct StructEffSAResult ReturnStructureEffSAVecCheckEngine(struct StructEffSAInput Input){$/;"	f	file:
ReturnStructureEffSAVecEngine	CalcEffectiveSurfaceArea.c	/^static struct StructEffSAResult ReturnStructureEffSAVecEngine(struct StructEffSAInput Input){$/;"	f	file:
ReturnStructureHydroAccCorrectionEnergyDensityGradhEngine	HydroAcc.c	/^struct StructHydroAccCorrectEnegyDensityGradh ReturnStructureHydroAccCorrectionEnergyDensityGradhEngine(const int index, const int mode){$/;"	f
ReturnTotalEnergySinkSinkBoundCheck	SinkParticle.c	/^static double ReturnTotalEnergySinkSinkBoundCheck( $/;"	f	file:
ReturnTotalFileNumber	IO.c	/^static int ReturnTotalFileNumber(void){$/;"	f	file:
Rf	H2.c	/^static double Rf(double Tk){$/;"	f	file:
Rho	DataStructures.h	/^    double    Rho;$/;"	m	struct:StructPhydro_tag
Rho	Delayed.c	/^    double Rho;    \/\/ Rho.$/;"	m	struct:StructDelayedFBInjection	file:
Rho	HIIregion.c	/^    double    Rho;     \/\/ Density.$/;"	m	struct:StructHIIImport	file:
Rho	HydroKernel.c	/^    double    Rho;$/;"	m	struct:StructHydroKernelImport	file:
Rho	HydroKernel.c	/^    double Rho;$/;"	m	struct:StructActiveHydroParticle	file:
Rho	HydroMisc.h	/^    double    Rho;     \/\/ Density.$/;"	m	struct:StructHydroAccExport
Rho	HydroMisc.h	/^    double    Rho;     \/\/ Density.$/;"	m	struct:StructHydroDensityImport
Rho	ReadGadgetFormat.c	/^  float  Rho, U, Temp, Ne;$/;"	m	struct:Gadget_particle_data	file:
Rho	SinkParticle.c	/^    double    Rho;     \/\/ Density.$/;"	m	struct:StructSinkPressureForces	file:
Rho	SizeDetermination.c	/^    double Rho;$/;"	m	struct:StructCSActiveHydroParticle	file:
Rho	StructuresForIO.h	/^    double Rho;$/;"	m	struct:StructPhydroIOCompactDouble
Rho	StructuresForIO.h	/^    float Rho;$/;"	m	struct:StructPhydroIOCompact
Rho	StructuresForIO.h	/^    float Rho;$/;"	m	struct:StructPhydroIOCompactMix
Rho	StructuresForIO.h	/^    float Rho;$/;"	m	struct:StructPhydroIOLean
RhoForm	DataStructures.h	/^    double  RhoForm;        \/\/ <LEAN> Density(t=FormationTime) \/\/ UnitMass\/UnitLength^3$/;"	m	struct:StructPstar_tag
RhoForm	SetUpTestRun.c	/^    double  RhoForm;        \/\/ Density(t=FormationTime) \/\/ UnitMass\/UnitLength^3$/;"	m	struct:StructStars	file:
RhoForm	StructuresForIO.h	/^    double RhoForm;$/;"	m	struct:StructPstarIOCompactDouble
RhoForm	StructuresForIO.h	/^    float RhoForm;$/;"	m	struct:StructPstarIOCompact
RhoForm	StructuresForIO.h	/^    float RhoForm;$/;"	m	struct:StructPstarIOCompactMix
RhoPred	DataStructures.h	/^    double    RhoPred;    \/\/ <TMP> <LEAN> Predictor of density.$/;"	m	struct:StructPhydro_tag
Rhohot	DataStructures.h	/^    double Rhohot;          \/\/ Hot gas density$/;"	m	struct:StructPhydro_tag
Rhohot	StructuresForIO.h	/^    double Rhohot;$/;"	m	struct:StructPhydroIOCompactDouble
Rhohot	StructuresForIO.h	/^    float Rhohot;$/;"	m	struct:StructPhydroIOCompact
Rhohot	StructuresForIO.h	/^    float Rhohot;$/;"	m	struct:StructPhydroIOCompactMix
Rhohot	StructuresForIO.h	/^    float Rhohot;$/;"	m	struct:StructPhydroIOLean
Right	DataStructures.h	/^    int Right;$/;"	m	struct:StructInfoBiSection
Rmax	SetUpTestRun.c	/^static double Rmax;$/;"	v	file:
Rot	DataStructures.h	/^    double    Rot[3];     \/\/ <LEAN> $/;"	m	struct:StructPhydro_tag
Rot	HydroMisc.h	/^    double    Rot[3];  \/\/ Rotation of velocity.$/;"	m	struct:StructHydroDensityImport
Rot	HydroMisc.h	/^    double Rot[3];$/;"	m	struct:StructHydroAccExport
Rot	StructuresForIO.h	/^    double Rot[3];$/;"	m	struct:StructPhydroIOCompactDouble
Rot	StructuresForIO.h	/^    float Rot[3];$/;"	m	struct:StructPhydroIOCompact
Rot	StructuresForIO.h	/^    float Rot[3];$/;"	m	struct:StructPhydroIOCompactMix
Rsphere	main.c	/^static double Rsphere,Distance;$/;"	v	file:
Rstart	SetUpTestRun.c	12402;"	d	file:
Rstart	SetUpTestRun.c	9520;"	d	file:
Rstart	SetUpTestRun.c	9565;"	d	file:
Run	Run.c	/^void Run(void){$/;"	f
RunFor1DConductivity	TestRuns.c	/^void RunFor1DConductivity(void){$/;"	f
RunFor3DConductivity	TestRuns.c	/^void RunFor3DConductivity(void){$/;"	f
RunStatus	DataStructures.h	/^    int RunStatus;$/;"	m	struct:StructPall
RunStatusError	Errors.h	3;"	d
Rvalue	Delayed.c	/^    double Rvalue;$/;"	m	struct:StructDelayedFBActiveStars	file:
Rvalue	HIIregion.c	/^    double Rvalue;$/;"	m	struct:StructActiveHIIParticle	file:
Rvalue	HIIregion.c	/^    double Rvalue;$/;"	m	struct:StructBinarySearch	file:
Rvalue	HydroDensity.c	/^    double Rvalue;$/;"	m	struct:StructBinarySearch	file:
Rvalue	HydroKernel.c	/^    double Rvalue;$/;"	m	struct:StructActiveHydroParticle	file:
Rvalue	SizeDetermination.c	/^    double Rvalue;$/;"	m	struct:StructActiveParticle	file:
Rvalue	StellarFeedback.h	/^    double Rvalue;$/;"	m	struct:StructActiveStellarFeedbackParticle
SA	CalcEffectiveSurfaceArea.c	/^    double  SA;              \/\/ Density.$/;"	m	struct:StructEffSAResult	file:
SA	CalcEffectiveSurfaceArea.c	/^    double SA;$/;"	m	struct:StructEffSAInput	file:
SA	StellarFeedback.c	/^    double SA;$/;"	m	struct:StructEnergyHeavyElements	file:
SA	StellarFeedback.h	/^    double SA;$/;"	m	struct:StructActiveStellarFeedbackParticle
SEQUENCE_BASE	PowderSnow.c	21;"	d	file:
SEQUENCE_BIT	PowderSnow.c	20;"	d	file:
SET_SNII_TEMPERATURE	reconfig.h	23;"	d
SFCondition	StarFormation.c	/^static bool SFCondition(const int index){$/;"	f	file:
SFDensityCrit	config.h	155;"	d
SFTemperatureCrit	config.h	156;"	d
SF_RATE_AGNTORUS	HydroExtraOperations.c	21;"	d	file:
SFeff	config.h	154;"	d
SGN	Astro.h	12;"	d
SHARD_BIT	PowderSnow.c	19;"	d	file:
SIZE_TABLE_FH2	CoolingTableSpaans2008.h	6;"	d
SIZE_TABLE_G0	CoolingTableSpaans2008.h	7;"	d
SIZE_TABLE_T	CoolingTableSpaans2008.h	9;"	d
SIZE_TABLE_Z	CoolingTableSpaans2008.h	8;"	d
SKIP	ReadGadgetFormat.c	136;"	d	file:
SN	SizeDetermination.c	/^        struct StructCSActiveSNParticle    SN; $/;"	m	union:StructActiveParticle::__anon7	typeref:struct:StructActiveParticle::__anon7::StructCSActiveSNParticle	file:
SN	SizeDetermination.c	/^        struct StructCSImportSNParticle    SN; $/;"	m	union:StructCSImport::__anon6	typeref:struct:StructCSImport::__anon6::StructCSImportSNParticle	file:
SN	StellarFeedback.h	/^        struct StructActiveStellarFeedbackSNParticle SN;$/;"	m	union:StructActiveStellarFeedbackParticle::__anon10	typeref:struct:StructActiveStellarFeedbackParticle::__anon10::StructActiveStellarFeedbackSNParticle
SNIICount	DataStructures.h	/^    int       SNIICount;  \/\/ Use this counter for SNeII$/;"	m	struct:StructPstar_tag
SNIICount	StructuresForIO.h	/^    int SNIICount;$/;"	m	struct:StructPstarIOCompact
SNIICount	StructuresForIO.h	/^    int SNIICount;$/;"	m	struct:StructPstarIOCompactDouble
SNIICount	StructuresForIO.h	/^    int SNIICount;$/;"	m	struct:StructPstarIOCompactMix
SNIICount	StructuresForIO.h	/^    int SNIICount;$/;"	m	struct:StructPstarIOLean
SNIIDensity	SNII.c	/^static double SNIIDensity;$/;"	v	file:
SNIIEjector	Delayed.c	/^static double SNIIEjector; \/\/ Ejector mass per solar mass.$/;"	v	file:
SNIIEnergy	Delayed.c	/^static double SNIIEnergy; \/\/ energy per solar mass.$/;"	v	file:
SNIIEnergy	SNII.c	/^static double SNIIEnergy;$/;"	v	file:
SNIIEnergy	StellarFeedback.c	/^static double SNIIEnergy;$/;"	v	file:
SNIIEnergyEfficiency	IMFParameters.h	10;"	d
SNIIEnergyPerNumber	IMFParameters.h	9;"	d
SNIIMetal	Delayed.c	/^static double SNIIMetal;    \/\/ Metal mass per solar mass.$/;"	v	file:
SNIINumber	Delayed.c	/^double SNIINumber; \/\/ per solar mass.$/;"	v
SNIINumber	SNII.c	/^static double SNIINumber;$/;"	v	file:
SNIINumberPerMass	StellarFeedback.c	/^static double SNIINumberPerMass;$/;"	v	file:
SNIaCount	DataStructures.h	/^    int       SNIaCount;  \/\/ Use this counter for SNeIa$/;"	m	struct:StructPstar_tag
SNIaCount	StructuresForIO.h	/^    int SNIaCount;$/;"	m	struct:StructPstarIOCompact
SNIaCount	StructuresForIO.h	/^    int SNIaCount;$/;"	m	struct:StructPstarIOCompactDouble
SNIaCount	StructuresForIO.h	/^    int SNIaCount;$/;"	m	struct:StructPstarIOCompactMix
SNIaCount	StructuresForIO.h	/^    int SNIaCount;$/;"	m	struct:StructPstarIOLean
SNRMetalScalling	StellarFeedback.c	/^static inline double __attribute__((always_inline)) SNRMetalScalling(const double Z){$/;"	f	file:
SORT_MORTON	StructureOperation.c	112;"	d	file:
SORT_TIMESTEP	StructureOperation.c	113;"	d	file:
SOURCES	Makefile	/^SOURCES   = $(wildcard $(SRCDIR)\/*.c)$/;"	m
SPHKernel	KernelFunctions.h	/^static inline double __attribute__((always_inline)) SPHKernel(const double r, const double InvKerneli){ $/;"	f
SPHKernel	main.c	/^static double SPHKernel(const double r, const double InvKerneli){$/;"	f	file:
SQ	Astro.h	5;"	d
SRCDIR	Makefile	/^  SRCDIR  = .$/;"	m
SRCDIR	Makefile	/^SRCDIR    = .\/$/;"	m
STARFORMATION	reconfig.h	116;"	d
STARFORMATION	reconfig.h	163;"	d
STARFORMATION	reconfig.h	211;"	d
STARFORMATION	reconfig.h	259;"	d
STARFORMATION	reconfig.h	301;"	d
STARFORMATION	reconfig.h	351;"	d
STARFORMATION	reconfig.h	408;"	d
STARFORMATION	reconfig.h	440;"	d
STARFORMATION	reconfig.h	475;"	d
STARFORMATION	reconfig.h	531;"	d
STARFORMATION	reconfig.h	576;"	d
STARFORMATION	reconfig.h	615;"	d
STARFORMATION	reconfig.h	654;"	d
STARFORMATION	reconfig.h	693;"	d
STARFORMATION	reconfig.h	73;"	d
STARFORMATION	reconfig.h	740;"	d
STARFORMATION	reconfig.h	794;"	d
STARFORMATION	reconfig.h	842;"	d
STARFORMATION	reconfig.h	892;"	d
STARFORMATION	reconfig.h	959;"	d
SW	SizeDetermination.c	/^        struct StructCSActiveSWParticle    SW; $/;"	m	union:StructActiveParticle::__anon7	typeref:struct:StructActiveParticle::__anon7::StructCSActiveSWParticle	file:
SW	SizeDetermination.c	/^        struct StructCSImportSWParticle    SW; $/;"	m	union:StructCSImport::__anon6	typeref:struct:StructCSImport::__anon6::StructCSImportSWParticle	file:
SWAP	Astro.h	7;"	d
SWScaleFactor	StellarWind.c	7;"	d	file:
SW_lifetime	StellarWind.c	/^static double SW_lifetime;$/;"	v	file:
SYMMETRIC	reconfig.h	27;"	d
ScaleLengthFUV	Heating.c	/^static double ScaleLengthFUV = 0.e0;$/;"	v	file:
SelectActives	TestRuns.c	/^static void SelectActives(void){$/;"	f	file:
SendBuf	BoundaryCondition.c	/^static inline __attribute__((always_inline)) void *SendBuf(const bool target, void *sendbuf){$/;"	f	file:
SendBuf	IO.c	/^static inline __attribute__((always_inline)) void *SendBuf(const bool target, void *sendbuf){$/;"	f	file:
SendBuf	Logs.c	/^static inline __attribute__((always_inline)) void *SendBuf(const bool target, void *sendbuf){$/;"	f	file:
SendBuf	StarFormation.c	/^static inline __attribute__((always_inline)) void *SendBuf(const bool target, void *sendbuf){$/;"	f	file:
SendRank	DataStructures.h	/^    int SendRank;$/;"	m	struct:StructCommunicationTable
SendSize	DataStructures.h	/^    int SendSize;$/;"	m	struct:StructCommunicationTable
Sequence	PowderSnow.c	/^static unsigned long Sequence = 0;$/;"	v	file:
SetConstantViscosityParameters	SetUpTestRun.c	/^static void SetConstantViscosityParameters(const double Alpha){$/;"	f	file:
SetDecompositionKey	Decomposition.c	/^static void SetDecompositionKey(void){$/;"	f	file:
SetFOFLinkingLength	FOF.c	/^void SetFOFLinkingLength(const double LL){$/;"	f
SetGRAPE	ForceGRAPE.c	/^void SetGRAPE(void){$/;"	f
SetGRAPEScaleForParallelTreeGRAPE	ForceParallelTreeGRAPE.c	/^static void SetGRAPEScaleForParallelTreeGRAPE(void){$/;"	f	file:
SetParameterVariableAlpha	HydroAcc.c	313;"	d	file:
SetParameterVariableAlpha	HydroAcc.c	316;"	d	file:
SetParameterVariableAlphaHosono	HydroAcc.c	284;"	d	file:
SetParameterVariableAlphaHosono	HydroAcc.c	287;"	d	file:
SetParticleDistribution	TestRuns.c	/^static void SetParticleDistribution(const int number){$/;"	f	file:
SetParticles	SetUpTestRun.c	/^static void SetParticles(const int NGrid){$/;"	f	file:
SetVariableViscosityParameters	SetUpTestRun.c	/^static void SetVariableViscosityParameters(const double AlphaMin, const double AlphaMax, const double SourceFactor, const double InvDumpingScale){$/;"	f	file:
SetViscosityParameters	SetUpTestRun.c	/^void SetViscosityParameters(const double AlphaMin, const double AlphaMax, const double SourceFactor, const double InvDumpingScale){$/;"	f
ShardID	PowderSnow.c	/^static int ShardID = 0;$/;"	v	file:
ShowHydroDataASCIIFormat	IO.c	/^void ShowHydroDataASCIIFormat(const int mode){$/;"	f
ShowLog	SinkParticle.c	8;"	d	file:
ShowNeighborInformation	IO.c	/^void ShowNeighborInformation(const int index, const int mode){$/;"	f
ShowResults	Run.c	567;"	d	file:
ShowTestFUVFeedbackParams	TestRuns.c	/^static void ShowTestFUVFeedbackParams(void){$/;"	f	file:
ShowUsage	IO.c	/^static void ShowUsage(void){$/;"	f	file:
ShuffleStructures	StructureOperation.c	/^void ShuffleStructures(void){$/;"	f
Sign	Astro.h	14;"	d
SimulationModel	SetUpTestRun.c	/^    int SimulationModel; \/\/ 0 = MW, 1 = Dwarf$/;"	m	struct:StructDiceRun	file:
SingleStepCoolingSkip	config.h	137;"	d
Sink	DataStructures.h	/^    double Sink;$/;"	m	struct:StructTimingResults
SinkAccretion	DataStructures.h	/^    double SinkAccretion;$/;"	m	struct:StructTimingResults
SinkAccretionThisStep	DataStructures.h	/^    double SinkAccretionThisStep;$/;"	m	struct:StructTimingResults
SinkComm	DataStructures.h	/^    double SinkComm;$/;"	m	struct:StructTimingResults
SinkCommThisStep	DataStructures.h	/^    double SinkCommThisStep;$/;"	m	struct:StructTimingResults
SinkDistCmp	TestRuns.c	/^static int SinkDistCmp(const void *_x, const void *_y){$/;"	f	file:
SinkFOF	SinkParticle.c	/^} *SinkFOF;$/;"	v	typeref:struct:StructSinkFOF
SinkFOFCatalog	SinkParticle.c	/^} *SinkFOFCatalog;$/;"	v	typeref:struct:StructSinkFOFCatalog
SinkFOFCatalogSize	SinkParticle.c	/^int SinkFOFCatalogSize;$/;"	v
SinkFOFGroups	SinkParticle.c	/^int SinkFOFGroups;$/;"	v
SinkFOFSize	SinkParticle.c	/^int SinkFOFSize;$/;"	v
SinkFormation	DataStructures.h	/^    double SinkFormation;$/;"	m	struct:StructTimingResults
SinkFormationThisStep	DataStructures.h	/^    double SinkFormationThisStep;$/;"	m	struct:StructTimingResults
SinkGasAbsorptionThresholdDensity	SinkParticle.c	/^static double SinkGasAbsorptionThresholdDensity;$/;"	v	file:
SinkHydroAccretion	SinkParticle.c	/^static void SinkHydroAccretion(void){$/;"	f	file:
SinkHydroAccretionExported	SinkParticle.c	/^void SinkHydroAccretionExported(void){$/;"	f
SinkHydroAngularMomentumCheck	SinkParticle.c	/^static inline bool SinkHydroAngularMomentumCheck(const double AccretionRadius, $/;"	f	file:
SinkHydroBoundCheck	SinkParticle.c	/^static inline bool __attribute__((always_inline)) SinkHydroBoundCheck(const double Mass_sink, const double Pos_sink[], const double Vel_sink[],$/;"	f	file:
SinkHydroMergingCheckForImportedData	SinkParticle.c	/^static void SinkHydroMergingCheckForImportedData(const int NProcs, int NImportThisTime[restrict],$/;"	f	file:
SinkHydroMergingCheckForLocalData	SinkParticle.c	/^static void SinkHydroMergingCheckForLocalData(const int NActives, int ActiveIndexList[restrict],$/;"	f	file:
SinkLocalFOFLink	SinkParticle.c	/^static void SinkLocalFOFLink(struct StructParticleDataForActiveSinkFOF ParticleDataForActiveFOF[restrict]){$/;"	f	file:
SinkNBCache	DataStructures.c	/^StructNBCache *SinkNBCache;$/;"	v
SinkNeighborSearch	DataStructures.h	/^    double SinkNeighborSearch;$/;"	m	struct:StructTimingResults
SinkNeighborSearchThisStep	DataStructures.h	/^    double SinkNeighborSearchThisStep;$/;"	m	struct:StructTimingResults
SinkNode	DataStructures.c	/^struct StructHydroNode *SinkNode;$/;"	v	typeref:struct:StructHydroNode
SinkParticles	SinkParticle.c	/^void SinkParticles(void){$/;"	f
SinkRoot	DataStructures.c	/^StructHydroRoot SinkRoot;$/;"	v
SinkSinkBoundCheck	SinkParticle.c	/^static bool __attribute__((always_inline)) SinkSinkBoundCheck(const double Mass_sink1, const double Pos_sink1[], const double Vel_sink1[],$/;"	f	file:
SinkSinkMerging	SinkParticle.c	/^void SinkSinkMerging(void){$/;"	f
SinkSinkMergingEngine	SinkParticle.c	/^static int SinkSinkMergingEngine(struct StructParticleDataForActiveSinkFOF ParticleDataForActiveFOF[restrict]){$/;"	f	file:
SinkSinkMergingExported	SinkParticle.c	/^void SinkSinkMergingExported(void){$/;"	f
SinkStarAngularMomentumCheck	SinkParticle.c	/^static inline bool SinkStarAngularMomentumCheck(const double AccretionRadius, $/;"	f	file:
SinkStarBoundCheck	SinkParticle.c	/^static inline bool __attribute__((always_inline)) SinkStarBoundCheck(const double Mass_sink, const double Pos_sink[], const double Vel_sink[],$/;"	f	file:
SinkStarMergingCheckForImportedData	SinkParticle.c	/^static void SinkStarMergingCheckForImportedData(const int NProcs, int NImportThisTime[restrict],$/;"	f	file:
SinkStarMergingCheckForLocalData	SinkParticle.c	/^static void SinkStarMergingCheckForLocalData(const int NActives, int ActiveIndexList[restrict],$/;"	f	file:
SinkThisStep	DataStructures.h	/^    double SinkThisStep;$/;"	m	struct:StructTimingResults
SinkThresholdDensity	DataStructures.h	/^    double SinkThresholdDensity;$/;"	m	struct:StructPall
SinkTree	DataStructures.h	/^    double SinkTree;$/;"	m	struct:StructTimingResults
SinkTreeThisStep	DataStructures.h	/^    double SinkTreeThisStep;$/;"	m	struct:StructTimingResults
Sister	DataStructures.h	/^	int Sister;$/;"	m	struct:StructGravityNode
Sister	DataStructures.h	/^	int Sister;$/;"	m	struct:StructHydroNode
Sister	DataStructures.h	/^	int Sister;$/;"	m	struct:StructYoungStarNode
SlabR	SNII.c	37;"	d	file:
SlabZ	SNII.c	38;"	d	file:
SmoothedMassConversionFactor	HydroKernel.c	/^static double SmoothedMassConversionFactor;$/;"	v	file:
SmoothedMassConversionFactor	SizeDetermination.c	/^static double SmoothedMassConversionFactor;$/;"	v	file:
SmoothedMassConversionFactor	StellarFeedback.c	/^static double SmoothedMassConversionFactor;$/;"	v	file:
SmoothedNumber	DataStructures.h	/^    double    SmoothedNumber;    \/\/ <TMP> <LEAN> Smoothed Number.$/;"	m	struct:StructPhydro_tag
SmoothedNumber	HydroKernel.c	/^    double    SmoothedNumber;    \/\/ Mass.$/;"	m	struct:StructHydroKernelImport	file:
SmoothedNumber	HydroKernel.c	/^    double SmoothedNumber; \/\/ Smoothed mas..$/;"	m	struct:StructActiveHydroParticle	file:
SmoothedNumber	SizeDetermination.c	/^    double    SmoothedNumber;    \/\/ Mass.$/;"	m	struct:StructCSImport	file:
SmoothedNumber	SizeDetermination.c	/^    double SmoothedNumber; \/\/ Smoothed mas..$/;"	m	struct:StructActiveParticle	file:
SmoothedNumber	SizeDetermination.c	/^    double SmoothedNumber;$/;"	m	struct:StructCSStellarFeedbackLocalInfo	file:
SmoothedNumber	SizeDetermination.c	/^    double SmoothedNumber;$/;"	m	struct:StructCSStellarWindLocalInfo	file:
SmoothedNumber	StellarFeedback.c	/^    double SmoothedNumber; \/\/ Smoothed mas..$/;"	m	struct:StructStellarFeedbackImport	file:
SmoothedNumber	StellarFeedback.c	/^    double SmoothedNumber;$/;"	m	struct:StructStellarFeedbackLocalInfo	file:
SmoothedNumber	StellarFeedback.h	/^    double SmoothedNumber; \/\/ Smoothed mas..$/;"	m	struct:StructActiveStellarFeedbackParticle
Snprintf	Astro.h	79;"	d
SolarAbundancePattern	EstimateXFe.c	/^struct StructSolarAbundancePattern SolarAbundancePattern[] = {$/;"	v	typeref:struct:StructSolarAbundancePattern
SolarAbundancePatternSize	EstimateXFe.c	/^const int SolarAbundancePatternSize = 83;$/;"	v
SortAllStructures	StructureOperation.c	/^void SortAllStructures(void){$/;"	f
SortFOFCatalogByMass	FOF.c	/^static void SortFOFCatalogByMass(void){$/;"	f	file:
SortNeighborListAndSetKernelSize	SizeDetermination.c	/^static inline void SortNeighborListAndSetKernelSize(struct StructActiveParticle *AP_i, int Neighbors[]){$/;"	f	file:
SortNeighrboListCmpR2	SizeDetermination.c	/^static int SortNeighrboListCmpR2(const void *x, const void *y){$/;"	f	file:
SortStep	StructureOperation.c	/^static int SortStep = SortStepSkip+1;$/;"	v	file:
SortStepSkip	StructureOperation.c	115;"	d	file:
SortStructPbody	StructureOperation.c	/^static void SortStructPbody(void){$/;"	f	file:
SortStructPhydro	StructureOperation.c	/^static void SortStructPhydro(void){$/;"	f	file:
SortStructPsink	StructureOperation.c	/^static void SortStructPsink(void){$/;"	f	file:
SortStructPstar	StructureOperation.c	/^static void SortStructPstar(void){$/;"	f	file:
SortStructures	DataStructures.h	/^    double SortStructures;$/;"	m	struct:StructTimingResults
SortStructuresThisStep	DataStructures.h	/^    double SortStructuresThisStep;$/;"	m	struct:StructTimingResults
SpawnMass	DataStructures.h	/^    double  SpawnMass;  \/\/ <LEAN>$/;"	m	struct:StructPhydro_tag
SpawnMass	SetUpTestRun.c	/^    double  SpawnMass;$/;"	m	struct:StructGas	file:
SpawnMass	StructuresForIO.h	/^    double SpawnMass;$/;"	m	struct:StructPhydroIOCompactDouble
SpawnMass	StructuresForIO.h	/^    float SpawnMass;$/;"	m	struct:StructPhydroIOCompact
SpawnMass	StructuresForIO.h	/^    float SpawnMass;$/;"	m	struct:StructPhydroIOCompactMix
SpawnStarParticle	StarFormation.c	/^static bool SpawnStarParticle(const int index){$/;"	f	file:
SpawnTimes	DataStructures.h	/^    short   SpawnTimes; \/\/ <LEAN>$/;"	m	struct:StructPhydro_tag
SpawnTimes	SetUpTestRun.c	/^    short   SpawnTimes;$/;"	m	struct:StructGas	file:
SpawnTimes	StructuresForIO.h	/^    short SpawnTimes;$/;"	m	struct:StructPhydroIOCompact
SpawnTimes	StructuresForIO.h	/^    short SpawnTimes;$/;"	m	struct:StructPhydroIOCompactDouble
SpawnTimes	StructuresForIO.h	/^    short SpawnTimes;$/;"	m	struct:StructPhydroIOCompactMix
SphericalAbsorptionBoundary	BoundaryCondition.c	/^static bool SphericalAbsorptionBoundary(const int index){$/;"	f	file:
Spin_NFW	SetUpTestRun.c	/^double Spin_NFW;$/;"	v
Spline1D	Cooling.c	/^static void Spline1D(const int n, double x[n], double y[n], double xi, double *yi){$/;"	f	file:
Spline2D	Cooling.c	/^static void Spline2D(const int n1, const int n2, $/;"	f	file:
Spline3D	Cooling.c	/^static void Spline3D(const int n1, const int n2, const int n3, $/;"	f	file:
Spline4D	Cooling.c	/^static void Spline4D(const int n1, const int n2, const int n3, const int n4, $/;"	f	file:
SplineAccessAge	IMF.c	/^static gsl_spline *SplineAccessAge[LIFETIME_Z];$/;"	v	file:
SplineAccessLogT	Cooling.c	/^static gsl_spline       *SplineAccessLogT[SIZE_TABLE_Z][SIZE_TABLE_G0][SIZE_TABLE_FH2];$/;"	v	file:
SplineAccessMass	IMF.c	/^static gsl_spline *SplineAccessMass[LIFETIME_Z];$/;"	v	file:
Split	ParticleSplitting.c	/^    Split,$/;"	e	enum:SplitColor	file:
SplitColor	ParticleSplitting.c	/^enum SplitColor{$/;"	g	file:
SplitCondition	ParticleSplitting.c	/^static bool SplitCondition(const int Index){$/;"	f	file:
SplitConditionForAgressiveParticleSplittingStrategy	ParticleSplitting.c	/^static int SplitConditionForAgressiveParticleSplittingStrategy(const int Index){$/;"	f	file:
SplitDomain	PreDecomposition.c	/^static void SplitDomain(const int Ndomain, const int Direction, const int DataSize, struct StructPreDecomposition Data[restrict], double Edge[restrict], int EdgeSize[restrict]){$/;"	f	file:
SplitFlag	DataStructures.h	/^    bool   SplitFlag;$/;"	m	struct:StructPhydro_tag
SplitFlag	StructuresForIO.h	/^    bool SplitFlag;$/;"	m	struct:StructPhydroIOCompact
SplitFlag	StructuresForIO.h	/^    bool SplitFlag;$/;"	m	struct:StructPhydroIOCompactDouble
SplitFlag	StructuresForIO.h	/^    bool SplitFlag;$/;"	m	struct:StructPhydroIOCompactMix
SplitFlag	StructuresForIO.h	/^    bool SplitFlag;$/;"	m	struct:StructPhydroIOLean
SplitGeneration	DataStructures.h	/^    int    SplitGeneration; \/\/ Set particle generation.$/;"	m	struct:StructPhydro_tag
SplitGeneration	DataStructures.h	/^    int    SplitGeneration; \/\/ Set particle generation.$/;"	m	struct:StructPsink_tag
SplitGeneration	DataStructures.h	/^    int    SplitGeneration; \/\/ Set particle generation.$/;"	m	struct:StructPstar_tag
SplitGeneration	StructuresForIO.h	/^    int SplitGeneration;$/;"	m	struct:StructPhydroIOCompact
SplitGeneration	StructuresForIO.h	/^    int SplitGeneration;$/;"	m	struct:StructPhydroIOCompactDouble
SplitGeneration	StructuresForIO.h	/^    int SplitGeneration;$/;"	m	struct:StructPhydroIOCompactMix
SplitGeneration	StructuresForIO.h	/^    int SplitGeneration;$/;"	m	struct:StructPhydroIOLean
SplitGeneration	StructuresForIO.h	/^    int SplitGeneration;$/;"	m	struct:StructPsinkIOCompact
SplitGeneration	StructuresForIO.h	/^    int SplitGeneration;$/;"	m	struct:StructPsinkIOCompactDouble
SplitGeneration	StructuresForIO.h	/^    int SplitGeneration;$/;"	m	struct:StructPsinkIOCompactMix
SplitGeneration	StructuresForIO.h	/^    int SplitGeneration;$/;"	m	struct:StructPsinkIOLean
SplitGeneration	StructuresForIO.h	/^    int SplitGeneration;$/;"	m	struct:StructPstarIOCompact
SplitGeneration	StructuresForIO.h	/^    int SplitGeneration;$/;"	m	struct:StructPstarIOCompactDouble
SplitGeneration	StructuresForIO.h	/^    int SplitGeneration;$/;"	m	struct:StructPstarIOCompactMix
SplitGeneration	StructuresForIO.h	/^    int SplitGeneration;$/;"	m	struct:StructPstarIOLean
SplitInAdvance	ParticleSplitting.c	/^    SplitInAdvance,$/;"	e	enum:SplitColor	file:
SplitNthChildren	DataStructures.h	/^    int    SplitNthChildren;        \/\/ Set particle generation.$/;"	m	struct:StructPhydro_tag
SplitNthChildren	DataStructures.h	/^    int    SplitNthChildren;        \/\/ Set particle generation.$/;"	m	struct:StructPsink_tag
SplitNthChildren	DataStructures.h	/^    int    SplitNthChildren;        \/\/ Set particle generation.$/;"	m	struct:StructPstar_tag
SplitNthChildren	StructuresForIO.h	/^    int SplitNthChildren;$/;"	m	struct:StructPhydroIOCompact
SplitNthChildren	StructuresForIO.h	/^    int SplitNthChildren;$/;"	m	struct:StructPhydroIOCompactDouble
SplitNthChildren	StructuresForIO.h	/^    int SplitNthChildren;$/;"	m	struct:StructPhydroIOCompactMix
SplitNthChildren	StructuresForIO.h	/^    int SplitNthChildren;$/;"	m	struct:StructPhydroIOLean
SplitNthChildren	StructuresForIO.h	/^    int SplitNthChildren;$/;"	m	struct:StructPsinkIOCompact
SplitNthChildren	StructuresForIO.h	/^    int SplitNthChildren;$/;"	m	struct:StructPsinkIOCompactDouble
SplitNthChildren	StructuresForIO.h	/^    int SplitNthChildren;$/;"	m	struct:StructPsinkIOCompactMix
SplitNthChildren	StructuresForIO.h	/^    int SplitNthChildren;$/;"	m	struct:StructPsinkIOLean
SplitNthChildren	StructuresForIO.h	/^    int SplitNthChildren;$/;"	m	struct:StructPstarIOCompact
SplitNthChildren	StructuresForIO.h	/^    int SplitNthChildren;$/;"	m	struct:StructPstarIOCompactDouble
SplitNthChildren	StructuresForIO.h	/^    int SplitNthChildren;$/;"	m	struct:StructPstarIOCompactMix
SplitNthChildren	StructuresForIO.h	/^    int SplitNthChildren;$/;"	m	struct:StructPstarIOLean
SplitTypes	ParticleSplitting.c	/^    SplitTypes,$/;"	e	enum:SplitColor	file:
StarFormation	StarFormation.c	/^void StarFormation(void){$/;"	f
StarFormationElementNumberError	Errors.h	33;"	d
StarFormationTimeScale	StarFormation.c	305;"	d	file:
Starformation	DataStructures.h	/^    double Starformation; $/;"	m	struct:StructTimingResults
StarformationThisStep	DataStructures.h	/^    double StarformationThisStep;$/;"	m	struct:StructTimingResults
Start	Run.c	552;"	d	file:
StaticPotential	main.c	/^void StaticPotential(void){$/;"	f
StellarFeedback	StellarFeedback.c	/^void StellarFeedback(void){$/;"	f
StellarFeedbackAllocateContanctedDomainID	StellarFeedback.c	/^static inline void __attribute__((always_inline)) StellarFeedbackAllocateContanctedDomainID(void){$/;"	f	file:
StellarFeedbackContactedDomainID	StellarFeedback.c	/^static int *StellarFeedbackContactedDomainID;$/;"	v	file:
StellarFeedbackEndProcedure	StellarFeedback.c	/^static void StellarFeedbackEndProcedure(const int NExplosion, const int IndexList[restrict], const int TypeList[restrict]){$/;"	f	file:
StellarFeedbackEntry	SizeDetermination.c	/^static int StellarFeedbackEntry(struct StructActiveParticle AP[], bool CalcSizeExportFlags[], const int NProcs){$/;"	f	file:
StellarFeedbackExportFlags	StellarFeedback.c	/^static bool *StellarFeedbackExportFlags = NULL;$/;"	v	file:
StellarFeedbackExportFlagsMaxAllocated	StellarFeedback.c	/^static int StellarFeedbackExportFlagsMaxAllocated = 0;$/;"	v	file:
StellarFeedbackGatherScatterESA	StellarFeedback.c	/^void StellarFeedbackGatherScatterESA(void){$/;"	f
StellarFeedbackGetIMFType	StellarFeedback.c	/^int StellarFeedbackGetIMFType(void){$/;"	f
StellarFeedbackGetSNIaType	StellarFeedback.c	/^int StellarFeedbackGetSNIaType(void){$/;"	f
StellarFeedbackNContactedDomains	StellarFeedback.c	/^static int StellarFeedbackNContactedDomains;$/;"	v	file:
StellarFeedbackRadiusFactDec	SizeDetermination.c	1624;"	d	file:
StellarFeedbackRadiusFactDec	StellarFeedback.c	233;"	d	file:
StellarFeedbackRadiusFactInc	SizeDetermination.c	1623;"	d	file:
StellarFeedbackRadiusFactInc	StellarFeedback.c	232;"	d	file:
StellarFeedbackRadiusInitialGuess	StellarFeedback.c	/^double StellarFeedbackRadiusInitialGuess(const int Index){$/;"	f
StellarFeedbackTest1	TestRuns.c	/^static void StellarFeedbackTest1(void){$/;"	f	file:
StellarFeedbackTest2	TestRuns.c	/^static void StellarFeedbackTest2(void){$/;"	f	file:
StellarFeedbackTest3	TestRuns.c	/^static void StellarFeedbackTest3(void){$/;"	f	file:
StellarFeedbackTest4	TestRuns.c	/^static void StellarFeedbackTest4(void){$/;"	f	file:
StellarFeedbackTest5	TestRuns.c	/^static void StellarFeedbackTest5(void){$/;"	f	file:
StellarFeedbackTestCalcFeedbackRadius	StellarFeedback.c	/^void StellarFeedbackTestCalcFeedbackRadius(int NActives, const int IndexList[restrict], const int TypeList[restrict], double Radius[restrict], int Nlist[restrict], int CheckSum[restrict]){$/;"	f
StellarFeedbackTestCheckMassConservation	TestRuns.c	/^static void StellarFeedbackTestCheckMassConservation(void){$/;"	f	file:
StellarFeedbackTestReleaseEnergyHeavyElements	StellarFeedback.c	/^void StellarFeedbackTestReleaseEnergyHeavyElements(const int NExplosion, const int IndexList[restrict], const int TypeList[restrict]){$/;"	f
StellarFeedbackTestWriteData	TestRuns.c	/^static void StellarFeedbackTestWriteData(char *fname){$/;"	f	file:
StellarFeedbackType_AGB	StellarFeedback.h	/^    StellarFeedbackType_AGB  = CELibFeedbackType_AGB,$/;"	e	enum:__anon9
StellarFeedbackType_NSM	StellarFeedback.h	/^    StellarFeedbackType_NSM  = CELibFeedbackType_NSM,$/;"	e	enum:__anon9
StellarFeedbackType_Number	StellarFeedback.h	/^    StellarFeedbackType_Number,$/;"	e	enum:__anon9
StellarFeedbackType_RP	StellarFeedback.h	/^    StellarFeedbackType_RP,$/;"	e	enum:__anon9
StellarFeedbackType_SNII	StellarFeedback.h	/^    StellarFeedbackType_SNII = CELibFeedbackType_SNII,$/;"	e	enum:__anon9
StellarFeedbackType_SNIa	StellarFeedback.h	/^    StellarFeedbackType_SNIa = CELibFeedbackType_SNIa,$/;"	e	enum:__anon9
StellarFeedbackType_SW	StellarFeedback.h	/^    StellarFeedbackType_SW,$/;"	e	enum:__anon9
StellarNBCache	DataStructures.c	/^StructNBCache *StellarNBCache;$/;"	v
StellarNode	DataStructures.c	/^struct StructHydroNode *StellarNode;$/;"	v	typeref:struct:StructHydroNode
StellarNodeDataImplantNew	PlantStellarTree.c	/^static void StellarNodeDataImplantNew(const int CurrentNodeID){$/;"	f	file:
StellarNodeSeparationCriterion	PlantStellarTree.c	/^static inline bool StellarNodeSeparationCriterion(const int CurrentNodeID, const int CriticalNumber){$/;"	f	file:
StellarRoot	DataStructures.c	/^StructHydroRoot StellarRoot;$/;"	v
StellarTreeInitialized	PlantStellarTree.c	/^static bool StellarTreeInitialized = false;$/;"	v	file:
StellarTreePreprocessing	PlantStellarTree.c	/^static void StellarTreePreprocessing(void){$/;"	f	file:
StellarWindDataSize	StellarWindEnergy.h	1;"	d
StellarWindEnergy	DataStructures.h	/^    double StellarWindEnergy;$/;"	m	struct:StructPstar_tag
StellarWindEnergy	StellarWindEnergy.h	/^double StellarWindEnergy[][StellarWindDataSize] = {$/;"	v
StellarWindEnergy	StructuresForIO.h	/^    double StellarWindEnergy;$/;"	m	struct:StructPstarIOCompactDouble
StellarWindEnergy	StructuresForIO.h	/^    float StellarWindEnergy;$/;"	m	struct:StructPstarIOCompact
StellarWindEnergy	StructuresForIO.h	/^    float StellarWindEnergy;$/;"	m	struct:StructPstarIOCompactMix
StellarWindEnergy	StructuresForIO.h	/^    float StellarWindEnergy;$/;"	m	struct:StructPstarIOLean
StellarWindEntry	SizeDetermination.c	/^static int StellarWindEntry(struct StructActiveParticle AP[], bool CalcSizeExportFlags[], const int NProcs){$/;"	f	file:
StellarWindFindTargetAgeTableIndex	StellarWind.c	/^static inline int __attribute__((always_inline)) StellarWindFindTargetAgeTableIndex(const double Age){$/;"	f	file:
StellarWindFindTargetMetalTableIndex	StellarWind.c	/^static inline int __attribute__((always_inline)) StellarWindFindTargetMetalTableIndex(const double Z){$/;"	f	file:
StellarWindRadiusFactDec	SizeDetermination.c	1745;"	d	file:
StellarWindRadiusFactInc	SizeDetermination.c	1744;"	d	file:
StellarWindRadiusInitialGuess	SizeDetermination.c	/^double StellarWindRadiusInitialGuess(const int Index){$/;"	f
StellarWindTime	StellarWindEnergy.h	/^double StellarWindTime[] = {0.0,$/;"	v
StellarWindZ	StellarWindEnergy.h	/^double StellarWindZ[] = {0.e0,0.000001,0.0001,0.001,0.004,0.008,0.02,0.05};$/;"	v
StretchDataArrayes	ParticleSplitting.c	/^static void StretchDataArrayes(const int LocalSplittingTarget){$/;"	f	file:
StretchSinkFOFStructure	SinkParticle.c	/^static void StretchSinkFOFStructure(const int Number){$/;"	f	file:
StretchStructPbody	StructureOperation.c	/^void StretchStructPbody(const int nadd){$/;"	f
StretchStructPhydro	StructureOperation.c	/^void StretchStructPhydro(const int nadd){$/;"	f
StretchStructPsink	StructureOperation.c	/^void StretchStructPsink(const int nadd){$/;"	f
StretchStructPstar	StructureOperation.c	/^void StretchStructPstar(const int nadd){$/;"	f
StromgrenRadius	DataStructures.h	/^    double  StromgrenRadius;\/\/ <LEAN> $/;"	m	struct:StructPstar_tag
StromgrenRadius	StructuresForIO.h	/^    double StromgrenRadius;$/;"	m	struct:StructPstarIOCompactDouble
StromgrenRadius	StructuresForIO.h	/^    float StromgrenRadius;$/;"	m	struct:StructPstarIOCompact
StromgrenRadius	StructuresForIO.h	/^    float StromgrenRadius;$/;"	m	struct:StructPstarIOCompactMix
StructActiveHIIParticle	HIIregion.c	/^struct StructActiveHIIParticle{$/;"	s	file:
StructActiveHydroParticle	HydroKernel.c	/^struct StructActiveHydroParticle{$/;"	s	file:
StructActiveParticle	SizeDetermination.c	/^struct StructActiveParticle{$/;"	s	file:
StructActiveStellarFeedbackParticle	StellarFeedback.h	/^struct StructActiveStellarFeedbackParticle {$/;"	s
StructActiveStellarFeedbackRPParticle	StellarFeedback.h	/^struct StructActiveStellarFeedbackRPParticle {$/;"	s
StructActiveStellarFeedbackSNParticle	StellarFeedback.h	/^struct StructActiveStellarFeedbackSNParticle {$/;"	s
StructAverageElementMass	EstimateXFe.c	/^struct StructAverageElementMass{$/;"	s	file:
StructBinarySearch	HIIregion.c	/^struct StructBinarySearch {$/;"	s	file:
StructBinarySearch	HydroDensity.c	/^struct StructBinarySearch {$/;"	s	file:
StructCSActiveHIIParticle	SizeDetermination.c	/^struct StructCSActiveHIIParticle{$/;"	s	file:
StructCSActiveHydroParticle	SizeDetermination.c	/^struct StructCSActiveHydroParticle{$/;"	s	file:
StructCSActiveRPParticle	SizeDetermination.c	/^struct StructCSActiveRPParticle{$/;"	s	file:
StructCSActiveSNParticle	SizeDetermination.c	/^struct StructCSActiveSNParticle{$/;"	s	file:
StructCSActiveSWParticle	SizeDetermination.c	/^struct StructCSActiveSWParticle{$/;"	s	file:
StructCSExport	SizeDetermination.c	/^struct StructCSExport{$/;"	s	file:
StructCSHIILocalInfo	SizeDetermination.c	/^struct StructCSHIILocalInfo {$/;"	s	file:
StructCSHydroLocalInfo	SizeDetermination.c	/^struct StructCSHydroLocalInfo {$/;"	s	file:
StructCSImport	SizeDetermination.c	/^struct StructCSImport{$/;"	s	file:
StructCSImportHIIParticle	SizeDetermination.c	/^struct StructCSImportHIIParticle {$/;"	s	file:
StructCSImportHydroParticle	SizeDetermination.c	/^struct StructCSImportHydroParticle {$/;"	s	file:
StructCSImportRPParticle	SizeDetermination.c	/^struct StructCSImportRPParticle {$/;"	s	file:
StructCSImportSNParticle	SizeDetermination.c	/^struct StructCSImportSNParticle {$/;"	s	file:
StructCSImportSWParticle	SizeDetermination.c	/^struct StructCSImportSWParticle {$/;"	s	file:
StructCSRadiationPressureLocalInfo	SizeDetermination.c	/^struct StructCSRadiationPressureLocalInfo{$/;"	s	file:
StructCSStellarFeedbackLocalInfo	SizeDetermination.c	/^struct StructCSStellarFeedbackLocalInfo{$/;"	s	file:
StructCSStellarWindLocalInfo	SizeDetermination.c	/^struct StructCSStellarWindLocalInfo{$/;"	s	file:
StructCachedData	PlantGravityTree.c	/^static struct StructCachedData{$/;"	s	file:
StructCachedData	PlantHydroTree.c	/^static struct StructCachedData{$/;"	s	file:
StructCachedData	PlantHydroTreeImported.c	/^static struct StructCachedData{$/;"	s	file:
StructCachedData	PlantStellarTree.c	/^static struct StructCachedData{$/;"	s	file:
StructCachedData	PlantYoungStarTree.c	/^static struct StructCachedData{$/;"	s	file:
StructCommunicationTable	DataStructures.h	/^extern struct StructCommunicationTable{$/;"	s
StructDM	SetUpTestRun.c	/^struct StructDM{$/;"	s	file:
StructDecomposition	PreDecomposition.c	/^struct StructDecomposition{$/;"	s	file:
StructDelayedFBActiveStars	Delayed.c	/^struct StructDelayedFBActiveStars{$/;"	s	file:
StructDelayedFBExport	Delayed.c	/^struct StructDelayedFBExport{$/;"	s	file:
StructDelayedFBImport	Delayed.c	/^struct StructDelayedFBImport{$/;"	s	file:
StructDelayedFBInjection	Delayed.c	/^struct StructDelayedFBInjection{$/;"	s	file:
StructDiceRun	SetUpTestRun.c	/^struct StructDiceRun{$/;"	s	file:
StructDistance	SetUpTestRun.c	/^struct StructDistance{$/;"	s	file:
StructDt	main.c	/^struct StructDt{$/;"	s	file:
StructECParams	TestRuns.c	/^static struct StructECParams{$/;"	s	file:
StructEdges	DataStructures.h	/^extern struct StructEdges{ $/;"	s
StructEffSAExport	CalcEffectiveSurfaceArea.c	/^struct StructEffSAExport{$/;"	s	file:
StructEffSAInput	CalcEffectiveSurfaceArea.c	/^struct StructEffSAInput{$/;"	s	file:
StructEffSAResult	CalcEffectiveSurfaceArea.c	/^struct StructEffSAResult{$/;"	s	file:
StructEnergyHeavyElements	StellarFeedback.c	/^struct StructEnergyHeavyElements{$/;"	s	file:
StructFOF	DataStructures.h	/^extern struct StructFOF{$/;"	s
StructFOFCatalog	DataStructures.h	/^extern struct StructFOFCatalog{$/;"	s
StructFOFHeader	FOF.c	/^struct StructFOFHeader{$/;"	s	file:
StructFOFIDSort	FOF.c	/^struct StructFOFIDSort{$/;"	s	file:
StructFUVLeavesExportImport	FUV.c	/^struct StructFUVLeavesExportImport{$/;"	s	file:
StructFUVTreeCache	FUV.c	/^struct StructFUVTreeCache{$/;"	s	file:
StructFUVTreeResultCache	FUV.c	/^struct StructFUVTreeResultCache{$/;"	s	file:
StructFittingCoef	EstimateXFe.c	/^struct StructFittingCoef{$/;"	s	file:
StructForceExport	ForceDirect.c	/^struct StructForceExport{$/;"	s	file:
StructForceExport	ForceGRAPE.c	/^struct StructForceExport{$/;"	s	file:
StructForceExport	ForceTree.c	/^struct StructForceExport{$/;"	s	file:
StructForceImport	ForceTree.c	/^struct StructForceImport{$/;"	s	file:
StructGas	SetUpTestRun.c	/^struct StructGas{$/;"	s	file:
StructGetLocalNeighborList	SizeDetermination.h	/^struct StructGetLocalNeighborList{$/;"	s
StructGravityAccPotCache	DataStructures.h	/^extern struct StructGravityAccPotCache{$/;"	s
StructGravityCache	DataStructures.h	/^extern struct StructGravityCache{$/;"	s
StructGravityNode	DataStructures.h	/^extern struct StructGravityNode{$/;"	s
StructGravityRoot	DataStructures.h	/^typedef struct	StructGravityRoot_tag  StructGravityRoot,*StructGravityRootptr;$/;"	t	typeref:struct:StructGravityRoot_tag
StructGravityRoot_tag	DataStructures.h	/^struct StructGravityRoot_tag {$/;"	s
StructGravityRootptr	DataStructures.h	/^typedef struct	StructGravityRoot_tag  StructGravityRoot,*StructGravityRootptr;$/;"	t	typeref:struct:
StructHIIExport	HIIregion.c	/^struct StructHIIExport{$/;"	s	file:
StructHIIImport	HIIregion.c	/^struct StructHIIImport{$/;"	s	file:
StructHIILocalDomainEdge	HIIregion.c	/^static struct StructHIILocalDomainEdge{$/;"	s	file:
StructHIILocalInfo	HIIregion.c	/^struct StructHIILocalInfo {$/;"	s	file:
StructHeader	SetUpTestRun.c	/^struct StructHeader{$/;"	s	file:
StructHydroAccCorrectEnegyDensityGradh	HydroAcc.c	/^struct StructHydroAccCorrectEnegyDensityGradh{ $/;"	s	file:
StructHydroAccExport	HydroMisc.h	/^struct StructHydroAccExport{$/;"	s
StructHydroAccImport	HydroMisc.h	/^struct StructHydroAccImport{$/;"	s
StructHydroDensityExport	HydroMisc.h	/^struct StructHydroDensityExport{$/;"	s
StructHydroDensityImport	HydroMisc.h	/^struct StructHydroDensityImport{$/;"	s
StructHydroDensityInput	HydroDensity.c	/^struct StructHydroDensityInput{$/;"	s	file:
StructHydroKernelExport	HydroKernel.c	/^struct StructHydroKernelExport{$/;"	s	file:
StructHydroKernelImport	HydroKernel.c	/^struct StructHydroKernelImport{$/;"	s	file:
StructHydroNode	DataStructures.h	/^extern struct StructHydroNode{$/;"	s
StructHydroRoot	DataStructures.h	/^typedef struct	StructHydroRoot_tag  StructHydroRoot,*StructHydroRootptr;$/;"	t	typeref:struct:StructHydroRoot_tag
StructHydroRoot_tag	DataStructures.h	/^struct StructHydroRoot_tag {$/;"	s
StructHydroRootptr	DataStructures.h	/^typedef struct	StructHydroRoot_tag  StructHydroRoot,*StructHydroRootptr;$/;"	t	typeref:struct:
StructHydroSinkFlags	SinkParticle.c	/^struct StructHydroSinkFlags{$/;"	s	file:
StructIOKeisoku	SetUpTestRun.c	/^struct StructIOKeisoku{$/;"	s	file:
StructISC	SetUpTestRun.c	/^struct StructISC{$/;"	s	file:
StructInfoBiSection	DataStructures.h	/^extern struct StructInfoBiSection{$/;"	s
StructLeavesExportImport	ForceParallelTreeGRAPE.c	/^struct StructLeavesExportImport{$/;"	s	file:
StructNB	HydroAcc.c	/^static struct StructNB{$/;"	s	file:
StructNBCache	DataStructures.h	/^typedef struct StructNBCache_tag  StructNBCache;$/;"	t	typeref:struct:StructNBCache_tag
StructNBCacheForEffSA	CalcEffectiveSurfaceArea.c	/^static struct StructNBCacheForEffSA{$/;"	s	file:
StructNBCache_tag	DataStructures.h	/^struct StructNBCache_tag{$/;"	s
StructPall	DataStructures.h	/^extern struct StructPall{$/;"	s
StructParticleDataForActiveSinkFOF	SinkParticle.c	/^struct StructParticleDataForActiveSinkFOF{$/;"	s	file:
StructPbody	DataStructures.h	/^typedef struct StructPbody_tag  StructPbody,*StructPbodyptr;$/;"	t	typeref:struct:StructPbody_tag
StructPbodyIOCompact	StructuresForIO.h	/^struct StructPbodyIOCompact{$/;"	s
StructPbodyIOCompactDouble	StructuresForIO.h	/^struct StructPbodyIOCompactDouble{$/;"	s
StructPbodyIOCompactMix	StructuresForIO.h	/^struct StructPbodyIOCompactMix{$/;"	s
StructPbodyIOLean	StructuresForIO.h	/^struct StructPbodyIOLean{$/;"	s
StructPbody_tag	DataStructures.h	/^struct StructPbody_tag{$/;"	s
StructPbodyptr	DataStructures.h	/^typedef struct StructPbody_tag  StructPbody,*StructPbodyptr;$/;"	t	typeref:struct:
StructPhydro	DataStructures.h	/^typedef struct StructPhydro_tag StructPhydro,*StructPhydroptr;$/;"	t	typeref:struct:StructPhydro_tag
StructPhydroIOCompact	StructuresForIO.h	/^struct StructPhydroIOCompact{$/;"	s
StructPhydroIOCompactDouble	StructuresForIO.h	/^struct StructPhydroIOCompactDouble{$/;"	s
StructPhydroIOCompactMix	StructuresForIO.h	/^struct StructPhydroIOCompactMix{$/;"	s
StructPhydroIOLean	StructuresForIO.h	/^struct StructPhydroIOLean{$/;"	s
StructPhydro_tag	DataStructures.h	/^struct StructPhydro_tag{$/;"	s
StructPhydroptr	DataStructures.h	/^typedef struct StructPhydro_tag StructPhydro,*StructPhydroptr;$/;"	t	typeref:struct:
StructPreDecomposition	PreDecomposition.c	/^struct StructPreDecomposition{$/;"	s	file:
StructPreDecompositionQsort	PreDecomposition.c	/^struct StructPreDecompositionQsort{$/;"	s	file:
StructPsink	DataStructures.h	/^typedef struct StructPsink_tag  StructPsink,*StructPsinkptr;$/;"	t	typeref:struct:StructPsink_tag
StructPsinkIOCompact	StructuresForIO.h	/^struct StructPsinkIOCompact{$/;"	s
StructPsinkIOCompactDouble	StructuresForIO.h	/^struct StructPsinkIOCompactDouble{$/;"	s
StructPsinkIOCompactMix	StructuresForIO.h	/^struct StructPsinkIOCompactMix{$/;"	s
StructPsinkIOLean	StructuresForIO.h	/^struct StructPsinkIOLean{$/;"	s
StructPsink_tag	DataStructures.h	/^struct StructPsink_tag{$/;"	s
StructPsinkptr	DataStructures.h	/^typedef struct StructPsink_tag  StructPsink,*StructPsinkptr;$/;"	t	typeref:struct:
StructPstar	DataStructures.h	/^typedef struct StructPstar_tag  StructPstar,*StructPstarptr;$/;"	t	typeref:struct:StructPstar_tag
StructPstarIOCompact	StructuresForIO.h	/^struct StructPstarIOCompact{$/;"	s
StructPstarIOCompactDouble	StructuresForIO.h	/^struct StructPstarIOCompactDouble{$/;"	s
StructPstarIOCompactMix	StructuresForIO.h	/^struct StructPstarIOCompactMix{$/;"	s
StructPstarIOLean	StructuresForIO.h	/^struct StructPstarIOLean{$/;"	s
StructPstar_tag	DataStructures.h	/^struct StructPstar_tag{$/;"	s
StructPstarptr	DataStructures.h	/^typedef struct StructPstar_tag  StructPstar,*StructPstarptr;$/;"	t	typeref:struct:
StructReadGalactICSBody	SetUpTestRun.c	/^struct StructReadGalactICSBody{$/;"	s	file:
StructReadGalactICSBodyFlag	SetUpTestRun.c	/^struct StructReadGalactICSBodyFlag{$/;"	s	file:
StructSinkCheckExport	SinkParticle.c	/^struct StructSinkCheckExport{ $/;"	s	file:
StructSinkExport	SinkParticle.c	/^struct StructSinkExport{ $/;"	s	file:
StructSinkFOF	SinkParticle.c	/^struct StructSinkFOF{$/;"	s	file:
StructSinkFOFCatalog	SinkParticle.c	/^struct StructSinkFOFCatalog{$/;"	s	file:
StructSinkImport	SinkParticle.c	/^struct StructSinkImport{ $/;"	s	file:
StructSinkPosSizeExport	SinkParticle.c	/^struct StructSinkPosSizeExport{ $/;"	s	file:
StructSinkPressureForces	SinkParticle.c	/^struct StructSinkPressureForces{$/;"	s	file:
StructSinkSinkFlags	SinkParticle.c	/^struct StructSinkSinkFlags{$/;"	s	file:
StructSinkSinkFlags2	SinkParticle.c	/^struct StructSinkSinkFlags2{$/;"	s	file:
StructSinkTarget	TestRuns.c	/^struct StructSinkTarget{$/;"	s	file:
StructSolarAbundancePattern	EstimateXFe.c	/^struct StructSolarAbundancePattern{$/;"	s	file:
StructSortNeighborList	SizeDetermination.c	/^struct StructSortNeighborList{$/;"	s	file:
StructStars	SetUpTestRun.c	/^struct StructStars{$/;"	s	file:
StructStellarFeedbackExport	StellarFeedback.c	/^struct StructStellarFeedbackExport{$/;"	s	file:
StructStellarFeedbackImport	StellarFeedback.c	/^struct StructStellarFeedbackImport{$/;"	s	file:
StructStellarFeedbackLocalInfo	StellarFeedback.c	/^struct StructStellarFeedbackLocalInfo{$/;"	s	file:
StructTimingResults	DataStructures.h	/^extern struct StructTimingResults{$/;"	s
StructWrite4D2UBody	IO.c	/^struct StructWrite4D2UBody{$/;"	s	file:
StructWriteCE	SetUpTestRun.c	/^struct StructWriteCE{$/;"	s	file:
StructYoungStarCache	DataStructures.h	/^extern struct StructYoungStarCache{$/;"	s
StructYoungStarNode	DataStructures.h	/^extern struct StructYoungStarNode{$/;"	s
StructYoungStarResultCache	DataStructures.h	/^extern struct StructYoungStarResultCache{$/;"	s
StructYoungStarRoot	DataStructures.h	/^typedef struct	StructYoungStarRoot_tag  StructYoungStarRoot,*StructYoungStarRootptr;$/;"	t	typeref:struct:StructYoungStarRoot_tag
StructYoungStarRoot_tag	DataStructures.h	/^struct StructYoungStarRoot_tag {$/;"	s
StructYoungStarRootptr	DataStructures.h	/^typedef struct	StructYoungStarRoot_tag  StructYoungStarRoot,*StructYoungStarRootptr;$/;"	t	typeref:struct:
StructureReportPbody	StructureOperation.c	/^void StructureReportPbody(const int Index){$/;"	f
StructureReportPbodyElement	StructureOperation.c	/^static void StructureReportPbodyElement(StructPbodyptr Pb){$/;"	f	file:
StructureReportPhydro	StructureOperation.c	/^void StructureReportPhydro(const int Index){$/;"	f
StructureReportPhydroElement	StructureOperation.c	/^static void StructureReportPhydroElement(StructPhydroptr Ph){$/;"	f	file:
StructureReportPsink	StructureOperation.c	/^void StructureReportPsink(const int Index){$/;"	f
StructureReportPsinkElement	StructureOperation.c	/^static void StructureReportPsinkElement(StructPsinkptr Psk){$/;"	f	file:
StructureReportPstar	StructureOperation.c	/^void StructureReportPstar(const int Index){$/;"	f
StructureReportPstarElement	StructureOperation.c	/^static void StructureReportPstarElement(StructPstarptr Ps){$/;"	f	file:
StructureSizeReport	StructureOperation.c	/^void StructureSizeReport(void){$/;"	f
StructureStretch	StructureOperation.c	5;"	d	file:
SuppressTensileInstability	HydroAcc.c	8;"	d	file:
SuppressTensileInstability	KernelFunctions.h	24;"	d
Sxy	DataStructures.h	/^    double    Sxy;$/;"	m	struct:StructPhydro_tag
Sxy	HydroMisc.h	/^    double Sxy;$/;"	m	struct:StructHydroAccExport
Sxy	HydroMisc.h	/^    double Sxy;$/;"	m	struct:StructHydroDensityImport
Sxy	StructuresForIO.h	/^    double Sxy;$/;"	m	struct:StructPhydroIOCompactDouble
Sxy	StructuresForIO.h	/^    float Sxy;$/;"	m	struct:StructPhydroIOCompact
Sxy	StructuresForIO.h	/^    float Sxy;$/;"	m	struct:StructPhydroIOCompactMix
Sxy	StructuresForIO.h	/^    float Sxy;$/;"	m	struct:StructPhydroIOLean
Sxz	DataStructures.h	/^    double    Sxz;$/;"	m	struct:StructPhydro_tag
Sxz	HydroMisc.h	/^    double Sxz;$/;"	m	struct:StructHydroAccExport
Sxz	HydroMisc.h	/^    double Sxz;$/;"	m	struct:StructHydroDensityImport
Sxz	StructuresForIO.h	/^    double Sxz;$/;"	m	struct:StructPhydroIOCompactDouble
Sxz	StructuresForIO.h	/^    float Sxz;$/;"	m	struct:StructPhydroIOCompact
Sxz	StructuresForIO.h	/^    float Sxz;$/;"	m	struct:StructPhydroIOCompactMix
Sxz	StructuresForIO.h	/^    float Sxz;$/;"	m	struct:StructPhydroIOLean
Syx	DataStructures.h	/^    double    Syx;$/;"	m	struct:StructPhydro_tag
Syx	HydroMisc.h	/^    double Syx;$/;"	m	struct:StructHydroAccExport
Syx	HydroMisc.h	/^    double Syx;$/;"	m	struct:StructHydroDensityImport
Syx	StructuresForIO.h	/^    double Syx;$/;"	m	struct:StructPhydroIOCompactDouble
Syx	StructuresForIO.h	/^    float Syx;$/;"	m	struct:StructPhydroIOCompact
Syx	StructuresForIO.h	/^    float Syx;$/;"	m	struct:StructPhydroIOCompactMix
Syx	StructuresForIO.h	/^    float Syx;$/;"	m	struct:StructPhydroIOLean
Syz	DataStructures.h	/^    double    Syz;$/;"	m	struct:StructPhydro_tag
Syz	HydroMisc.h	/^    double Syz;$/;"	m	struct:StructHydroAccExport
Syz	HydroMisc.h	/^    double Syz;$/;"	m	struct:StructHydroDensityImport
Syz	StructuresForIO.h	/^    double Syz;$/;"	m	struct:StructPhydroIOCompactDouble
Syz	StructuresForIO.h	/^    float Syz;$/;"	m	struct:StructPhydroIOCompact
Syz	StructuresForIO.h	/^    float Syz;$/;"	m	struct:StructPhydroIOCompactMix
Syz	StructuresForIO.h	/^    float Syz;$/;"	m	struct:StructPhydroIOLean
Szx	DataStructures.h	/^    double    Szx;$/;"	m	struct:StructPhydro_tag
Szx	HydroMisc.h	/^    double Szx;$/;"	m	struct:StructHydroAccExport
Szx	HydroMisc.h	/^    double Szx;$/;"	m	struct:StructHydroDensityImport
Szx	StructuresForIO.h	/^    double Szx;$/;"	m	struct:StructPhydroIOCompactDouble
Szx	StructuresForIO.h	/^    float Szx;$/;"	m	struct:StructPhydroIOCompact
Szx	StructuresForIO.h	/^    float Szx;$/;"	m	struct:StructPhydroIOCompactMix
Szx	StructuresForIO.h	/^    float Szx;$/;"	m	struct:StructPhydroIOLean
Szy	DataStructures.h	/^    double    Szy;$/;"	m	struct:StructPhydro_tag
Szy	HydroMisc.h	/^    double Szy;$/;"	m	struct:StructHydroAccExport
Szy	HydroMisc.h	/^    double Szy;$/;"	m	struct:StructHydroDensityImport
Szy	StructuresForIO.h	/^    double Szy;$/;"	m	struct:StructPhydroIOCompactDouble
Szy	StructuresForIO.h	/^    float Szy;$/;"	m	struct:StructPhydroIOCompact
Szy	StructuresForIO.h	/^    float Szy;$/;"	m	struct:StructPhydroIOCompactMix
Szy	StructuresForIO.h	/^    float Szy;$/;"	m	struct:StructPhydroIOLean
TAG_COMMUNICATION_TABLE_HYDRO	MPITags.h	/^    TAG_COMMUNICATION_TABLE_HYDRO,$/;"	e	enum:__anon2
TAG_DECOMPOSITION_EXPORT	MPITags.h	/^    TAG_DECOMPOSITION_EXPORT,$/;"	e	enum:__anon2
TAG_DECOMPOSITION_PRECOMM	MPITags.h	/^    TAG_DECOMPOSITION_PRECOMM,$/;"	e	enum:__anon2
TAG_DECOMPOSITION_SENDDATA	MPITags.h	/^    TAG_DECOMPOSITION_SENDDATA,$/;"	e	enum:__anon2
TAG_DECOMPOSITION_SENDNTYPES	MPITags.h	/^    TAG_DECOMPOSITION_SENDNTYPES,$/;"	e	enum:__anon2
TAG_DECOMPOSITION_SENDSIZE	MPITags.h	/^    TAG_DECOMPOSITION_SENDSIZE,$/;"	e	enum:__anon2
TAG_EFFSA_EDGE	MPITags.h	/^    TAG_EFFSA_EDGE,$/;"	e	enum:__anon2
TAG_EFFSA_EDGEWITHEXTENT	MPITags.h	/^    TAG_EFFSA_EDGEWITHEXTENT,$/;"	e	enum:__anon2
TAG_EFFSA_EXPORT	MPITags.h	/^    TAG_EFFSA_EXPORT,$/;"	e	enum:__anon2
TAG_EFFSA_IMPORT	MPITags.h	/^    TAG_EFFSA_IMPORT,$/;"	e	enum:__anon2
TAG_EFFSA_PRECOMM	MPITags.h	/^    TAG_EFFSA_PRECOMM,$/;"	e	enum:__anon2
TAG_FEEDBACK_DELAYED_EXPORT	MPITags.h	/^    TAG_FEEDBACK_DELAYED_EXPORT,$/;"	e	enum:__anon2
TAG_FEEDBACK_DELAYED_IMPORT	MPITags.h	/^    TAG_FEEDBACK_DELAYED_IMPORT,$/;"	e	enum:__anon2
TAG_FEEDBACK_DELAYED_PRECOMM	MPITags.h	/^    TAG_FEEDBACK_DELAYED_PRECOMM,$/;"	e	enum:__anon2
TAG_FEEDBACK_EXPORT	MPITags.h	/^    TAG_FEEDBACK_EXPORT,$/;"	e	enum:__anon2
TAG_FEEDBACK_IMPORT	MPITags.h	/^    TAG_FEEDBACK_IMPORT,$/;"	e	enum:__anon2
TAG_FEEDBACK_PRECOMM	MPITags.h	/^    TAG_FEEDBACK_PRECOMM,$/;"	e	enum:__anon2
TAG_FORCE_DIRECT_RECV	MPITags.h	/^    TAG_FORCE_DIRECT_RECV,$/;"	e	enum:__anon2
TAG_FORCE_DIRECT_SEND	MPITags.h	/^    TAG_FORCE_DIRECT_SEND, \/\/ export \/ import$/;"	e	enum:__anon2
TAG_FORCE_GRAPE_RECV	MPITags.h	/^    TAG_FORCE_GRAPE_RECV,$/;"	e	enum:__anon2
TAG_FORCE_GRAPE_SEND	MPITags.h	/^    TAG_FORCE_GRAPE_SEND,$/;"	e	enum:__anon2
TAG_FORCE_LET_EXPORT	MPITags.h	/^    TAG_FORCE_LET_EXPORT,$/;"	e	enum:__anon2
TAG_FORCE_LET_MASS	MPITags.h	/^    TAG_FORCE_LET_MASS,$/;"	e	enum:__anon2
TAG_FORCE_LET_POS	MPITags.h	/^    TAG_FORCE_LET_POS,$/;"	e	enum:__anon2
TAG_FORCE_LET_PRECOMM	MPITags.h	/^    TAG_FORCE_LET_PRECOMM,$/;"	e	enum:__anon2
TAG_FORCE_PARALLELTREEGRAPE_EXPORT	MPITags.h	/^    TAG_FORCE_PARALLELTREEGRAPE_EXPORT,$/;"	e	enum:__anon2
TAG_FORCE_PARALLELTREEGRAPE_PRECOMM	MPITags.h	/^    TAG_FORCE_PARALLELTREEGRAPE_PRECOMM,$/;"	e	enum:__anon2
TAG_FORCE_TREEGRAPE_PRECOMM	MPITags.h	/^    TAG_FORCE_TREEGRAPE_PRECOMM,$/;"	e	enum:__anon2
TAG_FORCE_TREEGRAPE_RECV	MPITags.h	/^    TAG_FORCE_TREEGRAPE_RECV,$/;"	e	enum:__anon2
TAG_FORCE_TREEGRAPE_SEND	MPITags.h	/^    TAG_FORCE_TREEGRAPE_SEND,$/;"	e	enum:__anon2
TAG_FORCE_TREE_EXPORT	MPITags.h	/^    TAG_FORCE_TREE_EXPORT,$/;"	e	enum:__anon2
TAG_FORCE_TREE_IMPORT	MPITags.h	/^    TAG_FORCE_TREE_IMPORT,$/;"	e	enum:__anon2
TAG_FORCE_TREE_PRECOMM	MPITags.h	/^    TAG_FORCE_TREE_PRECOMM,$/;"	e	enum:__anon2
TAG_FORCE_TREE_RECV	MPITags.h	/^    TAG_FORCE_TREE_RECV,$/;"	e	enum:__anon2
TAG_FORCE_TREE_SEND	MPITags.h	/^    TAG_FORCE_TREE_SEND,$/;"	e	enum:__anon2
TAG_HII_DENSITY_EXPORT	MPITags.h	/^    TAG_HII_DENSITY_EXPORT,$/;"	e	enum:__anon2
TAG_HII_DENSITY_IMPORT	MPITags.h	/^    TAG_HII_DENSITY_IMPORT,$/;"	e	enum:__anon2
TAG_HII_DENSITY_PRECOMM	MPITags.h	/^    TAG_HII_DENSITY_PRECOMM,$/;"	e	enum:__anon2
TAG_PLANTTREE_EXTENSITY	MPITags.h	/^    TAG_PLANTTREE_EXTENSITY,$/;"	e	enum:__anon2
TAG_POTENTIAL_DIRECT_SENDRECV	MPITags.h	/^    TAG_POTENTIAL_DIRECT_SENDRECV, $/;"	e	enum:__anon2
TAG_PREDECOMPOSITION_LIST	MPITags.h	/^    TAG_PREDECOMPOSITION_LIST,$/;"	e	enum:__anon2
TAG_PREDECOMPOSITION_POS	MPITags.h	/^    TAG_PREDECOMPOSITION_POS,$/;"	e	enum:__anon2
TAG_PREDECOMPOSITION_PRECOMM	MPITags.h	/^    TAG_PREDECOMPOSITION_PRECOMM,$/;"	e	enum:__anon2
TAG_SINK_EXPORT	MPITags.h	/^    TAG_SINK_EXPORT,$/;"	e	enum:__anon2
TAG_SINK_IMPORT	MPITags.h	/^    TAG_SINK_IMPORT,$/;"	e	enum:__anon2
TAG_SINK_PRECOMM	MPITags.h	/^    TAG_SINK_PRECOMM,$/;"	e	enum:__anon2
TAG_SPH_ACC_EXPORT	MPITags.h	/^    TAG_SPH_ACC_EXPORT,$/;"	e	enum:__anon2
TAG_SPH_ACC_IMPORT	MPITags.h	/^    TAG_SPH_ACC_IMPORT,$/;"	e	enum:__anon2
TAG_SPH_ACC_PRECOMM	MPITags.h	/^    TAG_SPH_ACC_PRECOMM,$/;"	e	enum:__anon2
TAG_SPH_DENSITY_EXPORT	MPITags.h	/^    TAG_SPH_DENSITY_EXPORT,$/;"	e	enum:__anon2
TAG_SPH_DENSITY_IMPORT	MPITags.h	/^    TAG_SPH_DENSITY_IMPORT,$/;"	e	enum:__anon2
TAG_SPH_DENSITY_PRECOMM	MPITags.h	/^    TAG_SPH_DENSITY_PRECOMM,$/;"	e	enum:__anon2
TAG_SPH_KERNEL_EXPORT	MPITags.h	/^    TAG_SPH_KERNEL_EXPORT,$/;"	e	enum:__anon2
TAG_SPH_KERNEL_IMPORT	MPITags.h	/^    TAG_SPH_KERNEL_IMPORT,$/;"	e	enum:__anon2
TAG_SPH_KERNEL_PRECOMM	MPITags.h	/^    TAG_SPH_KERNEL_PRECOMM,$/;"	e	enum:__anon2
TAG_STELLARFEEDBACK_EXPORT	MPITags.h	/^    TAG_STELLARFEEDBACK_EXPORT,$/;"	e	enum:__anon2
TAG_STELLARFEEDBACK_IMPORT	MPITags.h	/^    TAG_STELLARFEEDBACK_IMPORT,$/;"	e	enum:__anon2
TAG_STELLARFEEDBACK_PRECOMM	MPITags.h	/^    TAG_STELLARFEEDBACK_PRECOMM,$/;"	e	enum:__anon2
TActiveParticles	DataStructures.h	/^    unsigned long int TActiveParticles;     \/\/ The total updated number of particles. $/;"	m	struct:StructPall
TActiveParticlesDM	DataStructures.h	/^    unsigned long int TActiveParticlesDM;   \/\/ The total updated number of dark matter particles. $/;"	m	struct:StructPall
TActiveParticlesHydro	DataStructures.h	/^    unsigned long int TActiveParticlesHydro;\/\/ The total updated number of hydro particles. $/;"	m	struct:StructPall
TActiveParticlesSink	DataStructures.h	/^    unsigned long int TActiveParticlesSink; \/\/ The total updated number of sink particles. $/;"	m	struct:StructPall
TActiveParticlesStar	DataStructures.h	/^    unsigned long int TActiveParticlesStar; \/\/ The total updated number of star particles. $/;"	m	struct:StructPall
TCMB	DataStructures.h	/^    double TCMB;        \/\/ The CMB temprature at now.$/;"	m	struct:StructPall
TCurrent	DataStructures.h	/^    double    TCurrent;     \/\/ Current time. $/;"	m	struct:StructPall
TCurrent	FOF.c	/^    double TCurrent;$/;"	m	struct:StructFOFHeader	file:
TEnd	DataStructures.h	/^    double    TEnd;         \/\/ Simulation end time.$/;"	m	struct:StructPall
TFactor	config.h	113;"	d
TFactor	config.h	120;"	d
TFactor	reconfig.h	975;"	d
TFactor	reconfig.h	976;"	d
TFactorAcc	config.h	117;"	d
TFactorAcc	config.h	124;"	d
TFactorAcc	reconfig.h	983;"	d
TFactorAcc	reconfig.h	984;"	d
TFactorCourant	config.h	114;"	d
TFactorCourant	config.h	121;"	d
TFactorCourant	reconfig.h	977;"	d
TFactorCourant	reconfig.h	978;"	d
TFactorDecomposition	config.h	131;"	d
TFactorDiffAcc	config.h	110;"	d
TFactorU	config.h	115;"	d
TFactorU	config.h	122;"	d
TFactorU	reconfig.h	979;"	d
TFactorU	reconfig.h	980;"	d
TFactorVel	config.h	116;"	d
TFactorVel	config.h	123;"	d
TFactorVel	reconfig.h	981;"	d
TFactorVel	reconfig.h	982;"	d
THERMAL_CONDUCTIVITY_COEF_TYPE	reconfig.h	751;"	d
THERMAL_CONDUCTIVITY_COEF_TYPE	reconfig.h	753;"	d
TIME_AU	Constants.h	77;"	d
TIME_AU_CGS	Constants.h	83;"	d
TIME_BIT	PowderSnow.c	18;"	d	file:
TIME_SI_CGS	Constants.h	8;"	d
TINY	config.h	175;"	d
TINY_TIMESTEP	TimeStep.c	993;"	d	file:
TRUE	Astro.h	25;"	d
TSNIIEND	Read.c	468;"	d	file:
TSNIIend	Delayed.c	49;"	d	file:
TSNIIend	SetUpTestRun.c	13004;"	d	file:
TSNIIstart	Delayed.c	48;"	d	file:
TStart	DataStructures.h	/^    double    TStart;       \/\/ Simulation start time.$/;"	m	struct:StructPall
TStep	DataStructures.h	/^    unsigned int    TStep;$/;"	m	struct:StructPall
TStepTotal	DataStructures.h	/^    unsigned int    TStepTotal;$/;"	m	struct:StructPall
T_JUMP	TestRuns.c	5595;"	d	file:
T_JUMP	TestRuns.c	5603;"	d	file:
T_JUMP	TestRuns.c	5758;"	d	file:
T_JUMP	TestRuns.c	5768;"	d	file:
T_UPPER_LIMIT_FOR_SPAANS2008	Cooling.c	1452;"	d	file:
T_cut	Cooling.c	/^static double T_cut;$/;"	v	file:
TableLogFH2	CoolingTableSpaans2008.h	/^double TableLogFH2[SIZE_TABLE_FH2] = {$/;"	v
TableLogG0	CoolingTableSpaans2008.h	/^double TableLogG0[SIZE_TABLE_G0] = {$/;"	v
TableLogLambda	CoolingTableSpaans2008.h	/^double TableLogLambda[SIZE_TABLE_Z][SIZE_TABLE_G0][SIZE_TABLE_FH2][SIZE_TABLE_T] = {$/;"	v
TableLogT	CoolingTableSpaans2008.h	/^double TableLogT[SIZE_TABLE_T] = {$/;"	v
TableLogZ	CoolingTableSpaans2008.h	/^double TableLogZ[SIZE_TABLE_Z] = {$/;"	v
Tag	DataStructures.h	/^    int Tag;$/;"	m	struct:StructPhydro_tag
Tag	IO.c	/^    int   Tag;   \/\/ Particle Tag$/;"	m	struct:StructWrite4D2UBody	file:
Tag	StructuresForIO.h	/^    int Tag;$/;"	m	struct:StructPhydroIOCompact
Tag	StructuresForIO.h	/^    int Tag;$/;"	m	struct:StructPhydroIOCompactDouble
Tag	StructuresForIO.h	/^    int Tag;$/;"	m	struct:StructPhydroIOCompactMix
Tag	StructuresForIO.h	/^    int Tag;$/;"	m	struct:StructPhydroIOLean
Tail	DataStructures.h	/^    int Tail;$/;"	m	struct:StructFOF
Tail	SinkParticle.c	/^    int Tail;$/;"	m	struct:StructSinkFOF	file:
TargetGlobalIDBody	debug.h	19;"	d
TargetGlobalIDHydro	debug.h	22;"	d
TargetGlobalIDStar	debug.h	25;"	d
TargetID	Delayed.c	/^    unsigned long int TargetID;$/;"	m	struct:StructDelayedFBInjection	file:
TargetSinkID	SinkParticle.c	/^    int TargetSinkID;   \/\/ The target sink particle ID.$/;"	m	struct:StructHydroSinkFlags	file:
TargetSinkID	SinkParticle.c	/^    int TargetSinkID;   \/\/ The target sink particle ID.$/;"	m	struct:StructSinkSinkFlags	file:
TargetSinkID	SinkParticle.c	/^    int TargetSinkID;   \/\/ The target sink particle ID.$/;"	m	struct:StructSinkSinkFlags2	file:
TargetSinkIndex	SinkParticle.c	/^    int     TargetSinkIndex; \/\/ Index of the target sink particle.$/;"	m	struct:StructSinkImport	file:
Tave	StarFormation.c	77;"	d	file:
Tdyn_NFW	SetUpTestRun.c	/^double Tdyn_NFW;$/;"	v
Temp	ReadGadgetFormat.c	/^  float  Rho, U, Temp, Ne;$/;"	m	struct:Gadget_particle_data	file:
TempForm	DataStructures.h	/^    double  TempForm;       \/\/ <LEAN> Temperature(t=FormationTime)$/;"	m	struct:StructPstar_tag
TempForm	SetUpTestRun.c	/^    double  TempForm;       \/\/ Temperature(t=FormationTime)$/;"	m	struct:StructStars	file:
TempForm	StructuresForIO.h	/^    double TempForm;$/;"	m	struct:StructPstarIOCompactDouble
TempForm	StructuresForIO.h	/^    float TempForm;$/;"	m	struct:StructPstarIOCompact
TempForm	StructuresForIO.h	/^    float TempForm;$/;"	m	struct:StructPstarIOCompactMix
TempNhydro	StarFormation.c	/^int TempNstars,TempNtotal,TempNhydro;$/;"	v
TempNstars	StarFormation.c	/^int TempNstars,TempNtotal,TempNhydro;$/;"	v
TempNtotal	StarFormation.c	/^int TempNstars,TempNtotal,TempNhydro;$/;"	v
TemperatureDependentFH2	H2.c	/^double TemperatureDependentFH2(double Tg, double G0g){$/;"	f
Test	main.c	4078;"	d	file:
TestDomainDecompositionWriteDecompInfo	TestRuns.c	/^static void TestDomainDecompositionWriteDecompInfo(void){$/;"	f	file:
TestFUVFeedbackActivateAllparticles	TestRuns.c	/^void TestFUVFeedbackActivateAllparticles(void){$/;"	f
TestFUVFeedbackFirstSetViscosityParameters	TestRuns.c	/^static bool TestFUVFeedbackFirstSetViscosityParameters = true;$/;"	v	file:
TestFUVFeedbackInsertData	TestRuns.c	/^static void TestFUVFeedbackInsertData(const int TargetIndex, float Pos[], float Vel[], float Mass, float Rho, float U, const double Age, const double Metal, const int Type, const int GlobalID, const double Eps, const double R){$/;"	f	file:
TestFUVFeedbackSetConstantViscosityParameters	TestRuns.c	/^static void TestFUVFeedbackSetConstantViscosityParameters(const double Alpha){$/;"	f	file:
TestFUVFeedbackSetVariableViscosityParameters	TestRuns.c	/^static void TestFUVFeedbackSetVariableViscosityParameters(const double AlphaMin, const double AlphaMax, const double SourceFactor, const double InvDumpingScale){$/;"	f	file:
ThermalConductivityUnitConvertFactor	ThermalConductivity.c	/^static double ThermalConductivityUnitConvertFactor = 0.e0;$/;"	v	file:
ThetaEnd	main.c	/^static double ThetaStart,ThetaEnd,ThetaStep;$/;"	v	file:
ThetaStart	main.c	/^static double ThetaStart,ThetaEnd,ThetaStep;$/;"	v	file:
ThetaStep	main.c	/^static double ThetaStart,ThetaEnd,ThetaStep;$/;"	v	file:
ThresholdDensity	SNII.c	35;"	d	file:
ThresholdTemperature	SNII.c	36;"	d	file:
Time	ReadGadgetFormat.c	/^double  Time, Redshift;$/;"	v
TimeAll	Run.c	/^    TimeAll,$/;"	e	enum:__anon3	file:
TimeBuildT	Run.c	/^    TimeBuildT,$/;"	e	enum:__anon3	file:
TimeCooling	Run.c	/^    TimeCooling,$/;"	e	enum:__anon3	file:
TimeCosmo	Run.c	/^    TimeCosmo,$/;"	e	enum:__anon3	file:
TimeDecomp	Run.c	/^    TimeDecomp,$/;"	e	enum:__anon3	file:
TimeDrift	Run.c	/^    TimeDrift,$/;"	e	enum:__anon3	file:
TimeEnd	TestRuns.c	/^    double TimeEnd;  \/\/ Year$/;"	m	struct:StructECParams	file:
TimeFB	Run.c	/^    TimeFB,$/;"	e	enum:__anon3	file:
TimeFirstT	Run.c	/^    TimeFirstT,$/;"	e	enum:__anon3	file:
TimeGravKick	Run.c	/^    TimeGravKick,$/;"	e	enum:__anon3	file:
TimeGravity	Run.c	/^    TimeGravity,$/;"	e	enum:__anon3	file:
TimeGravityAll	Run.c	/^    TimeGravityAll,$/;"	e	enum:__anon3	file:
TimeGravityExt	Run.c	/^    TimeGravityExt,$/;"	e	enum:__anon3	file:
TimeGravityTree	Run.c	/^    TimeGravityTree,$/;"	e	enum:__anon3	file:
TimeHII	Run.c	/^    TimeHII,$/;"	e	enum:__anon3	file:
TimeHydroAcc	Run.c	/^    TimeHydroAcc,$/;"	e	enum:__anon3	file:
TimeHydroAccCor	Run.c	/^    TimeHydroAccCor,$/;"	e	enum:__anon3	file:
TimeHydroAll	Run.c	/^    TimeHydroAll,$/;"	e	enum:__anon3	file:
TimeHydroDensity	Run.c	/^    TimeHydroDensity,$/;"	e	enum:__anon3	file:
TimeHydroKernel	Run.c	/^    TimeHydroKernel,$/;"	e	enum:__anon3	file:
TimeHydroTree	Run.c	/^    TimeHydroTree,$/;"	e	enum:__anon3	file:
TimeIO	Run.c	/^    TimeIO,$/;"	e	enum:__anon3	file:
TimeKick1	Run.c	/^    TimeKick1,$/;"	e	enum:__anon3	file:
TimeKick2	Run.c	/^    TimeKick2,$/;"	e	enum:__anon3	file:
TimeNewT	Run.c	/^    TimeNewT,$/;"	e	enum:__anon3	file:
TimeOthersAll	Run.c	/^    TimeOthersAll,$/;"	e	enum:__anon3	file:
TimePreDecomp	Run.c	/^    TimePreDecomp,$/;"	e	enum:__anon3	file:
TimePredict	Run.c	/^    TimePredict,$/;"	e	enum:__anon3	file:
TimePrev	StarFormation.c	/^static double TimePrev = 0.e0;$/;"	v	file:
TimeRaise	Run.c	/^    TimeRaise,$/;"	e	enum:__anon3	file:
TimeSF	Run.c	/^    TimeSF,$/;"	e	enum:__anon3	file:
TimeSink	Run.c	/^    TimeSink,$/;"	e	enum:__anon3	file:
TimeSort	Run.c	/^    TimeSort,$/;"	e	enum:__anon3	file:
TimeStart	TestRuns.c	/^    double TimeStart;\/\/ Year$/;"	m	struct:StructECParams	file:
TimeStep	DataStructures.h	/^    double TimeStep;$/;"	m	struct:StructTimingResults
TimeStep	TestRuns.c	/^    double TimeStep; \/\/ Year$/;"	m	struct:StructECParams	file:
TimeStepDiffAcc	TimeStep.c	13;"	d	file:
TimeStepDiffAcc	TimeStep.c	15;"	d	file:
TimeStepGravi	TimeStep.c	/^static inline void __attribute__((always_inline)) TimeStepGravi(const int index){$/;"	f	file:
TimeStepHydroi	TimeStep.c	/^static inline void __attribute__((always_inline)) TimeStepHydroi(const int index){$/;"	f	file:
TimeStepThisStep	DataStructures.h	/^    double TimeStepThisStep;$/;"	m	struct:StructTimingResults
TimeStepi	TimeStep.c	/^inline void __attribute__((always_inline)) TimeStepi(const int index){$/;"	f
TimeStepi	TimeStep.c	/^static inline void __attribute__((always_inline)) TimeStepi(const int index){$/;"	f	file:
TimerEnd	Astro.h	101;"	d
TimerStart	Astro.h	96;"	d
TimingResults	DataStructures.c	/^struct  StructTimingResults     TimingResults;$/;"	v	typeref:struct:StructTimingResults
Tmax	Heating.c	157;"	d	file:
Tmin	Heating.c	156;"	d	file:
TooManyIterationReportHII	SizeDetermination.c	/^static inline void TooManyIterationReportHII(const int Index, const int Niteration){$/;"	f	file:
TooManyIterationReportHydro	SizeDetermination.c	/^static inline void TooManyIterationReportHydro(const int Index, const int Niteration){$/;"	f	file:
TooSmallHydroParticle	Errors.h	25;"	d
Total	DataStructures.h	/^    double Total;$/;"	m	struct:StructTimingResults
TotalEnergy	SinkParticle.c	/^    double TotalEnergy; \/\/ The total energy of pair particles.$/;"	m	struct:StructSinkSinkFlags2	file:
TotalEventNumber	HydroExtraOperations.c	/^static double TotalEventNumber; $/;"	v	file:
TotalThisStep	DataStructures.h	/^    double TotalThisStep;$/;"	m	struct:StructTimingResults
TraversalID	ForceParallelTreeGRAPE.c	/^static int TraversalID[TreeMaxNodeLevel];$/;"	v	file:
TraversalID	PlantGravityTree.c	/^static int TraversalID[TreeMaxNodeLevel+1];$/;"	v	file:
TraversalID	PlantHydroTree.c	/^static int TraversalID[TreeMaxNodeLevel];$/;"	v	file:
TraversalID	PlantHydroTreeImported.c	/^static int TraversalID[TreeMaxNodeLevel];$/;"	v	file:
TraversalID	PlantStellarTree.c	/^static int TraversalID[TreeMaxNodeLevel];$/;"	v	file:
TreeDiagonal	DataStructures.h	696;"	d
TreeMaxNodeLevel	config.h	71;"	d
TreeNGroup	config.h	75;"	d
TreeNGroup	config.h	79;"	d
TreeNGroup	config.h	83;"	d
TreeNodeGenerationLimitNumberForGrav	config.h	68;"	d
TreeNodeGenerationLimitNumberForNBS	config.h	70;"	d
TreeNsub	DataStructures.h	695;"	d
TreeOpeningAngle	config.h	66;"	d
TreeSofteningFactor	config.h	72;"	d
Type	DataStructures.h	/^    short    Type;$/;"	m	struct:StructPbody_tag
Type	FOF.c	/^    int Type;$/;"	m	struct:StructFOFIDSort	file:
Type	IO.c	/^    int Type;$/;"	m	struct:StructWrite4D2UBody	file:
Type	ReadGadgetFormat.c	/^  int    Type;$/;"	m	struct:Gadget_particle_data	file:
Type	SinkParticle.c	/^    int     Type;   \/\/ Type of the victime (Gas\/Star).$/;"	m	struct:StructSinkImport	file:
Type	SizeDetermination.c	/^    int       Type;$/;"	m	struct:StructCSExport	file:
Type	SizeDetermination.c	/^    int       Type;$/;"	m	struct:StructCSImport	file:
Type	SizeDetermination.c	/^    int Type; \/\/ 1=TypeII, 2=TypeIa, 3=AGB$/;"	m	struct:StructCSActiveSNParticle	file:
Type	SizeDetermination.c	/^    int Type;$/;"	m	struct:StructActiveParticle	file:
Type	StellarFeedback.c	/^    int    Type;$/;"	m	struct:StructEnergyHeavyElements	file:
Type	StellarFeedback.h	/^    int Type; \/\/ Follow enum StellarFeedbackType_*$/;"	m	struct:StructActiveStellarFeedbackParticle
Type	StructuresForIO.h	/^    short Type;$/;"	m	struct:StructPbodyIOCompact
Type	StructuresForIO.h	/^    short Type;$/;"	m	struct:StructPbodyIOCompactDouble
Type	StructuresForIO.h	/^    short Type;$/;"	m	struct:StructPbodyIOCompactMix
Type	StructuresForIO.h	/^    short Type;$/;"	m	struct:StructPbodyIOLean
TypeDM	config.h	/^    TypeDM,$/;"	e	enum:__anon11
TypeHydro	config.h	/^    TypeHydro,$/;"	e	enum:__anon11
TypeII	DataStructures.h	/^    bool    TypeII;         \/\/ fb flag$/;"	m	struct:StructPstar_tag
TypeII	SetUpTestRun.c	/^    bool    TypeII;$/;"	m	struct:StructStars	file:
TypeII	StructuresForIO.h	/^    bool TypeII;$/;"	m	struct:StructPstarIOCompact
TypeII	StructuresForIO.h	/^    bool TypeII;$/;"	m	struct:StructPstarIOCompactDouble
TypeII	StructuresForIO.h	/^    bool TypeII;$/;"	m	struct:StructPstarIOCompactMix
TypeII	StructuresForIO.h	/^    bool TypeII;$/;"	m	struct:StructPstarIOLean
TypeIIProb	DataStructures.h	/^    bool    TypeIIProb;     \/\/ fb flag$/;"	m	struct:StructPstar_tag
TypeIIProb	StructuresForIO.h	/^    bool TypeIIProb;$/;"	m	struct:StructPstarIOCompact
TypeIIProb	StructuresForIO.h	/^    bool TypeIIProb;$/;"	m	struct:StructPstarIOCompactDouble
TypeIIProb	StructuresForIO.h	/^    bool TypeIIProb;$/;"	m	struct:StructPstarIOCompactMix
TypeIIProb	StructuresForIO.h	/^    bool TypeIIProb;$/;"	m	struct:StructPstarIOLean
TypeIa	DataStructures.h	/^    bool    TypeIa;         \/\/ fb flag$/;"	m	struct:StructPstar_tag
TypeIa	SetUpTestRun.c	/^    bool    TypeIa;$/;"	m	struct:StructStars	file:
TypeIa	StructuresForIO.h	/^    bool TypeIa;$/;"	m	struct:StructPstarIOCompact
TypeIa	StructuresForIO.h	/^    bool TypeIa;$/;"	m	struct:StructPstarIOCompactDouble
TypeIa	StructuresForIO.h	/^    bool TypeIa;$/;"	m	struct:StructPstarIOCompactMix
TypeIa	StructuresForIO.h	/^    bool TypeIa;$/;"	m	struct:StructPstarIOLean
TypeSink	config.h	/^    TypeSink,$/;"	e	enum:__anon11
TypeStar	config.h	/^    TypeStar,$/;"	e	enum:__anon11
U	DataStructures.h	/^    double    U;          \/\/ The internal energy of gas.$/;"	m	struct:StructPhydro_tag
U	HydroMisc.h	/^    double    U;       \/\/ Thermal energy.$/;"	m	struct:StructHydroAccExport
U	ReadGadgetFormat.c	/^  float  Rho, U, Temp, Ne;$/;"	m	struct:Gadget_particle_data	file:
U	SetUpTestRun.c	/^    float Mass,Kernel,U;$/;"	m	struct:StructWriteCE	file:
U	SetUpTestRun.c	/^    float U;$/;"	m	struct:StructGas	file:
U	StructuresForIO.h	/^    double U;$/;"	m	struct:StructPhydroIOCompactDouble
U	StructuresForIO.h	/^    float U;$/;"	m	struct:StructPhydroIOCompact
U	StructuresForIO.h	/^    float U;$/;"	m	struct:StructPhydroIOCompactMix
U	StructuresForIO.h	/^    float U;$/;"	m	struct:StructPhydroIOLean
UNIVERSAL_GAS_CONSTANT	Constants.h	41;"	d
UNIVERSAL_GAS_CONSTANT_CGS	Constants.h	46;"	d
UPDATE_SIZE_LOCAL	SizeDetermination.c	22;"	d	file:
UPred	DataStructures.h	/^    double    UPred;      \/\/ <TMP> <LEAN>$/;"	m	struct:StructPhydro_tag
USE_BARYON_SOFTENING	SetUpTestRun.c	8167;"	d	file:
USE_BOTTOM_TEMPERATURE	Cooling.c	218;"	d	file:
USE_BOTTOM_TEMPERATURE	Cooling.c	566;"	d	file:
USE_BOTTOM_TEMPERATURE	Cooling.c	870;"	d	file:
USE_BOUNDARY_CONDITION	reconfig.h	485;"	d
USE_CELIB	reconfig.h	308;"	d
USE_CELIB	reconfig.h	537;"	d
USE_CELIB	reconfig.h	731;"	d
USE_CELIB	reconfig.h	800;"	d
USE_CELIB	reconfig.h	899;"	d
USE_CELIB	reconfig.h	966;"	d
USE_CLOUDY_COOLING_FUNCTIONS	reconfig.h	522;"	d
USE_DEBUG_MODE	SizeDetermination.c	24;"	d	file:
USE_DICE_BARYON_SOFTENING	SetUpTestRun.c	10968;"	d	file:
USE_DICE_EPS_FOLLOW_MASS	SetUpTestRun.c	10967;"	d	file:
USE_EPS_FOLLOW_MASS	SetUpTestRun.c	8166;"	d	file:
USE_FARULTRAVIOLET_HEATING	reconfig.h	205;"	d
USE_FAST_SCHEME	reconfig.h	104;"	d
USE_FAST_SCHEME	reconfig.h	151;"	d
USE_FAST_SCHEME	reconfig.h	196;"	d
USE_FAST_SCHEME	reconfig.h	247;"	d
USE_FAST_SCHEME	reconfig.h	58;"	d
USE_FAST_SCHEME	reconfig.h	877;"	d
USE_FAST_SCHEME	reconfig.h	944;"	d
USE_FORCIBLE_STARFORMATION	reconfig.h	443;"	d
USE_FORCIBLE_STARFORMATION	reconfig.h	478;"	d
USE_GRAD_H	reconfig.h	6;"	d
USE_HERNQUIST_BULGE_FOR_AGN	SetUpTestRun.c	13086;"	d	file:
USE_HIIREGION_MODEL	reconfig.h	113;"	d
USE_HIIREGION_MODEL	reconfig.h	160;"	d
USE_HIIREGION_MODEL	reconfig.h	208;"	d
USE_HIIREGION_MODEL	reconfig.h	256;"	d
USE_HIIREGION_MODEL	reconfig.h	298;"	d
USE_HIIREGION_MODEL	reconfig.h	348;"	d
USE_HIIREGION_MODEL	reconfig.h	528;"	d
USE_HIIREGION_MODEL	reconfig.h	573;"	d
USE_HIIREGION_MODEL	reconfig.h	612;"	d
USE_HIIREGION_MODEL	reconfig.h	651;"	d
USE_HIIREGION_MODEL	reconfig.h	690;"	d
USE_HIIREGION_MODEL	reconfig.h	70;"	d
USE_HIIREGION_MODEL	reconfig.h	737;"	d
USE_HIIREGION_MODEL	reconfig.h	791;"	d
USE_HIIREGION_MODEL	reconfig.h	839;"	d
USE_HIIREGION_MODEL	reconfig.h	889;"	d
USE_HIIREGION_MODEL	reconfig.h	90;"	d
USE_HIIREGION_MODEL	reconfig.h	956;"	d
USE_KERNEL_LOCAL_UPDATE_KERNELDENSITY	HydroKernel.c	16;"	d	file:
USE_METAL_DIFFUSION	reconfig.h	314;"	d
USE_METAL_DIFFUSION	reconfig.h	905;"	d
USE_METAL_DIFFUSION	reconfig.h	972;"	d
USE_PARTICLE_TAG	reconfig.h	236;"	d
USE_PARTICLE_TAG	reconfig.h	43;"	d
USE_PARTICLE_TAG	reconfig.h	862;"	d
USE_PARTICLE_TAG	reconfig.h	921;"	d
USE_SINK_PARTICLE	reconfig.h	1012;"	d
USE_SINK_PARTICLE	reconfig.h	119;"	d
USE_SINK_PARTICLE	reconfig.h	166;"	d
USE_SINK_PARTICLE	reconfig.h	214;"	d
USE_SINK_PARTICLE	reconfig.h	262;"	d
USE_SINK_PARTICLE	reconfig.h	304;"	d
USE_SINK_PARTICLE	reconfig.h	354;"	d
USE_SINK_PARTICLE	reconfig.h	411;"	d
USE_SINK_PARTICLE	reconfig.h	446;"	d
USE_SINK_PARTICLE	reconfig.h	481;"	d
USE_SINK_PARTICLE	reconfig.h	540;"	d
USE_SINK_PARTICLE	reconfig.h	657;"	d
USE_SINK_PARTICLE	reconfig.h	696;"	d
USE_SINK_PARTICLE	reconfig.h	743;"	d
USE_SINK_PARTICLE	reconfig.h	76;"	d
USE_SINK_PARTICLE	reconfig.h	803;"	d
USE_SINK_PARTICLE	reconfig.h	845;"	d
USE_SINK_PARTICLE	reconfig.h	895;"	d
USE_SINK_PARTICLE	reconfig.h	962;"	d
USE_SPAANS1997_COOLING_FUNCTIONS	reconfig.h	525;"	d
USE_SPAANS2008_COOLING_FUNCTIONS	reconfig.h	519;"	d
USE_STELLARFEEDBACK_RADIUS_LOCAL_UPDATE	StellarFeedback.c	29;"	d	file:
USE_TOP_TEMPERATURE	Cooling.c	225;"	d	file:
USE_TOP_TEMPERATURE	Cooling.c	583;"	d	file:
USE_TOP_TEMPERATURE	Cooling.c	885;"	d	file:
USE_VARIABLE_TIMESTEP	reconfig.h	825;"	d
Uhot	DataStructures.h	/^    double Uhot;            \/\/ Hot gas temperature$/;"	m	struct:StructPhydro_tag
Uhot	StructuresForIO.h	/^    double Uhot;$/;"	m	struct:StructPhydroIOCompactDouble
Uhot	StructuresForIO.h	/^    float Uhot;$/;"	m	struct:StructPhydroIOCompact
Uhot	StructuresForIO.h	/^    float Uhot;$/;"	m	struct:StructPhydroIOCompactMix
Uhot	StructuresForIO.h	/^    float Uhot;$/;"	m	struct:StructPhydroIOLean
Uinit	SetUpTestRun.c	/^    double Uinit;$/;"	m	struct:StructIOKeisoku	file:
UnDefinedParticleType	Errors.h	5;"	d
UnitLength	DataStructures.h	/^    double UnitLength;$/;"	m	struct:StructPall
UnitLength	FOF.c	/^    double UnitLength;$/;"	m	struct:StructFOFHeader	file:
UnitMass	DataStructures.h	/^    double UnitMass;$/;"	m	struct:StructPall
UnitMass	FOF.c	/^    double UnitMass;$/;"	m	struct:StructFOFHeader	file:
UnitTime	DataStructures.h	/^    double UnitTime;$/;"	m	struct:StructPall
UnitTime	FOF.c	/^    double UnitTime;$/;"	m	struct:StructFOFHeader	file:
UnknownParameter	Errors.h	2;"	d
UpParticleMass	TestRuns.c	/^static void UpParticleMass(void){$/;"	f	file:
UpdateAdaptiveSofteningFactor	Cosmological.c	/^void UpdateAdaptiveSofteningFactor(void){$/;"	f
UpdateBolometricLuminosity	RadiationPressure.c	/^void UpdateBolometricLuminosity(const int index){$/;"	f
UpdateCosmologicalParameters	Cosmological.c	/^void UpdateCosmologicalParameters(void){$/;"	f
UpdateDomainEdgesGravityParticles	PlantGravityTree.c	/^static void UpdateDomainEdgesGravityParticles(void){$/;"	f	file:
UpdateEdgesForHydro	PlantHydroTree.c	/^static void UpdateEdgesForHydro(void){$/;"	f	file:
UpdateEdgesForHydroAsyncronoushComm	PlantHydroTree.c	/^static void UpdateEdgesForHydroAsyncronoushComm(const int mode){$/;"	f	file:
UpdateEdgesForStars	PlantStellarTree.c	/^static void UpdateEdgesForStars(void){$/;"	f	file:
UpdateEdgesForStarsPartial	PlantStellarTree.c	/^static void UpdateEdgesForStarsPartial(void){$/;"	f	file:
UpdateGravityKickFlag	Integral.c	/^void UpdateGravityKickFlag(void){ \/\/ Gravity first kick for Hydro$/;"	f
UpdateHIILocal	HIIregion.c	/^static inline void __attribute__((always_inline)) UpdateHIILocal(double Pos_i[restrict], double *Radius_i, double *PhotonCount_i, double LyAphoton_i, int *NBList_i, int Neighbors[restrict], const int MyID, const int NProcs, bool HIIExportFlags_i[NProcs], struct StructBinarySearch *BinarySearch_i){$/;"	f	file:
UpdateHIIRadiusLocalModified	HIIregion.c	/^static inline void __attribute__((always_inline)) UpdateHIIRadiusLocalModified(const int Index, const int NActives, $/;"	f	file:
UpdateHigherOrderDivVRotV	HydroAcc.c	/^static void UpdateHigherOrderDivVRotV(const int Index, struct StructHydroAccExport HydroAccExportRecv[restrict]){$/;"	f	file:
UpdateKernelLocalModified	HydroKernel.c	/^static inline void __attribute__((always_inline)) UpdateKernelLocalModified(const int Index, struct StructActiveHydroParticle ActiveHydroParticle[restrict], const int MyID, const int NProcs, bool HydroKernelExportFlags[restrict]){$/;"	f	file:
UpdateNBList	HydroAcc.c	/^static void UpdateNBList(void){$/;"	f	file:
UpdateNumberofLeavesInGroupInFUV	FUV.c	/^void UpdateNumberofLeavesInGroupInFUV(const int Ng){$/;"	f
UpdateNumberofLeavesInGroupInLET	ForceParallelTreeGRAPE.c	/^void UpdateNumberofLeavesInGroupInLET(const int Ng){$/;"	f
UpdateSinkEdges	SinkParticle.c	/^static void UpdateSinkEdges(void){$/;"	f	file:
UpdateSinkLocalTimeStep	SinkParticle.c	/^static void UpdateSinkLocalTimeStep(const int NExportThisTime[restrict], const int NImportThisTime[restrict], $/;"	f	file:
UpdateStarParticleMass	StellarFeedback.c	/^static inline void __attribute__((always_inline)) UpdateStarParticleMass(double Mass, const int Index){$/;"	f	file:
UpdateStellarFeedbackRadiusLocalModified	StellarFeedback.c	/^static inline void __attribute__((always_inline)) UpdateStellarFeedbackRadiusLocalModified(const int Index, const int NActives, $/;"	f	file:
UpdateStellarWindEnergy	StellarWind.c	/^void UpdateStellarWindEnergy(const int index){ \/\/ in simulation units$/;"	f
UpdateStellarWindEnergybyTableInterpolation	StellarWind.c	/^static double UpdateStellarWindEnergybyTableInterpolation(const int index){ \/\/ in ergs\/Msun$/;"	f	file:
UpdateTimeLogs	Logs.c	/^void UpdateTimeLogs(void){$/;"	f
UpdateTotalActiveNumber	ParallelOperation.c	/^void UpdateTotalActiveNumber(void){$/;"	f
UpdateTotalNumber	ParallelOperation.c	/^void UpdateTotalNumber(void){$/;"	f
UpdateTotalStarNumber	ParallelOperation.c	/^void UpdateTotalStarNumber(void){$/;"	f
UpdateVel	SetUpTestRun.c	/^static void UpdateVel(const double lambda){$/;"	f	file:
Update_k_hydro_localmin	StellarFeedback.c	/^static void Update_k_hydro_localmin(const int leaf, const int k_hydro_localmin){$/;"	f	file:
Use	DataStructures.h	/^    bool    Use;            \/\/ <TMP> <LEAN> $/;"	m	struct:StructPsink_tag
Use	DataStructures.h	/^    bool    Use;            \/\/ <TMP> <LEAN>$/;"	m	struct:StructPstar_tag
Use	DataStructures.h	/^    bool    Use;    \/\/ <TMP> <LEAN> If this structure is not use, the flag = false. $/;"	m	struct:StructPbody_tag
Use	DataStructures.h	/^    bool Use;                \/\/ <TMP> <LEAN>$/;"	m	struct:StructPhydro_tag
UseConstantSFrate	config.h	150;"	d
UseCooling	config.h	136;"	d
UseEstimateXFe	SetUpTestRun.c	/^    int UseEstimateXFe;  \/\/ 0 = not use, 1 = use, sofar only available for the case with MetallicityType=3$/;"	m	struct:StructDiceRun	file:
UseSFModelConvert	config.h	146;"	d
UseSFModelSpawn	config.h	147;"	d
VCOM	SizeDetermination.c	/^    double    VCOM[3];$/;"	m	struct:StructCSImport	file:
VCOM	SizeDetermination.c	/^    double    VCOM[3];$/;"	m	struct:StructCSImportHydroParticle	file:
VCOM	SizeDetermination.c	/^    double VCOM[3];$/;"	m	struct:StructCSActiveHydroParticle	file:
VCOM	SizeDetermination.c	/^    double VCOM[3];$/;"	m	struct:StructCSHydroLocalInfo	file:
VC_ADJUST_AGN	SetUpTestRun.c	13081;"	d	file:
VELOCITY_KMS_CGS	Constants.h	109;"	d
VSigma	SetUpTestRun.c	13430;"	d	file:
Value	EstimateXFe.c	/^	 double  Value;$/;"	m	struct:StructAverageElementMass	file:
Value	EstimateXFe.c	/^	 double  Value;$/;"	m	struct:StructSolarAbundancePattern	file:
VcBH_AGN	SetUpTestRun.c	/^inline static double VcBH_AGN(double R, double EPS){$/;"	f	file:
VcBulge_AGN	SetUpTestRun.c	/^inline static double VcBulge_AGN(double R){$/;"	f	file:
VcGas_AGN	SetUpTestRun.c	/^inline static double VcGas_AGN(double R){$/;"	f	file:
VcUnit	SetUpTestRun.c	/^static double VcUnit,VcUnit2,FVcUnit2;$/;"	v	file:
VcUnit2	SetUpTestRun.c	/^static double VcUnit,VcUnit2,FVcUnit2;$/;"	v	file:
Vcir_AGN	SetUpTestRun.c	13071;"	d	file:
Vel	DataStructures.h	/^    double    Vel[3];       \/\/ <MIX> The velocity of the particle.$/;"	m	struct:StructPbody_tag
Vel	DataStructures.h	/^    double Vel[3];$/;"	m	struct:StructFOFCatalog
Vel	HydroMisc.h	/^    double    Vel[3];  \/\/ Volocity.$/;"	m	struct:StructHydroAccExport
Vel	HydroMisc.h	/^    double    Vel[3];  \/\/ Volocity.$/;"	m	struct:StructHydroDensityExport
Vel	IO.c	/^    float Vel[3];$/;"	m	struct:StructWrite4D2UBody	file:
Vel	ReadGadgetFormat.c	/^  float  Vel[3];$/;"	m	struct:Gadget_particle_data	file:
Vel	SetUpTestRun.c	/^    double Vel[3];$/;"	m	struct:StructIOKeisoku	file:
Vel	SetUpTestRun.c	/^    float Vel[3];$/;"	m	struct:StructDM	file:
Vel	SetUpTestRun.c	/^    float Vel[3];$/;"	m	struct:StructGas	file:
Vel	SetUpTestRun.c	/^    float Vel[3];$/;"	m	struct:StructReadGalactICSBody	file:
Vel	SetUpTestRun.c	/^    float Vel[3];$/;"	m	struct:StructReadGalactICSBodyFlag	file:
Vel	SetUpTestRun.c	/^    float Vel[3];$/;"	m	struct:StructStars	file:
Vel	SetUpTestRun.c	/^    float Vel[3];$/;"	m	struct:StructWriteCE	file:
Vel	SinkParticle.c	/^    double    Vel[3];  \/\/ Volocity.$/;"	m	struct:StructSinkPressureForces	file:
Vel	SinkParticle.c	/^    double  Vel[3];  \/\/ Velocities.$/;"	m	struct:StructSinkImport	file:
Vel	SinkParticle.c	/^    double  Vel[3];  \/\/ Volocities.$/;"	m	struct:StructSinkExport	file:
Vel	SinkParticle.c	/^    double Vel[3];$/;"	m	struct:StructParticleDataForActiveSinkFOF	file:
Vel	StellarFeedback.c	/^    double Vel[3];$/;"	m	struct:StructEnergyHeavyElements	file:
Vel	StructuresForIO.h	/^    double Vel[3];$/;"	m	struct:StructPbodyIOCompactDouble
Vel	StructuresForIO.h	/^    double Vel[3];$/;"	m	struct:StructPbodyIOCompactMix
Vel	StructuresForIO.h	/^    float Vel[3];$/;"	m	struct:StructPbodyIOCompact
Vel	StructuresForIO.h	/^    float Vel[3];$/;"	m	struct:StructPbodyIOLean
VelP	DataStructures.h	/^    double    VelP[3];      \/\/ <TMP> <LEAN>$/;"	m	struct:StructPhydro_tag
VelP	DataStructures.h	/^    double  VelP[3];        \/\/ <TMP> <LEAN> $/;"	m	struct:StructPsink_tag
Velh	DataStructures.h	/^    double    Velh[3];      \/\/ <MIX> <LEAN> The "half-step slided" velocity of the particle. For leapfrog integration.$/;"	m	struct:StructPbody_tag
Velh	StructuresForIO.h	/^    double Velh[3];$/;"	m	struct:StructPbodyIOCompactDouble
Velh	StructuresForIO.h	/^    double Velh[3];$/;"	m	struct:StructPbodyIOCompactMix
Velh	StructuresForIO.h	/^    float Velh[3];$/;"	m	struct:StructPbodyIOCompact
VelocityBaseDragBoundaryConditionForCosmologicalRun	BoundaryCondition.c	/^static void VelocityBaseDragBoundaryConditionForCosmologicalRun(void){$/;"	f	file:
ViscousAlphaMax	DataStructures.h	/^    double ViscousAlphaMax;  \/\/ The maximum value of the alpha.$/;"	m	struct:StructPall
ViscousAlphaMin	DataStructures.h	/^    double ViscousAlphaMin;  \/\/ The minimum value of the alpha.$/;"	m	struct:StructPall
ViscousL	DataStructures.h	/^    double ViscousL;         \/\/ The damping scale for variable alpha model.$/;"	m	struct:StructPall
ViscousS	DataStructures.h	/^    double ViscousS;         \/\/ The source factor for variable alpha model.$/;"	m	struct:StructPall
Vsig	DataStructures.h	/^    double    Vsig;       \/\/ <LEAN> Signal Velocity  or Maximum Velocity difference.$/;"	m	struct:StructPhydro_tag
Vsig	HydroAcc.c	/^    double Vsig;$/;"	m	struct:StructHydroAccCorrectEnegyDensityGradh	file:
Vsig	HydroMisc.h	/^    double    Vsig;   \/\/ Velocity dispresion in the local scale.$/;"	m	struct:StructHydroAccImport
Vsig	StructuresForIO.h	/^    double Vsig;$/;"	m	struct:StructPhydroIOCompactDouble
Vsig	StructuresForIO.h	/^    float Vsig;$/;"	m	struct:StructPhydroIOCompact
Vsig	StructuresForIO.h	/^    float Vsig;$/;"	m	struct:StructPhydroIOCompactMix
WENDLANDC2_1D_COEF	KernelFunctions.h	54;"	d
WENDLANDC2_2D_COEF	KernelFunctions.h	55;"	d
WENDLANDC2_3D_COEF	KernelFunctions.h	56;"	d
WENDLANDC4_1D_COEF	KernelFunctions.h	105;"	d
WENDLANDC4_2D_COEF	KernelFunctions.h	106;"	d
WENDLANDC4_3D_COEF	KernelFunctions.h	107;"	d
WENDLANDC6_1D_COEF	KernelFunctions.h	160;"	d
WENDLANDC6_2D_COEF	KernelFunctions.h	161;"	d
WENDLANDC6_3D_COEF	KernelFunctions.h	162;"	d
WalkLocalTreeAndGetAccPot	ForceParallelTreeGRAPE.c	/^static void WalkLocalTreeAndGetAccPot(const int NImportAll){$/;"	f	file:
WalkLocalTreeAndGetAccPotForInsert	ForceParallelTreeGRAPE.c	/^static void WalkLocalTreeAndGetAccPotForInsert(const int NImportAll){$/;"	f	file:
WalkLocalTreeAndGetLFUV	FUV.c	/^static void WalkLocalTreeAndGetLFUV(const int NImportAll){$/;"	f	file:
WeightCorrection	CalcEffectiveSurfaceArea.c	/^    double  WeightCorrection[EffSAVecSize];    \/\/ Corrector.$/;"	m	struct:StructEffSAResult	file:
WeightCorrection	CalcEffectiveSurfaceArea.c	/^    double WeightCorrection[EffSAVecSize];    \/\/ Corrector.$/;"	m	struct:StructEffSAInput	file:
WeightCorrection	StellarFeedback.c	/^    double WeightCorrection[EffSAVecSize];$/;"	m	struct:StructEnergyHeavyElements	file:
WeightCorrection	StellarFeedback.h	/^    double WeightCorrection[EffSAVecSize];$/;"	m	struct:StructActiveStellarFeedbackParticle
WeightSum	SizeDetermination.c	/^    double    WeightSum;$/;"	m	struct:StructCSImport	file:
WeightSum	SizeDetermination.c	/^    double    WeightSum;$/;"	m	struct:StructCSImportRPParticle	file:
WeightSum	SizeDetermination.c	/^    double    WeightSum;$/;"	m	struct:StructCSImportSNParticle	file:
WeightSum	SizeDetermination.c	/^    double    WeightSum;$/;"	m	struct:StructCSImportSWParticle	file:
WeightSum	SizeDetermination.c	/^    double WeightSum;   \/\/ sum_i wi;$/;"	m	struct:StructCSActiveRPParticle	file:
WeightSum	SizeDetermination.c	/^    double WeightSum;$/;"	m	struct:StructCSActiveSNParticle	file:
WeightSum	SizeDetermination.c	/^    double WeightSum;$/;"	m	struct:StructCSActiveSWParticle	file:
WeightSum	SizeDetermination.c	/^    double WeightSum;$/;"	m	struct:StructCSRadiationPressureLocalInfo	file:
WeightSum	SizeDetermination.c	/^    double WeightSum;$/;"	m	struct:StructCSStellarFeedbackLocalInfo	file:
WeightSum	SizeDetermination.c	/^    double WeightSum;$/;"	m	struct:StructCSStellarWindLocalInfo	file:
WeightSum	StellarFeedback.c	/^    double WeightSum;    \/\/ The kernel normalization factor.$/;"	m	struct:StructEnergyHeavyElements	file:
WeightSum	StellarFeedback.h	/^    double WeightSum;$/;"	m	struct:StructActiveStellarFeedbackParticle
WeightSum	StellarFeedback.h	/^    double WeightSum;$/;"	m	struct:StructActiveStellarFeedbackRPParticle
WeightSum	StellarFeedback.h	/^    double WeightSum;$/;"	m	struct:StructActiveStellarFeedbackSNParticle
Width	DataStructures.h	/^    double Width;                     \/\/ We here assume that the root is a cube.$/;"	m	struct:StructHydroRoot_tag
Width	DataStructures.h	/^    double Width;                  \/\/ We here assume the root is a cube.$/;"	m	struct:StructGravityRoot_tag
Width	DataStructures.h	/^    double Width;                  \/\/ We here assume the root is a cube.$/;"	m	struct:StructYoungStarRoot_tag
WidthFactor	DataStructures.h	/^    double WidthFactor[TreeMaxNodeLevel]; \/\/ Width * WidthFactor[LevelofNode] = Width of the Node.$/;"	m	struct:StructGravityRoot_tag
WidthFactor	DataStructures.h	/^    double WidthFactor[TreeMaxNodeLevel]; \/\/ Width * WidthFactor[LevelofNode] = Width of the Node.$/;"	m	struct:StructHydroRoot_tag
WidthFactor	DataStructures.h	/^    double WidthFactor[TreeMaxNodeLevel]; \/\/ Width * WidthFactor[LevelofNode] = Width of the Node.$/;"	m	struct:StructYoungStarRoot_tag
Write4D2U	IO.c	/^void Write4D2U(void){$/;"	f
Write4D2UExtraCounter	IO.c	/^static int Write4D2UExtraCounter = 1;$/;"	v	file:
Write4D2UExtraInfo	IO.c	/^void Write4D2UExtraInfo(void){$/;"	f
WriteASCIIData3DCollapseTest	main.c	/^static void WriteASCIIData3DCollapseTest(char fname[]){$/;"	f	file:
WriteAccPot	ForceDirect.c	/^static void WriteAccPot(void){$/;"	f	file:
WriteAccPot	ForceTree.c	/^static void WriteAccPot(void){$/;"	f	file:
WriteAccPotGrape	ForceGRAPE.c	/^static void WriteAccPotGrape(void){$/;"	f	file:
WriteAllData	IO.c	/^void WriteAllData(void){$/;"	f
WriteCurrentActiveParticles	IO.c	/^void WriteCurrentActiveParticles(const long int FileID, char suffix[]){$/;"	f
WriteDISPHAnalysisToolsCompatibleMode	IO.c	/^void WriteDISPHAnalysisToolsCompatibleMode(void){$/;"	f
WriteData	Run.c	/^static void WriteData(void){$/;"	f	file:
WriteDirectFUVFeedback	TestRuns.c	/^static void WriteDirectFUVFeedback(void){$/;"	f	file:
WriteDistributionFUVFeedback	TestRuns.c	/^static void WriteDistributionFUVFeedback(void){$/;"	f	file:
WriteDomainBisectionInfo	PreDecomposition.c	/^static void WriteDomainBisectionInfo(char *name){$/;"	f	file:
WriteFOFCatalog	FOF.c	/^void WriteFOFCatalog(void){$/;"	f
WriteGravitationalForce	TestRuns.c	/^static void WriteGravitationalForce(const int Tag){$/;"	f	file:
WriteHIIradius	HIIregion.c	/^static void WriteHIIradius(void){$/;"	f	file:
WriteHeader	IO.c	/^static void WriteHeader(FILE *fp){$/;"	f	file:
WriteHydro	Run.c	/^static void WriteHydro(void){$/;"	f	file:
WriteHydroDataASCIIFormat	IO.c	/^void WriteHydroDataASCIIFormat(const int mode){$/;"	f
WriteHydroDataForHydroTest	TestRuns.c	/^static void WriteHydroDataForHydroTest(const int AdditionalFlag){$/;"	f	file:
WriteKernelShape	HydroMisc.c	/^void WriteKernelShape(void){$/;"	f
WriteMakeflags	RunLogs.c	/^void WriteMakeflags(void){$/;"	f
WriteMakeflagsAG	RunLogsAG.h	/^static void WriteMakeflagsAG(char Fname[]){$/;"	f
WriteNeighborInformation	IO.c	/^void WriteNeighborInformation(const int index, const int mode){$/;"	f
WriteParticleSplitting	TestRuns.c	/^static void WriteParticleSplitting(const int Counter, const double dz){$/;"	f	file:
WritePhaseData	Run.c	/^static void WritePhaseData(void){$/;"	f	file:
WritePhaseDiagram	TestRuns.c	/^static void WritePhaseDiagram(const int Index){$/;"	f	file:
WriteRadiationPressure	TestRuns.c	/^static void WriteRadiationPressure(const int Z_in_PC){$/;"	f	file:
WriteRunLog	SetUpTestRun.c	/^static void WriteRunLog(const int FlagEqualMass, const double DensityRatio){$/;"	f	file:
WriteRunLog	SetUpTestRun.c	/^static void WriteRunLog(const int NGrid, const int mode, const int seed,$/;"	f	file:
WriteS	Run.c	/^static void WriteS(void){$/;"	f	file:
WriteSinusoidalWave	main.c	/^static void WriteSinusoidalWave(char *fname){$/;"	f	file:
WriteStellarWindData	StellarWind.c	/^static void WriteStellarWindData(void){$/;"	f	file:
WriteStellarWindDataTest	StellarWind.c	/^static void WriteStellarWindDataTest(void){$/;"	f	file:
WriteStromgrenSphere	TestRuns.c	/^static void WriteStromgrenSphere(const double Z_in_PC){$/;"	f	file:
WriteThermalConductivityRate	ThermalConductivity.c	/^static void WriteThermalConductivityRate(void){$/;"	f	file:
WriteThermalConductivitySolution	TestRuns.c	/^static void WriteThermalConductivitySolution(const double T_JUMP){$/;"	f	file:
WriteTimeStepData	Run.c	/^static void WriteTimeStepData(void){$/;"	f	file:
WriteTimeStepDataWithType	Run.c	/^static void WriteTimeStepDataWithType(char base[], const int Type){$/;"	f	file:
WriteTimeSteps	IO.c	/^void WriteTimeSteps(void){$/;"	f
WriteTypeUnDefined	Errors.h	6;"	d
Write_Test_NeighborSearch	TestRuns.c	/^static void Write_Test_NeighborSearch(char KeyWord[]){$/;"	f	file:
X_HILL	SinkParticle.c	319;"	d	file:
Xhill	SinkParticle.c	824;"	d	file:
YEAR_CGS	Constants.h	102;"	d
YoungStarCache	DataStructures.c	/^struct StructYoungStarCache *YoungStarCache;$/;"	v	typeref:struct:StructYoungStarCache
YoungStarNode	DataStructures.c	/^struct StructYoungStarNode *YoungStarNode;$/;"	v	typeref:struct:StructYoungStarNode
YoungStarNodeDataImplant	PlantYoungStarTree.c	/^static void YoungStarNodeDataImplant(const int CurrentNodeID){$/;"	f	file:
YoungStarNodeSeparationCriterion	PlantYoungStarTree.c	/^static inline bool __attribute__((always_inline)) YoungStarNodeSeparationCriterion(const int CurrentNodeID, const int CriticalNumber){$/;"	f	file:
YoungStarResultCache	DataStructures.c	/^struct StructYoungStarResultCache *YoungStarResultCache;$/;"	v	typeref:struct:StructYoungStarResultCache
YoungStarRoot	DataStructures.c	/^StructYoungStarRoot YoungStarRoot;$/;"	v
YoungStarTreePreprocessing	PlantYoungStarTree.c	/^static int YoungStarTreePreprocessing(void){$/;"	f	file:
Z	DataStructures.h	/^    double    Z;          \/\/ Metallicity of gas.$/;"	m	struct:StructPhydro_tag
Z	DataStructures.h	/^    double  Z;              \/\/ Metallicity of gas.$/;"	m	struct:StructPstar_tag
Z	DataStructures.h	/^    double  Z;              \/\/ The metallicity of the sink particle.$/;"	m	struct:StructPsink_tag
Z	HydroMisc.h	/^    double Z;$/;"	m	struct:StructHydroAccExport
Z	SetUpTestRun.c	/^    double  Z;              \/\/ Metallicity of gas.$/;"	m	struct:StructStars	file:
Z	SetUpTestRun.c	/^    float Z;$/;"	m	struct:StructGas	file:
Z	StructuresForIO.h	/^    double Z;$/;"	m	struct:StructPhydroIOCompactDouble
Z	StructuresForIO.h	/^    double Z;$/;"	m	struct:StructPsinkIOCompactDouble
Z	StructuresForIO.h	/^    double Z;$/;"	m	struct:StructPstarIOCompactDouble
Z	StructuresForIO.h	/^    float Z;$/;"	m	struct:StructPhydroIOCompact
Z	StructuresForIO.h	/^    float Z;$/;"	m	struct:StructPhydroIOCompactMix
Z	StructuresForIO.h	/^    float Z;$/;"	m	struct:StructPhydroIOLean
Z	StructuresForIO.h	/^    float Z;$/;"	m	struct:StructPsinkIOCompact
Z	StructuresForIO.h	/^    float Z;$/;"	m	struct:StructPsinkIOCompactMix
Z	StructuresForIO.h	/^    float Z;$/;"	m	struct:StructPsinkIOLean
Z	StructuresForIO.h	/^    float Z;$/;"	m	struct:StructPstarIOCompact
Z	StructuresForIO.h	/^    float Z;$/;"	m	struct:StructPstarIOCompactMix
Z	StructuresForIO.h	/^    float Z;$/;"	m	struct:StructPstarIOLean
Z	TestRuns.c	/^static double Z;$/;"	v	file:
ZII	DataStructures.h	/^    double    ZII;        \/\/ The mass of metal by SNII.$/;"	m	struct:StructPhydro_tag
ZII	DataStructures.h	/^    double  ZII;            \/\/ The mass of metal by TypeII.$/;"	m	struct:StructPstar_tag
ZII	DataStructures.h	/^    double  ZII;            \/\/ The mass of metal due to TypeII SNe.$/;"	m	struct:StructPsink_tag
ZII	SetUpTestRun.c	/^    double  ZII;            \/\/ The mass of metal by TypeII.$/;"	m	struct:StructStars	file:
ZII	SetUpTestRun.c	/^    float ZII;$/;"	m	struct:StructGas	file:
ZII	StructuresForIO.h	/^    double ZII;$/;"	m	struct:StructPhydroIOCompactDouble
ZII	StructuresForIO.h	/^    double ZII;$/;"	m	struct:StructPsinkIOCompactDouble
ZII	StructuresForIO.h	/^    double ZII;$/;"	m	struct:StructPstarIOCompactDouble
ZII	StructuresForIO.h	/^    float ZII;$/;"	m	struct:StructPhydroIOCompact
ZII	StructuresForIO.h	/^    float ZII;$/;"	m	struct:StructPhydroIOCompactMix
ZII	StructuresForIO.h	/^    float ZII;$/;"	m	struct:StructPhydroIOLean
ZII	StructuresForIO.h	/^    float ZII;$/;"	m	struct:StructPsinkIOCompact
ZII	StructuresForIO.h	/^    float ZII;$/;"	m	struct:StructPsinkIOCompactMix
ZII	StructuresForIO.h	/^    float ZII;$/;"	m	struct:StructPsinkIOLean
ZII	StructuresForIO.h	/^    float ZII;$/;"	m	struct:StructPstarIOCompact
ZII	StructuresForIO.h	/^    float ZII;$/;"	m	struct:StructPstarIOCompactMix
ZII	StructuresForIO.h	/^    float ZII;$/;"	m	struct:StructPstarIOLean
ZIa	DataStructures.h	/^    double    ZIa;        \/\/ The mass of metal by SNIa.$/;"	m	struct:StructPhydro_tag
ZIa	DataStructures.h	/^    double  ZIa;            \/\/ The mass of metal by TypeIa.$/;"	m	struct:StructPstar_tag
ZIa	DataStructures.h	/^    double  ZIa;            \/\/ The mass of metal due to TypeIa SNe.$/;"	m	struct:StructPsink_tag
ZIa	SetUpTestRun.c	/^    double  ZIa;            \/\/ The mass of metal by TypeIa.$/;"	m	struct:StructStars	file:
ZIa	SetUpTestRun.c	/^    float ZIa;$/;"	m	struct:StructGas	file:
ZIa	StructuresForIO.h	/^    double ZIa;$/;"	m	struct:StructPhydroIOCompactDouble
ZIa	StructuresForIO.h	/^    double ZIa;$/;"	m	struct:StructPsinkIOCompactDouble
ZIa	StructuresForIO.h	/^    double ZIa;$/;"	m	struct:StructPstarIOCompactDouble
ZIa	StructuresForIO.h	/^    float ZIa;$/;"	m	struct:StructPhydroIOCompact
ZIa	StructuresForIO.h	/^    float ZIa;$/;"	m	struct:StructPhydroIOCompactMix
ZIa	StructuresForIO.h	/^    float ZIa;$/;"	m	struct:StructPhydroIOLean
ZIa	StructuresForIO.h	/^    float ZIa;$/;"	m	struct:StructPsinkIOCompact
ZIa	StructuresForIO.h	/^    float ZIa;$/;"	m	struct:StructPsinkIOCompactMix
ZIa	StructuresForIO.h	/^    float ZIa;$/;"	m	struct:StructPsinkIOLean
ZIa	StructuresForIO.h	/^    float ZIa;$/;"	m	struct:StructPstarIOCompact
ZIa	StructuresForIO.h	/^    float ZIa;$/;"	m	struct:StructPstarIOCompactMix
ZIa	StructuresForIO.h	/^    float ZIa;$/;"	m	struct:StructPstarIOLean
Z_ave	DataStructures.h	/^    double Z_ave;  \/\/ Neighbor averaged metallicity$/;"	m	struct:StructPstar_tag
Z_ave	SizeDetermination.c	/^    double Z_ave;$/;"	m	struct:StructCSActiveSNParticle	file:
Z_ave	SizeDetermination.c	/^    double Z_ave;$/;"	m	struct:StructCSActiveSWParticle	file:
Z_ave	SizeDetermination.c	/^    double Z_ave;$/;"	m	struct:StructCSImportSNParticle	file:
Z_ave	SizeDetermination.c	/^    double Z_ave;$/;"	m	struct:StructCSImportSWParticle	file:
Z_ave	SizeDetermination.c	/^    double Z_ave;$/;"	m	struct:StructCSStellarFeedbackLocalInfo	file:
Z_ave	SizeDetermination.c	/^    double Z_ave;$/;"	m	struct:StructCSStellarWindLocalInfo	file:
Z_ave	StellarFeedback.h	/^    double Z_ave;$/;"	m	struct:StructActiveStellarFeedbackParticle
Z_ave	StructuresForIO.h	/^    double Z_ave;$/;"	m	struct:StructPstarIOCompactDouble
Z_ave	StructuresForIO.h	/^    float Z_ave;$/;"	m	struct:StructPstarIOCompact
Z_ave	StructuresForIO.h	/^    float Z_ave;$/;"	m	struct:StructPstarIOCompactMix
Z_ave	StructuresForIO.h	/^    float Z_ave;$/;"	m	struct:StructPstarIOLean
Zsolar	Cooling.c	/^static double Zsolar;   \/\/ solar metallicity$/;"	v	file:
ZstarII	Delayed.c	/^    double ZstarII;\/\/ Metallicity of this star particle.$/;"	m	struct:StructDelayedFBInjection	file:
ZstarIa	Delayed.c	/^    double ZstarIa;\/\/ Metallicity of this star particle.$/;"	m	struct:StructDelayedFBInjection	file:
Zsun	RadiationPressure.c	7;"	d	file:
Zsun	StellarFeedback.c	397;"	d	file:
Zw	DataStructures.h	/^    double    Zw;         \/\/ The weight of SPHSPH$/;"	m	struct:StructPhydro_tag
Zw	HydroMisc.h	/^    double    Zw;            \/\/ Weight for SPSPH$/;"	m	struct:StructHydroAccExport
Zw	StructuresForIO.h	/^    double Zw;$/;"	m	struct:StructPhydroIOCompactDouble
Zw	StructuresForIO.h	/^    float Zw;$/;"	m	struct:StructPhydroIOCompact
Zw	StructuresForIO.h	/^    float Zw;$/;"	m	struct:StructPhydroIOCompactMix
Zw	StructuresForIO.h	/^    float Zw;$/;"	m	struct:StructPhydroIOLean
ZwPred	DataStructures.h	/^    double    ZwPred;     \/\/ <TMP> The predictor of the weight used in SPSPH$/;"	m	struct:StructPhydro_tag
ZwPred	StructuresForIO.h	/^    float ZwPred;$/;"	m	struct:StructPhydroIOLean
_NTEST	main.c	5612;"	d	file:
_RMTVSmoothedNumber_	TestRuns.c	5189;"	d	file:
_ResetTiming_	HydroKernel.c	478;"	d	file:
_ResetTiming_	SizeDetermination.c	2123;"	d	file:
_ResetTiming_	StellarFeedback.c	929;"	d	file:
_Tcrit_Parker_	ThermalConductivity.c	29;"	d	file:
_Tcrit_Spitzer_	ThermalConductivity.c	30;"	d	file:
_VERBOSE_MODE_	ThermalConductivity.c	4;"	d	file:
__AGN_TORUS_TEST__	SetUpTestRun.c	13269;"	d	file:
__AGN_TORUS_TEST__	SetUpTestRun.c	13678;"	d	file:
__ALLOCATION_H_INCLUDED__	Allocators.c	5;"	d	file:
__CHECK_SUM__	SizeDetermination.c	55;"	d	file:
__CHECK_SUM__	StellarFeedback.c	30;"	d	file:
__CHECK_SUM__	StellarFeedback.h	5;"	d
__CHECK_WEIGHT__	SizeDetermination.c	56;"	d	file:
__CHECK_WEIGHT__	StellarFeedback.c	31;"	d	file:
__CHECK_WEIGHT__	StellarFeedback.h	6;"	d
__COOLING_TABLE_INCLUDED__	CoolingTable.h	7;"	d
__COOLING_TABLE_SPAANS_2008__	CoolingTableSpaans2008.h	2;"	d
__DT_DIFF__	HIIregion.c	10;"	d	file:
__EXPORT_TIMESTEP__	SizeDetermination.c	50;"	d	file:
__LOCAL__	HIIregion.c	6;"	d	file:
__PHOTON_COUNT_BASE__	HIIregion.c	11;"	d	file:
__PHOTON_COUNT_BASE__	SizeDetermination.c	51;"	d	file:
__SKIP_HOTGAS__	HIIregion.c	8;"	d	file:
__UPDATE_ONLY_ACTIVE__	HIIregion.c	7;"	d	file:
acceli	GRAPEEmulator.c	/^static double acceli[EmuPipeLines][3];$/;"	v	file:
activebaryon_group	DataStructures.c	/^MPI_Group activebaryon_group;$/;"	v
activehydro_group	DataStructures.c	/^MPI_Group activehydro_group;$/;"	v
baryon_group	DataStructures.c	/^MPI_Group baryon_group;$/;"	v
bprint	Astro.h	35;"	d
bprintl	Astro.h	46;"	d
bprintlmpi	MPIParameters.h	44;"	d
checker	Run.c	/^static void checker(const int GID, const int LINE){$/;"	f	file:
checker2	Run.c	/^static void checker2(const int LINE){$/;"	f	file:
checker3	Run.c	/^static void checker3(const int LINE){$/;"	f	file:
checker_u	Run.c	/^static void checker_u(const int GID, const int LINE){$/;"	f	file:
dConverge	Delayed.c	299;"	d	file:
dMass	DataStructures.h	/^    double    dMass;      \/\/ <LEAN> The additional mass by SNe.$/;"	m	struct:StructPhydro_tag
dMass	StructuresForIO.h	/^    double dMass;$/;"	m	struct:StructPhydroIOCompactDouble
dMass	StructuresForIO.h	/^    float dMass;$/;"	m	struct:StructPhydroIOCompact
dMass	StructuresForIO.h	/^    float dMass;$/;"	m	struct:StructPhydroIOCompactMix
dSPHKernel	KernelFunctions.h	/^static inline double __attribute__((always_inline)) dSPHKernel(const double r, const double InvKerneli){$/;"	f
dZ	HydroMisc.h	/^    double dZ[CELibYield_Number-1]; \/\/He, C, N, O, Ne, Mg, Si, S, Ca, Fe, Ni, (Eu)$/;"	m	struct:StructHydroAccImport
dZII	DataStructures.h	/^    double    dZII;       \/\/ The mass of metal by SNII.$/;"	m	struct:StructPhydro_tag
dZII	StructuresForIO.h	/^    double dZII;$/;"	m	struct:StructPhydroIOCompactDouble
dZII	StructuresForIO.h	/^    float dZII;$/;"	m	struct:StructPhydroIOCompact
dZII	StructuresForIO.h	/^    float dZII;$/;"	m	struct:StructPhydroIOCompactMix
dZII	StructuresForIO.h	/^    float dZII;$/;"	m	struct:StructPhydroIOLean
dZIa	DataStructures.h	/^    double    dZIa;       \/\/ The mass of metal by SNIa.$/;"	m	struct:StructPhydro_tag
dZIa	StructuresForIO.h	/^    double dZIa;$/;"	m	struct:StructPhydroIOCompactDouble
dZIa	StructuresForIO.h	/^    float dZIa;$/;"	m	struct:StructPhydroIOCompact
dZIa	StructuresForIO.h	/^    float dZIa;$/;"	m	struct:StructPhydroIOCompactMix
dZIa	StructuresForIO.h	/^    float dZIa;$/;"	m	struct:StructPhydroIOLean
dbg	debug.h	15;"	d
dbgprt	Astro.h	44;"	d
dist	SetUpTestRun.c	/^    double dist;$/;"	m	struct:StructDistance	file:
distance	TestRuns.c	/^    double distance;$/;"	m	struct:StructSinkTarget	file:
dlprint	Astro.h	38;"	d
dlprintl	Astro.h	49;"	d
dlprintlmpi	MPIParameters.h	47;"	d
dn2	H2.c	/^double dn2(double n1, double n2, double Tk){$/;"	f
do_what_you_want	ReadGadgetFormat.c	/^static void do_what_you_want(void){$/;"	f	file:
dprint	Astro.h	36;"	d
dprintl	Astro.h	47;"	d
dprintlmpi	MPIParameters.h	45;"	d
dt	DataStructures.h	/^    double    dt;           \/\/ <LEAN>$/;"	m	struct:StructPbody_tag
dt	HydroMisc.h	/^    double dt;$/;"	m	struct:StructHydroAccExport
dt	HydroMisc.h	/^    double dt;$/;"	m	struct:StructHydroAccImport
dt	StructuresForIO.h	/^    double dt;$/;"	m	struct:StructPbodyIOCompactDouble
dt	StructuresForIO.h	/^    float dt;$/;"	m	struct:StructPbodyIOCompact
dt	StructuresForIO.h	/^    float dt;$/;"	m	struct:StructPbodyIOCompactMix
dt	TestRuns.c	/^static double dt;$/;"	v	file:
dt	main.c	/^    double dt;$/;"	m	struct:StructDt	file:
dt_RP_max	RadiationPressure.c	/^static double dt_RP_max;$/;"	v	file:
dt_SW_max	StellarWind.c	/^static double dt_SW_max;$/;"	v	file:
dt_const	DataStructures.h	/^    double    dt_const; \/\/ dt for constant run.$/;"	m	struct:StructPall
dt_fb	DataStructures.h	/^    double dt_fb; \/\/ <TMP> <LEAN>$/;"	m	struct:StructPstar_tag
dt_hydro	DataStructures.h	/^    double    dt_hydro;        \/\/ <LEAN>$/;"	m	struct:StructPhydro_tag
dt_hydro	StructuresForIO.h	/^    double dt_hydro;$/;"	m	struct:StructPhydroIOCompactDouble
dt_hydro	StructuresForIO.h	/^    float dt_hydro;$/;"	m	struct:StructPhydroIOCompact
dt_hydro	StructuresForIO.h	/^    float dt_hydro;$/;"	m	struct:StructPhydroIOCompactMix
dt_hydro_localmin	DataStructures.h	/^    double    dt_hydro_localmin; \/\/ <LEAN> $/;"	m	struct:StructPhydro_tag
dt_hydro_localmin	StructuresForIO.h	/^    double dt_hydro_localmin;$/;"	m	struct:StructPhydroIOCompactDouble
dt_hydro_localmin	StructuresForIO.h	/^    float dt_hydro_localmin;$/;"	m	struct:StructPhydroIOCompact
dt_hydro_localmin	StructuresForIO.h	/^    float dt_hydro_localmin;$/;"	m	struct:StructPhydroIOCompactMix
dt_localmin	DataStructures.h	/^    double  dt_localmin;    \/\/ <LEAN> The local minimum time-steps.$/;"	m	struct:StructPsink_tag
dt_localmin	SinkParticle.c	/^    double  dt_localmin; \/\/ the local minimum dt.$/;"	m	struct:StructSinkExport	file:
dt_localmin	SinkParticle.c	/^    double dt_localmin;$/;"	m	struct:StructParticleDataForActiveSinkFOF	file:
dt_localmin	StructuresForIO.h	/^    double dt_localmin;$/;"	m	struct:StructPsinkIOCompactDouble
dt_localmin	StructuresForIO.h	/^    float dt_localmin;$/;"	m	struct:StructPsinkIOCompact
dt_localmin	StructuresForIO.h	/^    float dt_localmin;$/;"	m	struct:StructPsinkIOCompactMix
dtmax	DataStructures.h	/^    double    dtmax;        \/\/ maximum time step within current block.$/;"	m	struct:StructPall
dtmin	DataStructures.h	/^    double    dtmin;        \/\/ minimum time step within current block.$/;"	m	struct:StructPall
dtnow	DataStructures.h	/^    double    dtnow;        \/\/ Current dt.$/;"	m	struct:StructPall
ep	Heating.c	10;"	d	file:
eprint	Astro.h	40;"	d
eprintl	Astro.h	51;"	d
eprintlmpi	MPIParameters.h	49;"	d
epsi	GRAPEEmulator.c	/^static double epsi[EmuPipeLines];$/;"	v	file:
fH2	DataStructures.h	/^    double  fH2;$/;"	m	struct:StructPhydro_tag
fH2	StructuresForIO.h	/^    double fH2;$/;"	m	struct:StructPhydroIOCompactDouble
fH2	StructuresForIO.h	/^    float fH2;$/;"	m	struct:StructPhydroIOCompact
fH2	StructuresForIO.h	/^    float fH2;$/;"	m	struct:StructPhydroIOCompactMix
fH2	StructuresForIO.h	/^    float fH2;$/;"	m	struct:StructPhydroIOLean
fbaryon_NFW	SetUpTestRun.c	/^double fbaryon_NFW;$/;"	v
fij	DataStructures.h	/^    double    fij;           \/\/ <LEAN> Part of fij. fij = 1-fij\/(Uj)$/;"	m	struct:StructPhydro_tag
fij	HydroAcc.c	/^    double fij; $/;"	m	struct:StructHydroAccCorrectEnegyDensityGradh	file:
fij	HydroMisc.h	/^    double    fij;$/;"	m	struct:StructHydroAccExport
fij	StructuresForIO.h	/^    double fij;$/;"	m	struct:StructPhydroIOCompactDouble
fij	StructuresForIO.h	/^    float fij;$/;"	m	struct:StructPhydroIOCompact
fij	StructuresForIO.h	/^    float fij;$/;"	m	struct:StructPhydroIOCompactMix
fill	ReadGadgetFormat.c	/^  char     fill[256- 6*4- 6*8- 2*8- 2*4- 6*4- 2*4 - 4*8];  \/* fills to 256 Bytes *\/$/;"	m	struct:Gadget_io_header_1	file:
find_uhot	Cooling.c	/^static inline double __attribute__((always_inline)) find_uhot(double t_cool_in_year, double nH_in_cgs, double u_in_simulation_units){ \/\/ t_cool (yr), nH (\/cc), u (code units)$/;"	f	file:
first	Delayed.c	/^static bool first = true;$/;"	v	file:
first	ForceFromExternalPotentials.c	/^static bool first = true;$/;"	v	file:
first	HydroKernel.c	/^static bool first = true;$/;"	v	file:
first	SizeDetermination.c	/^static bool first = true;$/;"	v	file:
first	StellarFeedback.c	/^static bool first = true;$/;"	v	file:
firstAC	PlantHydroTree.c	/^static bool firstAC = true;$/;"	v	file:
first_agn	HydroExtraOperations.c	/^static bool first_agn = true;$/;"	v	file:
flag_cooling	ReadGadgetFormat.c	/^  int      flag_cooling;$/;"	m	struct:Gadget_io_header_1	file:
flag_feedback	ReadGadgetFormat.c	/^  int      flag_feedback;$/;"	m	struct:Gadget_io_header_1	file:
flag_sfr	ReadGadgetFormat.c	/^  int      flag_sfr;$/;"	m	struct:Gadget_io_header_1	file:
fp_sinklog	SinkParticle.c	/^FILE *fp_sinklog;$/;"	v
fprint	Astro.h	39;"	d
fprintl	Astro.h	50;"	d
fprintlmpi	MPIParameters.h	48;"	d
fs	H2.c	/^static double fs(double N2){$/;"	f	file:
fx	SetUpTestRun.c	/^static inline double __attribute__((always_inline)) fx(const double x){$/;"	f	file:
g5_close_emu	GRAPEEmulator.c	/^void g5_close_emu(void){$/;"	f
g5_get_force_emu	GRAPEEmulator.c	/^void g5_get_force_emu(const int number_of_pipelines, $/;"	f
g5_get_number_of_boards_emu	GRAPEEmulator.c	/^int g5_get_number_of_boards_emu(void){$/;"	f
g5_get_number_of_pipelines_emu	GRAPEEmulator.c	/^int g5_get_number_of_pipelines_emu(void){$/;"	f
g5_open_emu	GRAPEEmulator.c	/^void g5_open_emu(void){$/;"	f
g5_run_emu	GRAPEEmulator.c	/^void g5_run_emu(void){$/;"	f
g5_set_ip_emu	GRAPEEmulator.c	/^void g5_set_ip_emu(const int number_of_pipelines, double Pos[restrict][3],$/;"	f
g5_set_n_emu	GRAPEEmulator.c	/^void g5_set_n_emu(const int number){$/;"	f
g5_set_range_emu	GRAPEEmulator.c	/^void g5_set_range_emu(const double size1, const double size2, const double minimum_mass){$/;"	f
g5_set_xmj_emu	GRAPEEmulator.c	/^void g5_set_xmj_emu(const int offset, const int number, $/;"	f
gprint	Astro.h	41;"	d
gprintl	Astro.h	52;"	d
gprintlmpi	MPIParameters.h	50;"	d
hubble	DataStructures.h	/^    double hubble;      \/\/ h x 100 km\/s\/Mpc$/;"	m	struct:StructPall
hydro_group	DataStructures.c	/^MPI_Group hydro_group;$/;"	v
iBase	Cooling.c	/^const static double iBase = 1.0\/(REDUCEDFUVHEATINGRATE_TMAX-REDUCEDFUVHEATINGRATE_TMIN);$/;"	v	file:
iBase	Heating.c	/^const static double iBase = 1.0\/(Tmax-Tmin);$/;"	v	file:
iRecvAC	PlantHydroTree.c	/^static double *iRecvAC;$/;"	v	file:
iSNIINumber	Delayed.c	/^static double iSNIINumber;$/;"	v	file:
index	HydroDensity.c	/^    int index;$/;"	m	struct:StructHydroDensityInput	file:
index	SetUpTestRun.c	/^    int index;$/;"	m	struct:StructDistance	file:
index	TestRuns.c	/^    int index;$/;"	m	struct:StructSinkTarget	file:
index	main.c	/^    int index;$/;"	m	struct:StructDt	file:
isqrt11	Cooling.c	/^static double sqrt11,isqrt11;$/;"	v	file:
k	DataStructures.h	/^    short     k;            \/\/ <TMP> <LEAN>$/;"	m	struct:StructPbody_tag
k	H2.c	/^static double k = 3.0\/4.0; \/\/ Draine & Bertoldi (1996)$/;"	v	file:
k	SizeDetermination.c	/^    int k;$/;"	m	struct:StructActiveParticle	file:
k	StellarFeedback.c	/^    int k;$/;"	m	struct:StructEnergyHeavyElements	file:
k	StellarFeedback.h	/^    int k;$/;"	m	struct:StructActiveStellarFeedbackParticle
k_hydro	DataStructures.h	/^    int       k_hydro;         \/\/ <LEAN>$/;"	m	struct:StructPhydro_tag
k_hydro	HydroMisc.h	/^    int       k_hydro;$/;"	m	struct:StructHydroDensityExport
k_hydro	StructuresForIO.h	/^    int k_hydro;$/;"	m	struct:StructPhydroIOCompact
k_hydro	StructuresForIO.h	/^    int k_hydro;$/;"	m	struct:StructPhydroIOCompactDouble
k_hydro	StructuresForIO.h	/^    int k_hydro;$/;"	m	struct:StructPhydroIOCompactMix
k_hydro_localmin	DataStructures.h	/^    int       k_hydro_localmin;  \/\/ <LEAN>$/;"	m	struct:StructPhydro_tag
k_hydro_localmin	SizeDetermination.c	/^    int       k_hydro_localmin;$/;"	m	struct:StructCSImport	file:
k_hydro_localmin	SizeDetermination.c	/^    int k_hydro_localmin;    $/;"	m	struct:StructCSImportHydroParticle	file:
k_hydro_localmin	SizeDetermination.c	/^    int k_hydro_localmin;$/;"	m	struct:StructActiveParticle	file:
k_hydro_localmin	SizeDetermination.c	/^    int k_hydro_localmin;$/;"	m	struct:StructCSHIILocalInfo	file:
k_hydro_localmin	SizeDetermination.c	/^    int k_hydro_localmin;$/;"	m	struct:StructCSHydroLocalInfo	file:
k_hydro_localmin	SizeDetermination.c	/^    int k_hydro_localmin;$/;"	m	struct:StructCSRadiationPressureLocalInfo	file:
k_hydro_localmin	SizeDetermination.c	/^    int k_hydro_localmin;$/;"	m	struct:StructCSStellarFeedbackLocalInfo	file:
k_hydro_localmin	SizeDetermination.c	/^    int k_hydro_localmin;$/;"	m	struct:StructCSStellarWindLocalInfo	file:
k_hydro_localmin	StellarFeedback.c	/^    int k_hydro_localmin;$/;"	m	struct:StructEnergyHeavyElements	file:
k_hydro_localmin	StellarFeedback.h	/^    int k_hydro_localmin;$/;"	m	struct:StructActiveStellarFeedbackParticle
k_hydro_localmin	StructuresForIO.h	/^    int k_hydro_localmin;$/;"	m	struct:StructPhydroIOCompact
k_hydro_localmin	StructuresForIO.h	/^    int k_hydro_localmin;$/;"	m	struct:StructPhydroIOCompactDouble
k_hydro_localmin	StructuresForIO.h	/^    int k_hydro_localmin;$/;"	m	struct:StructPhydroIOCompactMix
k_hydro_localmin_old	DataStructures.h	/^    int       k_hydro_localmin_old;  \/\/ <LEAN> $/;"	m	struct:StructPhydro_tag
k_hydro_localmin_old	StructuresForIO.h	/^    int k_hydro_localmin_old;$/;"	m	struct:StructPhydroIOCompact
k_hydro_localmin_old	StructuresForIO.h	/^    int k_hydro_localmin_old;$/;"	m	struct:StructPhydroIOCompactDouble
k_hydro_localmin_old	StructuresForIO.h	/^    int k_hydro_localmin_old;$/;"	m	struct:StructPhydroIOCompactMix
k_star	HIIregion.c	/^    int       k_star;$/;"	m	struct:StructHIIExport	file:
k_star	SizeDetermination.c	/^    int       k_star;$/;"	m	struct:StructCSExport	file:
kerneli	GRAPEEmulator.c	/^static double kerneli[EmuPipeLines];$/;"	v	file:
kmax	DataStructures.h	/^    int       kmax;$/;"	m	struct:StructPall
logTmax	Cooling.c	/^static double logTmin,logTmax;$/;"	v	file:
logTmin	Cooling.c	/^static double logTmin,logTmax;$/;"	v	file:
main	main.c	/^int main(int argc, char *argv[]){$/;"	f
main_3DCollapse	main.c	/^int main_3DCollapse(const int argc, char *argv[]){$/;"	f
main_3DShockTube	main.c	/^int main_3DShockTube(void){$/;"	f
main_AGNTorus	main.c	/^int main_AGNTorus(const int argc, char *argv[]){$/;"	f
main_BenchMarkTest	main.c	/^int main_BenchMarkTest(void){$/;"	f
main_BenchMarkTestForForce	main.c	/^int main_BenchMarkTestForForce(void){$/;"	f
main_BlastWave	main.c	/^int main_BlastWave(void){$/;"	f
main_BreakingDam	main.c	/^int main_BreakingDam(void){$/;"	f
main_CloudExplosion	main.c	/^int main_CloudExplosion(const int argc, char *argv[]){$/;"	f
main_ColdCollapseTest	main.c	/^int main_ColdCollapseTest(const int argc, char *argv[]){$/;"	f
main_ColdCollapseTest_ActiveParticles	main.c	/^int main_ColdCollapseTest_ActiveParticles(void){$/;"	f
main_CosmologicalRun	main.c	/^int main_CosmologicalRun(const int argc, char *argv[]){$/;"	f
main_DiceRun	main.c	/^int main_DiceRun(const int argc, char *argv[]){$/;"	f
main_FOFTest	TestRuns.c	/^int main_FOFTest(const int argc, char *argv[]){$/;"	f
main_ForceHydroTest	main.c	/^int main_ForceHydroTest(void){$/;"	f
main_GalacticCenter	main.c	/^int main_GalacticCenter(const int argc, char *argv[]){$/;"	f
main_GalaxyFormation	main.c	/^int main_GalaxyFormation(const int argc, char *argv[]){$/;"	f
main_GravityTreeTest	TestRuns.c	/^int main_GravityTreeTest(const int argc, char *argv[]){$/;"	f
main_HydroCheckDirectAndTree	main.c	/^int main_HydroCheckDirectAndTree(const int argc, char *argv[]){$/;"	f
main_HydroStatic	main.c	/^int main_HydroStatic(const int argc, char *argv[]){$/;"	f
main_HydroTreeIntegralTest	TestRuns.c	/^int main_HydroTreeIntegralTest(const int argc, char *argv[]){$/;"	f
main_HydroTreeRobustTest	TestRuns.c	/^int main_HydroTreeRobustTest(const int argc, char *argv[]){$/;"	f
main_HydroTreeTest	TestRuns.c	/^int main_HydroTreeTest(const int argc, char *argv[]){$/;"	f
main_IOTest	main.c	/^int main_IOTest(const int argc, char *argv[]){$/;"	f
main_IsolateDisk	main.c	/^int main_IsolateDisk(const int argc, char *argv[]){$/;"	f
main_IsothermalSphericalCollapse	main.c	/^int main_IsothermalSphericalCollapse(void){$/;"	f
main_KHInstability	main.c	/^int main_KHInstability(const int argc, char *argv[]){$/;"	f
main_Kepler	main.c	/^int main_Kepler(void){$/;"	f
main_M2SphericalCollapse	main.c	/^int main_M2SphericalCollapse(const int argc, char *argv[]){$/;"	f
main_MakeInitialConditionForCloudExplosion	main.c	/^int main_MakeInitialConditionForCloudExplosion(const int argc, char *argv[]){$/;"	f
main_MilkywayModel	main.c	/^int main_MilkywayModel(const int argc, char *argv[]){$/;"	f
main_MomentumFeedbackTest	TestRuns.c	/^int main_MomentumFeedbackTest(const int argc, char *argv[]){$/;"	f
main_NFWrun	main.c	/^int main_NFWrun(const int argc, char *argv[]){$/;"	f
main_NavarroWhiteTest	main.c	/^int main_NavarroWhiteTest(void){$/;"	f
main_NeighborSearchTest	main.c	/^int main_NeighborSearchTest(void){$/;"	f
main_NeighborSearchTest2	main.c	/^int main_NeighborSearchTest2(void){$/;"	f
main_Orbit	main.c	/^int main_Orbit(void){$/;"	f
main_ReadAndPlantTreeTest	main.c	/^int main_ReadAndPlantTreeTest(const int argc, char *argv[]){$/;"	f
main_SantaBarbara	main.c	/^int main_SantaBarbara(const int argc, char *argv[]){$/;"	f
main_SelfSimilarCooling	main.c	/^int main_SelfSimilarCooling(void){$/;"	f
main_ShockTube	main.c	/^int main_ShockTube(void){$/;"	f
main_SinusoidalWave	main.c	/^int main_SinusoidalWave(void){$/;"	f
main_SmoothIsolateDisk	main.c	/^int main_SmoothIsolateDisk(const int argc, char *argv[]){$/;"	f
main_StellarFeedbackTest	TestRuns.c	/^int main_StellarFeedbackTest(const int argc, char *argv[]){$/;"	f
main_TestDomainDecomposition	TestRuns.c	/^int main_TestDomainDecomposition(const int argc, char *argv[]){$/;"	f
main_TestExactCooling	TestRuns.c	/^int main_TestExactCooling(const int argc, char *argv[]){$/;"	f
main_TestFUVFeedback	TestRuns.c	/^int main_TestFUVFeedback(const int argc, char *argv[]){$/;"	f
main_TestRadiationPressure	TestRuns.c	/^int main_TestRadiationPressure(const int argc, char *argv[]){$/;"	f
main_TestStromgrenSphere	TestRuns.c	/^int main_TestStromgrenSphere(const int argc, char *argv[]){$/;"	f
main_TestSymmetrizedPotentialError	main.c	/^int main_TestSymmetrizedPotentialError(const int argc, char *argv[]){$/;"	f
main_TestSymmetrizedPotentialError2	main.c	/^int main_TestSymmetrizedPotentialError2(const int argc, char *argv[]){$/;"	f
main_TestSymmetrizedPotentialError_ColdCollapse	main.c	/^int main_TestSymmetrizedPotentialError_ColdCollapse(const int argc, char *argv[]){$/;"	f
main_Test_1DThermalConductivity	TestRuns.c	/^int main_Test_1DThermalConductivity(const int argc, char *argv[]){$/;"	f
main_Test_3DThermalConductivity	TestRuns.c	/^int main_Test_3DThermalConductivity(const int argc, char *argv[]){$/;"	f
main_Test_EquilibriumTemperature	TestRuns.c	/^int main_Test_EquilibriumTemperature(const int argc, char *argv[]){$/;"	f
main_Test_HydroQuantities	TestRuns.c	/^int main_Test_HydroQuantities(const int argc, char *argv[]){$/;"	f
main_Test_NeighborSearch	TestRuns.c	/^int main_Test_NeighborSearch(const int argc, char *argv[]){$/;"	f
main_Test_ParticleSplitting	TestRuns.c	/^int main_Test_ParticleSplitting(const int argc, char *argv[]){$/;"	f
main_Test_ReinickeMeyerTerVehn	TestRuns.c	/^int main_Test_ReinickeMeyerTerVehn(const int argc, char *argv[]){$/;"	f
main_Test_Sink	TestRuns.c	/^int main_Test_Sink(const int argc, char *argv[]){$/;"	f
main_Test_SinkParticleRun	TestRuns.c	/^int main_Test_SinkParticleRun(const int argc, char *argv[]){$/;"	f
main_TreeTest	main.c	/^int main_TreeTest(void){$/;"	f
main_TwoFluids	main.c	/^int main_TwoFluids(void){$/;"	f
main_rotatingdisk_with_sink	main.c	/^int main_rotatingdisk_with_sink(const int argc, char *argv[]){$/;"	f
main_turbulence	main.c	/^int main_turbulence(const int argc, char *argv[]){$/;"	f
makefiles	RunLogs.c	/^char makefiles[] = "makeflags";$/;"	v
mass	ReadGadgetFormat.c	/^  double   mass[6];$/;"	m	struct:Gadget_io_header_1	file:
mass	SetUpTestRun.c	/^    double mass;$/;"	m	struct:StructISC	file:
mj	GRAPEEmulator.c	/^static double *mj;$/;"	v	file:
mpi_request_Export_RecvAC	PlantHydroTree.c	/^static MPI_Request *mpi_request_Export_RecvAC;$/;"	v	file:
mpi_request_Export_SendAC	PlantHydroTree.c	/^static MPI_Request *mpi_request_Export_SendAC;$/;"	v	file:
mpi_status_Export_RecvAC	PlantHydroTree.c	/^static MPI_Status *mpi_status_Export_RecvAC;$/;"	v	file:
mpi_status_Export_SendAC	PlantHydroTree.c	/^static MPI_Status *mpi_status_Export_SendAC;$/;"	v	file:
myid	MPIParameters.c	/^static int numprocs,myid,namelen,numgrapes,numprocspower;$/;"	v	file:
n1_for_boundary_force	SetUpTestRun.c	6778;"	d	file:
n2_for_boundary_force	SetUpTestRun.c	6779;"	d	file:
nH	TestRuns.c	/^double nH; \/\/ in number\/cc.$/;"	v
nH_ave	DataStructures.h	/^    double nH_ave; \/\/ Neighbor averaged number density$/;"	m	struct:StructPstar_tag
nH_ave	SizeDetermination.c	/^    double nH_ave;$/;"	m	struct:StructCSActiveSNParticle	file:
nH_ave	SizeDetermination.c	/^    double nH_ave;$/;"	m	struct:StructCSActiveSWParticle	file:
nH_ave	SizeDetermination.c	/^    double nH_ave;$/;"	m	struct:StructCSImportSNParticle	file:
nH_ave	SizeDetermination.c	/^    double nH_ave;$/;"	m	struct:StructCSImportSWParticle	file:
nH_ave	SizeDetermination.c	/^    double nH_ave;$/;"	m	struct:StructCSStellarFeedbackLocalInfo	file:
nH_ave	SizeDetermination.c	/^    double nH_ave;$/;"	m	struct:StructCSStellarWindLocalInfo	file:
nH_ave	StellarFeedback.h	/^    double nH_ave;$/;"	m	struct:StructActiveStellarFeedbackParticle
nH_ave	StructuresForIO.h	/^    double nH_ave;$/;"	m	struct:StructPstarIOCompactDouble
nH_ave	StructuresForIO.h	/^    float nH_ave;$/;"	m	struct:StructPstarIOCompact
nH_ave	StructuresForIO.h	/^    float nH_ave;$/;"	m	struct:StructPstarIOCompactMix
nH_ave	StructuresForIO.h	/^    float nH_ave;$/;"	m	struct:StructPstarIOLean
nLy	HIIregion.c	/^double *nLy[NumberofDataSet_nLy];$/;"	v
nLyEnd	HIIregion.c	/^int nLyEnd[NumberofDataSet_nLy];$/;"	v
nLyZ0	HIIregion.c	/^double nLyZ0[] = {.282E+47,.317E+47,.348E+47,.302E+47,.169E+47,.105E+47,.694E+46,.464E+46,$/;"	v
nLyZSolar	HIIregion.c	/^double nLyZSolar[] = {.243E+47,.235E+47,.193E+47,.143E+47,.681E+46,.358E+46,.106E+46,.550E+45,$/;"	v
n_s	SetUpTestRun.c	/^    float n_s;$/;"	m	struct:StructHeader	file:
namelen	MPIParameters.c	/^static int numprocs,myid,namelen,numgrapes,numprocspower;$/;"	v	file:
nbindex	HydroDensity.c	/^    int nbindex; $/;"	m	struct:StructHydroDensityInput	file:
ni	GRAPEEmulator.c	/^static int ni;$/;"	v	file:
nj	GRAPEEmulator.c	/^static int nj;$/;"	v	file:
npart	ReadGadgetFormat.c	/^  int      npart[6];$/;"	m	struct:Gadget_io_header_1	file:
npartTotal	ReadGadgetFormat.c	/^  int      npartTotal[6];$/;"	m	struct:Gadget_io_header_1	file:
num_files	ReadGadgetFormat.c	/^  int      num_files;$/;"	m	struct:Gadget_io_header_1	file:
numgrapes	MPIParameters.c	/^static int numprocs,myid,namelen,numgrapes,numprocspower;$/;"	v	file:
numprocs	MPIParameters.c	/^static int numprocs,myid,namelen,numgrapes,numprocspower;$/;"	v	file:
numprocspower	MPIParameters.c	/^static int numprocs,myid,namelen,numgrapes,numprocspower;$/;"	v	file:
parameters	RunLogs.c	/^char parameters[] = "Pall";$/;"	v
posi	GRAPEEmulator.c	/^static double posi[EmuPipeLines][3];$/;"	v	file:
posj	GRAPEEmulator.c	/^static double (*posj)[3];$/;"	v	file:
poti	GRAPEEmulator.c	/^static double poti[EmuPipeLines];$/;"	v	file:
pprint	Astro.h	43;"	d
pprintl	Astro.h	55;"	d
pprintlmpi	MPIParameters.h	52;"	d
print_format	Astro.h	59;"	d
printline	Astro.h	57;"	d
processor_name	MPIParameters.c	/^static char processor_name[MPI_MAX_PROCESSOR_NAME];$/;"	v	file:
r	SetUpTestRun.c	/^    double r;$/;"	m	struct:StructISC	file:
read_contains_of_structure_from_copy	AutoMakeIO.rb	/^def read_contains_of_structure_from_copy(source_structure_name,dest_structure_name,current_read_file,current_output_file,version)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_compact_double.write_contains_of_structure_for_compact_mix.write_contains_of_structure_for_lean.write_contains_of_structure_for_copy
read_contains_of_structure_from_copy	AutoMakeIOStructures.rb	/^def read_contains_of_structure_from_copy(source_structure_name,dest_structure_name,current_read_file,current_output_file,version)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_copy
read_contains_of_structure_from_copy_compact	AutoMakeIO.rb	/^def read_contains_of_structure_from_copy_compact(structure_name,source_structure_name,current_read_file,current_output_file)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_compact_double.write_contains_of_structure_for_compact_mix.write_contains_of_structure_for_lean.write_contains_of_structure_for_copy.read_contains_of_structure_from_copy.read_contains_of_structure_from_copy_lean.write_contains_of_structure_for_copy_compact.write_contains_of_structure_for_copy_compact_double.write_contains_of_structure_for_copy_compact_mix.write_contains_of_structure_for_copy_lean.write_contains_of_structure_for_copy_compact_elements.write_contains_of_structure_for_copy_compact_double_elements.write_contains_of_structure_for_copy_compact_mix_elements.write_contains_of_structure_for_copy_lean_elements
read_contains_of_structure_from_copy_compact	AutoMakeIOStructures.rb	/^def read_contains_of_structure_from_copy_compact(structure_name,source_structure_name,current_read_file,current_output_file)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_copy.read_contains_of_structure_from_copy.write_contains_of_structure_for_copy_compact
read_contains_of_structure_from_copy_lean	AutoMakeIO.rb	/^def read_contains_of_structure_from_copy_lean(source_structure_name,dest_structure_name,current_read_file,current_output_file,version)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_compact_double.write_contains_of_structure_for_compact_mix.write_contains_of_structure_for_lean.write_contains_of_structure_for_copy.read_contains_of_structure_from_copy
read_function_from_copy	AutoMakeIO.rb	/^def read_function_from_copy(structure_name,current_read_file,current_output_file,current_header_file,version)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_compact_double.write_contains_of_structure_for_compact_mix.write_contains_of_structure_for_lean.write_contains_of_structure_for_copy.read_contains_of_structure_from_copy.read_contains_of_structure_from_copy_lean.write_contains_of_structure_for_copy_compact.write_contains_of_structure_for_copy_compact_double.write_contains_of_structure_for_copy_compact_mix.write_contains_of_structure_for_copy_lean.write_contains_of_structure_for_copy_compact_elements.write_contains_of_structure_for_copy_compact_double_elements.write_contains_of_structure_for_copy_compact_mix_elements.write_contains_of_structure_for_copy_lean_elements.read_contains_of_structure_from_copy_compact
read_function_from_copy	AutoMakeIOStructures.rb	/^def read_function_from_copy(structure_name,current_read_file,current_output_file,version)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_copy.read_contains_of_structure_from_copy.write_contains_of_structure_for_copy_compact.read_contains_of_structure_from_copy_compact
redshift	ReadGadgetFormat.c	/^  double   redshift;$/;"	m	struct:Gadget_io_header_1	file:
return_array_name	AutoMakeIO.rb	/^def return_array_name(str)$/;"	f
return_array_name	AutoMakeIOStructures.rb	/^def return_array_name(str)$/;"	f
return_array_size	AutoMakeIO.rb	/^def return_array_size(str)$/;"	f
return_array_size	AutoMakeIOStructures.rb	/^def return_array_size(str)$/;"	f
return_element_size	AutoMakeIO.rb	/^def return_element_size$/;"	f
return_type_name_size	AutoMakeIO.rb	/^def return_type_name_size(str)$/;"	f
return_type_name_size	AutoMakeIOStructures.rb	/^def return_type_name_size(str)$/;"	f
sMass	SetUpTestRun.c	/^    double  sMass;           \/\/ Current Mass$/;"	m	struct:StructStars	file:
sam	SetUpTestRun.c	/^    double sam;$/;"	m	struct:StructISC	file:
sigma_8	SetUpTestRun.c	/^    float sigma_8;$/;"	m	struct:StructHeader	file:
sprint	Astro.h	42;"	d
sprintl	Astro.h	53;"	d
sprintlmpi	MPIParameters.h	51;"	d
sqrt11	Cooling.c	/^static double sqrt11,isqrt11;$/;"	v	file:
sublist	CalcEffectiveSurfaceArea.c	/^static int *sublist = NULL; $/;"	v	file:
sublist	PlantGravityTree.c	/^static int *sublist; $/;"	v	file:
sublist	PlantHydroTree.c	/^static int *sublist; $/;"	v	file:
sublist	PlantHydroTreeImported.c	/^static int *sublist; $/;"	v	file:
sublist	PlantStellarTree.c	/^static int *sublist; $/;"	v	file:
sublist	PlantYoungStarTree.c	/^static int *sublist; $/;"	v	file:
swap	Astro.h	8;"	d
t0____	Astro.h	/^double t0____,t1____;$/;"	v
t1____	Astro.h	/^double t0____,t1____;$/;"	v
time	ReadGadgetFormat.c	/^  double   time;$/;"	m	struct:Gadget_io_header_1	file:
tmpLeaf	StellarFeedback.c	/^int tmpLeaf;$/;"	v
vprint	Astro.h	69;"	d
write_contains_of_structure	AutoMakeIO.rb	/^def write_contains_of_structure(current_read_file,current_output_file)$/;"	f
write_contains_of_structure	AutoMakeIOStructures.rb	/^def write_contains_of_structure(current_read_file,current_output_file)$/;"	f
write_contains_of_structure_for_compact	AutoMakeIO.rb	/^def write_contains_of_structure_for_compact(current_read_file,current_output_file)$/;"	f	class:write_contains_of_structure
write_contains_of_structure_for_compact	AutoMakeIOStructures.rb	/^def write_contains_of_structure_for_compact(current_read_file,current_output_file)$/;"	f	class:write_contains_of_structure
write_contains_of_structure_for_compact_double	AutoMakeIO.rb	/^def write_contains_of_structure_for_compact_double(current_read_file,current_output_file)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact
write_contains_of_structure_for_compact_mix	AutoMakeIO.rb	/^def write_contains_of_structure_for_compact_mix(current_read_file,current_output_file)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_compact_double
write_contains_of_structure_for_copy	AutoMakeIO.rb	/^def write_contains_of_structure_for_copy(structure_name,source_structure_name,current_read_file,current_output_file)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_compact_double.write_contains_of_structure_for_compact_mix.write_contains_of_structure_for_lean
write_contains_of_structure_for_copy	AutoMakeIOStructures.rb	/^def write_contains_of_structure_for_copy(structure_name,source_structure_name,current_read_file,current_output_file)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact
write_contains_of_structure_for_copy_compact	AutoMakeIO.rb	/^def write_contains_of_structure_for_copy_compact(structure_name,source_structure_name,current_read_file,current_output_file)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_compact_double.write_contains_of_structure_for_compact_mix.write_contains_of_structure_for_lean.write_contains_of_structure_for_copy.read_contains_of_structure_from_copy.read_contains_of_structure_from_copy_lean
write_contains_of_structure_for_copy_compact	AutoMakeIOStructures.rb	/^def write_contains_of_structure_for_copy_compact(structure_name,source_structure_name,current_read_file,current_output_file)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_copy.read_contains_of_structure_from_copy
write_contains_of_structure_for_copy_compact_double	AutoMakeIO.rb	/^def write_contains_of_structure_for_copy_compact_double(structure_name,source_structure_name,current_read_file,current_output_file)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_compact_double.write_contains_of_structure_for_compact_mix.write_contains_of_structure_for_lean.write_contains_of_structure_for_copy.read_contains_of_structure_from_copy.read_contains_of_structure_from_copy_lean.write_contains_of_structure_for_copy_compact
write_contains_of_structure_for_copy_compact_double_elements	AutoMakeIO.rb	/^def write_contains_of_structure_for_copy_compact_double_elements(structure_name,pointer,source_structure_name,current_read_file,current_output_file)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_compact_double.write_contains_of_structure_for_compact_mix.write_contains_of_structure_for_lean.write_contains_of_structure_for_copy.read_contains_of_structure_from_copy.read_contains_of_structure_from_copy_lean.write_contains_of_structure_for_copy_compact.write_contains_of_structure_for_copy_compact_double.write_contains_of_structure_for_copy_compact_mix.write_contains_of_structure_for_copy_lean.write_contains_of_structure_for_copy_compact_elements
write_contains_of_structure_for_copy_compact_elements	AutoMakeIO.rb	/^def write_contains_of_structure_for_copy_compact_elements(structure_name,pointer,source_structure_name,current_read_file,current_output_file)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_compact_double.write_contains_of_structure_for_compact_mix.write_contains_of_structure_for_lean.write_contains_of_structure_for_copy.read_contains_of_structure_from_copy.read_contains_of_structure_from_copy_lean.write_contains_of_structure_for_copy_compact.write_contains_of_structure_for_copy_compact_double.write_contains_of_structure_for_copy_compact_mix.write_contains_of_structure_for_copy_lean
write_contains_of_structure_for_copy_compact_mix	AutoMakeIO.rb	/^def write_contains_of_structure_for_copy_compact_mix(structure_name,source_structure_name,current_read_file,current_output_file)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_compact_double.write_contains_of_structure_for_compact_mix.write_contains_of_structure_for_lean.write_contains_of_structure_for_copy.read_contains_of_structure_from_copy.read_contains_of_structure_from_copy_lean.write_contains_of_structure_for_copy_compact.write_contains_of_structure_for_copy_compact_double
write_contains_of_structure_for_copy_compact_mix_elements	AutoMakeIO.rb	/^def write_contains_of_structure_for_copy_compact_mix_elements(structure_name,pointer,source_structure_name,current_read_file,current_output_file)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_compact_double.write_contains_of_structure_for_compact_mix.write_contains_of_structure_for_lean.write_contains_of_structure_for_copy.read_contains_of_structure_from_copy.read_contains_of_structure_from_copy_lean.write_contains_of_structure_for_copy_compact.write_contains_of_structure_for_copy_compact_double.write_contains_of_structure_for_copy_compact_mix.write_contains_of_structure_for_copy_lean.write_contains_of_structure_for_copy_compact_elements.write_contains_of_structure_for_copy_compact_double_elements
write_contains_of_structure_for_copy_lean	AutoMakeIO.rb	/^def write_contains_of_structure_for_copy_lean(structure_name,source_structure_name,current_read_file,current_output_file)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_compact_double.write_contains_of_structure_for_compact_mix.write_contains_of_structure_for_lean.write_contains_of_structure_for_copy.read_contains_of_structure_from_copy.read_contains_of_structure_from_copy_lean.write_contains_of_structure_for_copy_compact.write_contains_of_structure_for_copy_compact_double.write_contains_of_structure_for_copy_compact_mix
write_contains_of_structure_for_copy_lean_elements	AutoMakeIO.rb	/^def write_contains_of_structure_for_copy_lean_elements(structure_name,pointer,source_structure_name,current_read_file,current_output_file)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_compact_double.write_contains_of_structure_for_compact_mix.write_contains_of_structure_for_lean.write_contains_of_structure_for_copy.read_contains_of_structure_from_copy.read_contains_of_structure_from_copy_lean.write_contains_of_structure_for_copy_compact.write_contains_of_structure_for_copy_compact_double.write_contains_of_structure_for_copy_compact_mix.write_contains_of_structure_for_copy_lean.write_contains_of_structure_for_copy_compact_elements.write_contains_of_structure_for_copy_compact_double_elements.write_contains_of_structure_for_copy_compact_mix_elements
write_contains_of_structure_for_lean	AutoMakeIO.rb	/^def write_contains_of_structure_for_lean(current_read_file,current_output_file)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_compact_double.write_contains_of_structure_for_compact_mix
write_definition_of_structure	AutoMakeIO.rb	/^def write_definition_of_structure(structure_name,current_read_file,current_output_file,type)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_compact_double.write_contains_of_structure_for_compact_mix.write_contains_of_structure_for_lean
write_definition_of_structure	AutoMakeIOStructures.rb	/^def write_definition_of_structure(structure_name,current_read_file,current_output_file,type)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact
write_function_for_copy	AutoMakeIO.rb	/^def write_function_for_copy(function_name,source_structure_name,current_read_file,current_output_file,type)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_compact_double.write_contains_of_structure_for_compact_mix.write_contains_of_structure_for_lean.write_contains_of_structure_for_copy.read_contains_of_structure_from_copy.read_contains_of_structure_from_copy_lean.write_contains_of_structure_for_copy_compact.write_contains_of_structure_for_copy_compact_double.write_contains_of_structure_for_copy_compact_mix.write_contains_of_structure_for_copy_lean.write_contains_of_structure_for_copy_compact_elements.write_contains_of_structure_for_copy_compact_double_elements.write_contains_of_structure_for_copy_compact_mix_elements.write_contains_of_structure_for_copy_lean_elements.read_contains_of_structure_from_copy_compact
write_function_for_copy	AutoMakeIOStructures.rb	/^def write_function_for_copy(function_name,source_structure_name,current_read_file,current_output_file,type)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_copy.read_contains_of_structure_from_copy.write_contains_of_structure_for_copy_compact.read_contains_of_structure_from_copy_compact
write_function_for_copy_elements	AutoMakeIO.rb	/^def write_function_for_copy_elements(function_name,variable,source_structure_name,current_read_file,current_output_file,type)$/;"	f	class:write_contains_of_structure.write_contains_of_structure_for_compact.write_contains_of_structure_for_compact_double.write_contains_of_structure_for_compact_mix.write_contains_of_structure_for_lean.write_contains_of_structure_for_copy.read_contains_of_structure_from_copy.read_contains_of_structure_from_copy_lean.write_contains_of_structure_for_copy_compact.write_contains_of_structure_for_copy_compact_double.write_contains_of_structure_for_copy_compact_mix.write_contains_of_structure_for_copy_lean.write_contains_of_structure_for_copy_compact_elements.write_contains_of_structure_for_copy_compact_double_elements.write_contains_of_structure_for_copy_compact_mix_elements.write_contains_of_structure_for_copy_lean_elements.read_contains_of_structure_from_copy_compact
x	ParticleSplitting.c	/^double x[] = {-1, 1,-1, 1,-1, 1,-1, 1};$/;"	v
x	ParticleSplitting.c	/^double x[] = {0,-1, 1,-1, 1,-1, 1,-1, 1};$/;"	v
x	ParticleSplitting.c	/^double x[] = {0.0, 1.0, 0.5, -0.5, -1.0, -0.5, 0.5, -0.5, 0.5, 1.76763e-16, -0.5, 0.5, 1.76763e-16};$/;"	v
y	ParticleSplitting.c	/^double y[] = {-1,-1, 1, 1,-1,-1, 1, 1};$/;"	v
y	ParticleSplitting.c	/^double y[] = {0,-1,-1, 1, 1,-1,-1, 1, 1};$/;"	v
y	ParticleSplitting.c	/^double y[] = {0.0, 0.0, 0.866025, 0.866025, 1.22465e-16, -0.866025, -0.866025, -0.288675, -0.288675, 0.57735, -0.288675, -0.288675, 0.57735};$/;"	v
z	ParticleSplitting.c	/^double z[] = {-1,-1,-1,-1, 1, 1, 1, 1};$/;"	v
z	ParticleSplitting.c	/^double z[] = {0,-1,-1,-1,-1, 1, 1, 1, 1};$/;"	v
z	ParticleSplitting.c	/^double z[] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.816497, 0.816497, 0.816497, -0.816497, -0.816497, -0.816497};$/;"	v
z_in	SetUpTestRun.c	/^    float z_in;$/;"	m	struct:StructHeader	file:
zdprint	Astro.h	37;"	d
zdprintl	Astro.h	48;"	d
zdprintlmpi	MPIParameters.h	46;"	d
