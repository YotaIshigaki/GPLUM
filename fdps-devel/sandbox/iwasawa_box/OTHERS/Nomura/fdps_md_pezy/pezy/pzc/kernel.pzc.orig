#include<pzc_builtin.h>
#include"../class_device.hpp"

void pzc_ForceKernel(const int * j_disp,
                     const EpiDev * epi,
                     const EpjDev * epj,
                     ForceDev * force,
                     const int n_total){
  const float cut_off2 = 4.5f*4.5f;
  const int tid = get_tid();
  const int pid = get_pid();
  const int index_offset = pid * get_maxtid() + tid;
  const int index_base = get_maxtid()*get_maxpid();

  for(int index=index_offset; index<n_total; index += index_base){
    ForceDev f;
    f.ax = f.ay = f.az = f.pot = 0.0;
    const EpiDev ip = epi[index];
    const int id_walk = ip.id_walk;
    const int j_head = j_disp[id_walk];
    const int j_tail = j_disp[id_walk+1];
    for(int j=j_head; j<j_tail; j++){
      const EpjDev jp = epj[j];
      const float dx = ip.px - jp.px;
      const float dy = ip.py - jp.py;
      const float dz = ip.pz - jp.pz;
      const float r2 = (dx*dx + dy*dy) + dz*dz;

      if(r2 <= cut_off2 && r2!=0.0){
	const float r2_inv = 1.f / r2;
	const float r6_inv  = r2_inv*r2_inv*r2_inv;
	const float r12_inv = r6_inv*r6_inv;
	f.pot += 4.0f*(r12_inv - r6_inv);
	const float dphi = (48.f*r12_inv - 24.f*r6_inv)*r2_inv;
	f.ax  += dphi * dx;
	f.ay  += dphi * dy;
	f.az  += dphi * dz;
      }
    }
    force[index] = f;
  }
  flush();
}
