%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.41.0 (http://poppler.freedesktop.org)
%%Creator: matplotlib version 2.1.2, http://matplotlib.org/
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 461 345
%%HiResBoundingBox: 0 0 461 345
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%BeginResource: font T3_10_0
8 dict begin
/FontType 3 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox [-1021 -463 1793 1232] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 9 dict def
CharProcs begin
/y {
592 0 30 -207 562 547 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
q
[3.44785 0 0 3.44785 0 0] cm
9339.15 -1450.18 m
8585.05 -3306.41 7859.96 -4553.56 7163.88 -5133.63 c
6467.79 -5713.7 5539.68 -6003.74 4379.54 -6003.74 c
2291.28 -6003.74 l
2291.28 -3828.47 l
3828.47 -3828.47 l
4524.56 -3828.47 5075.62 -3654.45 5481.67 -3306.41 c
5887.72 -2958.36 6322.78 -2175.27 6815.84 -899.11 c
7279.89 261.032 l
870.107 15864.9 l
3625.44 15864.9 l
8585.05 3451.42 l
13544.7 15864.9 l
16300 15864.9 l
9339.15 -1450.18 l
f*
Q
Q
} def
/x {
592 0 29 0 559 547 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
q
[3.42945 0 0 3.42945 0 0] cm
16008.4 15950.1 m
10234.9 8193.74 l
16300 0 l
13209.1 0 l
8572.81 6269.23 l
3936.49 0 l
845.617 0 l
7027.37 8339.53 l
1370.48 15950.1 l
4461.36 15950.1 l
8689.45 10264 l
12917.5 15950.1 l
16008.4 15950.1 l
f*
Q
Q
} def
/one {
636 0 110 0 544 729 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
q
[4.47239 0 0 4.47239 0 0] cm
2772.57 1855.83 m
6372.43 1855.83 l
6372.43 14287.7 l
2459.53 13505.1 l
2459.53 15517.4 l
6350.07 16300 l
8563.65 16300 l
8563.65 1855.83 l
12163.5 1855.83 l
12163.5 0 l
2772.57 0 l
2772.57 1855.83 l
f*
Q
Q
} def
/eight {
636 0 68 -13 568 742 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
q
[4.55215 0 0 4.55215 0 0] cm
6985.71 7600.81 m
5953.23 7600.81 5140.43 7315.23 4547.3 6766.04 c
3954.18 6216.85 3668.6 5469.95 3668.6 4503.37 c
3668.6 3536.79 3954.18 2767.92 4547.3 2218.73 c
5140.43 1669.54 5953.23 1405.93 6985.71 1405.93 c
7996.23 1405.93 8809.03 1669.54 9402.16 2240.7 c
9995.28 2789.89 10302.8 3536.79 10302.8 4503.37 c
10302.8 5469.95 9995.28 6216.85 9424.12 6766.04 c
8831 7315.23 8018.19 7600.81 6985.71 7600.81 c
4810.92 8523.45 m
3888.27 8743.13 3163.34 9182.48 2636.12 9819.54 c
2108.89 10456.6 1867.25 11225.5 1867.25 12148.1 c
1867.25 13422.2 2306.6 14432.7 3229.25 15179.6 c
4129.92 15926.5 5382.08 16300 6985.71 16300 c
8567.39 16300 9819.54 15926.5 10742.2 15179.6 c
11642.9 14432.7 12104.2 13422.2 12104.2 12148.1 c
12104.2 11225.5 11840.6 10456.6 11313.3 9819.54 c
10786.1 9182.48 10083.2 8743.13 9160.51 8523.45 c
10193 8281.81 11005.8 7798.52 11598.9 7095.55 c
12170.1 6392.59 12477.6 5513.88 12477.6 4503.37 c
12477.6 2943.67 11994.3 1757.41 11049.7 944.609 c
10083.2 109.838 8743.13 -285.58 6985.71 -285.58 c
5206.33 -285.58 3844.34 109.838 2899.73 944.609 c
1955.12 1757.41 1493.8 2943.67 1493.8 4503.37 c
1493.8 5513.88 1779.38 6392.59 2372.51 7095.55 c
2943.67 7798.52 3756.47 8281.81 4810.92 8523.45 c
4020.08 11950.4 m
4020.08 11115.6 4261.72 10456.6 4788.95 9995.28 c
5316.17 9533.96 6041.1 9314.29 6985.71 9314.29 c
7908.36 9314.29 8633.29 9533.96 9160.51 9995.28 c
9687.74 10456.6 9951.35 11115.6 9951.35 11950.4 c
9951.35 12785.2 9687.74 13422.2 9160.51 13883.6 c
8633.29 14344.9 7908.36 14586.5 6985.71 14586.5 c
6041.1 14586.5 5316.17 14344.9 4788.95 13883.6 c
4261.72 13422.2 4020.08 12785.2 4020.08 11950.4 c
f*
Q
Q
} def
/six {
636 0 70 -13 573 742 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
q
[4.55215 0 0 4.55215 0 0] cm
7249.33 8874.93 m
6282.75 8874.93 5513.88 8523.45 4942.72 7864.42 c
4371.56 7205.39 4085.98 6282.75 4085.98 5140.43 c
4085.98 3976.15 4371.56 3053.5 4942.72 2394.47 c
5513.88 1735.44 6282.75 1405.93 7249.33 1405.93 c
8215.9 1405.93 8984.77 1735.44 9555.93 2394.47 c
10127.1 3053.5 10412.7 3976.15 10412.7 5140.43 c
10412.7 6282.75 10127.1 7205.39 9555.93 7864.42 c
8984.77 8523.45 8215.9 8874.93 7249.33 8874.93 c
11555 15662.9 m
11555 13685.8 l
11005.8 13949.5 10456.6 14147.2 9907.41 14279 c
9336.25 14410.8 8787.06 14476.7 8259.84 14476.7 c
6809.97 14476.7 5711.59 13993.4 4964.69 13026.8 c
4217.79 12060.2 3778.44 10588.4 3690.57 8655.26 c
4107.95 9270.35 4635.18 9753.64 5272.24 10083.2 c
5909.3 10412.7 6612.26 10588.4 7381.13 10588.4 c
8984.77 10588.4 10258.9 10083.2 11181.5 9116.58 c
12104.2 8150 12587.5 6809.97 12587.5 5140.43 c
12587.5 3492.86 12082.2 2174.8 11115.6 1186.25 c
10149.1 197.709 8852.96 -285.58 7249.33 -285.58 c
5404.04 -285.58 3976.15 417.385 3009.57 1823.32 c
2021.02 3229.25 1537.74 5294.2 1537.74 7996.23 c
1537.74 10522.5 2130.86 12543.5 3339.08 14037.3 c
4525.34 15531.1 6150.94 16300 8171.97 16300 c
8699.19 16300 9248.38 16234.1 9819.54 16146.2 c
10368.7 16036.4 10939.9 15882.6 11555 15662.9 c
f*
Q
Q
} def
/four {
636 0 49 0 580 729 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
q
[4.47239 0 0 4.47239 0 0] cm
8451.85 14377.1 m
2884.36 5679.29 l
8451.85 5679.29 l
8451.85 14377.1 l
7870.51 16300 m
10643.1 16300 l
10643.1 5679.29 l
12968.5 5679.29 l
12968.5 3845.82 l
10643.1 3845.82 l
10643.1 0 l
8451.85 0 l
8451.85 3845.82 l
1095.61 3845.82 l
1095.61 5969.96 l
7870.51 16300 l
f*
Q
Q
} def
/two {
636 0 73 0 536 742 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
q
[4.55215 0 0 4.55215 0 0] cm
4217.79 1823.32 m
11774.7 1823.32 l
11774.7 0 l
1603.64 0 l
1603.64 1823.32 l
2416.44 2658.09 3536.79 3800.4 4964.69 5250.27 c
6370.62 6678.17 7271.29 7600.81 7644.74 8018.19 c
8347.71 8787.06 8831 9446.09 9094.61 9995.28 c
9358.22 10522.5 9511.99 11071.7 9511.99 11598.9 c
9511.99 12433.7 9204.45 13136.7 8611.32 13663.9 c
8018.19 14191.1 7249.33 14476.7 6282.75 14476.7 c
5601.75 14476.7 4876.82 14344.9 4129.92 14125.2 c
3383.02 13883.6 2570.22 13532.1 1713.48 13048.8 c
1713.48 15245.6 l
2592.18 15597 3404.99 15860.6 4151.89 16036.4 c
4898.79 16212.1 5601.75 16300 6238.81 16300 c
7886.39 16300 9204.45 15882.6 10193 15047.8 c
11181.5 14213.1 11686.8 13114.7 11686.8 11730.7 c
11686.8 11071.7 11555 10434.6 11313.3 9863.48 c
11071.7 9270.35 10632.3 8567.39 9973.32 7776.55 c
9797.57 7556.87 9226.41 6963.75 8259.84 5975.2 c
7293.26 4986.66 5953.23 3602.7 4217.79 1823.32 c
f*
Q
Q
} def
/period {
318 0 107 0 210 124 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
q
[1.28834 0 0 1.28834 0 0] cm
8305.24 0 7994.76 9624.76 re
f*
Q
Q
} def
/zero {
636 0 66 -13 570 742 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
q
[4.55215 0 0 4.55215 0 0] cm
6985.71 14586.5 m
5865.36 14586.5 5030.59 14037.3 4459.43 12938.9 c
3888.27 11840.6 3624.66 10193 3624.66 7996.23 c
3624.66 5799.46 3888.27 4151.89 4459.43 3053.5 c
5030.59 1955.12 5865.36 1405.93 6985.71 1405.93 c
8106.06 1405.93 8940.84 1955.12 9511.99 3053.5 c
10061.2 4151.89 10346.8 5799.46 10346.8 7996.23 c
10346.8 10193 10061.2 11840.6 9511.99 12938.9 c
8940.84 14037.3 8106.06 14586.5 6985.71 14586.5 c
6985.71 16300 m
8765.09 16300 10127.1 15575.1 11093.7 14169.1 c
12038.3 12741.2 12521.6 10676.3 12521.6 7996.23 c
12521.6 5294.2 12038.3 3229.25 11093.7 1823.32 c
10127.1 417.385 8765.09 -285.58 6985.71 -285.58 c
5184.37 -285.58 3800.4 417.385 2855.8 1823.32 c
1911.19 3229.25 1449.87 5294.2 1449.87 7996.23 c
1449.87 10676.3 1911.19 12741.2 2855.8 14169.1 c
3800.4 15575.1 5184.37 16300 6985.71 16300 c
f*
Q
Q
} def
end
currentdict end
/T3_10_0 exch definefont pop
%%EndResource
/F10_0 /T3_10_0 1 1
[ /period/zero/one/two/four/six/eight/x
  /y/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /grave/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/bullet
  /Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
  /circumflex/perthousand/Scaron/guilsinglleft/OE/bullet/Zcaron/bullet
  /bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
  /tilde/trademark/scaron/guilsinglright/oe/bullet/zcaron/Ydieresis
  /space/exclamdown/cent/sterling/currency/yen/brokenbar/section
  /dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
  /degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
  /cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
  /Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
  /Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
  /Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
  /Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
  /agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
  /egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
  /eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
  /oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]
pdfMakeFont
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 461 345 re
W
q
q
[0.1 0 0 0.1 0 0] cm
q
6 2 4604 3448 re
W
/DeviceGray {} cs
[1] sc
6 2 4608 3456 re
f
1037.04 382.16 2661.12 2661.12 re
f
Q
q
1037 382.199 2661 2661 re
W
2 w
/DeviceGray {} CS
[0] SC
1037.04 -2025.52 m
1675.56 -2025.52 2288.02 -1771.83 2739.53 -1320.33 c
3191.03 -868.82 3444.72 -256.363 3444.72 382.16 c
3444.72 1020.68 3191.03 1633.14 2739.53 2084.65 c
2288.02 2536.15 1675.56 2789.84 1037.04 2789.84 c
398.516 2789.84 -213.941 2536.15 -665.445 2084.65 c
-1116.95 1633.14 -1370.64 1020.68 -1370.64 382.16 c
-1370.64 -256.363 -1116.95 -868.82 -665.445 -1320.33 c
-213.941 -1771.83 398.516 -2025.52 1037.04 -2025.52 c
h
S
1037.04 -2057.2 m
1683.96 -2057.2 2304.48 -1800.17 2761.93 -1342.73 c
3219.38 -885.281 3476.4 -264.766 3476.4 382.16 c
3476.4 1029.09 3219.38 1649.6 2761.93 2107.05 c
2304.48 2564.49 1683.96 2821.52 1037.04 2821.52 c
390.113 2821.52 -230.402 2564.49 -687.848 2107.05 c
-1145.29 1649.6 -1402.32 1029.09 -1402.32 382.16 c
-1402.32 -264.766 -1145.29 -885.281 -687.848 -1342.73 c
-230.402 -1800.17 390.113 -2057.2 1037.04 -2057.2 c
h
S
1037.04 -2088.88 m
1692.37 -2088.88 2320.94 -1828.52 2784.33 -1365.13 c
3247.71 -901.742 3508.08 -273.168 3508.08 382.16 c
3508.08 1037.49 3247.71 1666.06 2784.33 2129.45 c
2320.94 2592.84 1692.37 2853.2 1037.04 2853.2 c
381.711 2853.2 -246.863 2592.84 -710.25 2129.45 c
-1173.64 1666.06 -1434 1037.49 -1434 382.16 c
-1434 -273.168 -1173.64 -901.742 -710.25 -1365.13 c
-246.863 -1828.52 381.711 -2088.88 1037.04 -2088.88 c
h
S
1037.04 -2120.56 m
1700.77 -2120.56 2337.4 -1856.86 2806.73 -1387.53 c
3276.06 -918.203 3539.76 -281.57 3539.76 382.16 c
3539.76 1045.89 3276.06 1682.52 2806.73 2151.85 c
2337.4 2621.18 1700.77 2884.88 1037.04 2884.88 c
373.313 2884.88 -263.324 2621.18 -732.648 2151.85 c
-1201.98 1682.52 -1465.68 1045.89 -1465.68 382.16 c
-1465.68 -281.57 -1201.98 -918.203 -732.648 -1387.53 c
-263.324 -1856.86 373.313 -2120.56 1037.04 -2120.56 c
h
S
1037.04 -2152.24 m
1709.17 -2152.24 2353.86 -1885.2 2829.13 -1409.93 c
3304.4 -934.664 3571.44 -289.973 3571.44 382.16 c
3571.44 1054.29 3304.4 1698.98 2829.13 2174.25 c
2353.86 2649.52 1709.17 2916.56 1037.04 2916.56 c
364.91 2916.56 -279.781 2649.52 -755.051 2174.25 c
-1230.32 1698.98 -1497.36 1054.29 -1497.36 382.16 c
-1497.36 -289.973 -1230.32 -934.664 -755.051 -1409.93 c
-279.781 -1885.2 364.91 -2152.24 1037.04 -2152.24 c
h
S
1037.04 -2183.92 m
1717.57 -2183.92 2370.32 -1913.54 2851.53 -1432.33 c
3332.74 -951.125 3603.12 -298.371 3603.12 382.16 c
3603.12 1062.69 3332.74 1715.45 2851.53 2196.65 c
2370.32 2677.86 1717.57 2948.24 1037.04 2948.24 c
356.508 2948.24 -296.242 2677.86 -777.453 2196.65 c
-1258.66 1715.45 -1529.04 1062.69 -1529.04 382.16 c
-1529.04 -298.371 -1258.66 -951.125 -777.453 -1432.33 c
-296.242 -1913.54 356.508 -2183.92 1037.04 -2183.92 c
h
S
1037.04 -2215.6 m
1725.97 -2215.6 2386.79 -1941.88 2873.93 -1454.73 c
3361.08 -967.582 3634.8 -306.773 3634.8 382.16 c
3634.8 1071.09 3361.08 1731.9 2873.93 2219.05 c
2386.79 2706.2 1725.97 2979.92 1037.04 2979.92 c
348.105 2979.92 -312.703 2706.2 -799.855 2219.05 c
-1287 1731.9 -1560.72 1071.09 -1560.72 382.16 c
-1560.72 -306.773 -1287 -967.582 -799.855 -1454.73 c
-312.703 -1941.88 348.105 -2215.6 1037.04 -2215.6 c
h
S
1037.04 -2247.28 m
1734.38 -2247.28 2403.25 -1970.23 2896.34 -1477.13 c
3389.43 -984.043 3666.48 -315.176 3666.48 382.16 c
3666.48 1079.5 3389.43 1748.36 2896.34 2241.45 c
2403.25 2734.55 1734.38 3011.6 1037.04 3011.6 c
339.703 3011.6 -329.164 2734.55 -822.254 2241.45 c
-1315.34 1748.36 -1592.4 1079.5 -1592.4 382.16 c
-1592.4 -315.176 -1315.34 -984.043 -822.254 -1477.13 c
-329.164 -1970.23 339.703 -2247.28 1037.04 -2247.28 c
h
S
1037.04 -2278.96 m
1742.78 -2278.96 2419.7 -1998.57 2918.73 -1499.54 c
3417.77 -1000.5 3698.16 -323.578 3698.16 382.16 c
3698.16 1087.9 3417.77 1764.82 2918.73 2263.86 c
2419.7 2762.89 1742.78 3043.28 1037.04 3043.28 c
331.305 3043.28 -345.625 2762.89 -844.656 2263.86 c
-1343.69 1764.82 -1624.08 1087.9 -1624.08 382.16 c
-1624.08 -323.578 -1343.69 -1000.5 -844.656 -1499.54 c
-345.625 -1998.57 331.305 -2278.96 1037.04 -2278.96 c
h
S
20 w
1037.04 -2025.52 m
1675.56 -2025.52 2288.02 -1771.83 2739.53 -1320.33 c
3191.03 -868.82 3444.72 -256.363 3444.72 382.16 c
3444.72 1020.68 3191.03 1633.14 2739.53 2084.65 c
2288.02 2536.15 1675.56 2789.84 1037.04 2789.84 c
398.516 2789.84 -213.941 2536.15 -665.445 2084.65 c
-1116.95 1633.14 -1370.64 1020.68 -1370.64 382.16 c
-1370.64 -256.363 -1116.95 -868.82 -665.445 -1320.33 c
-213.941 -1771.83 398.516 -2025.52 1037.04 -2025.52 c
h
S
1037.04 -2278.96 m
1742.78 -2278.96 2419.7 -1998.57 2918.73 -1499.54 c
3417.77 -1000.5 3698.16 -323.578 3698.16 382.16 c
3698.16 1087.9 3417.77 1764.82 2918.73 2263.86 c
2419.7 2762.89 1742.78 3043.28 1037.04 3043.28 c
331.305 3043.28 -345.625 2762.89 -844.656 2263.86 c
-1343.69 1764.82 -1624.08 1087.9 -1624.08 382.16 c
-1624.08 -323.578 -1343.69 -1000.5 -844.656 -1499.54 c
-345.625 -1998.57 331.305 -2278.96 1037.04 -2278.96 c
h
S
Q
q
6 2 4604 3448 re
W
/DeviceGray {} cs
[0] sc
1037.04 382.16 m
1037.04 347.16 l
f
8 w
1 j
/DeviceGray {} CS
[0] SC
1037.04 382.16 m
1037.04 347.16 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 94.157 22.091] Tm
0 0 Td
/F10_0 12 Tf
(\001)
[7.632
0] Tj
-0.230408 TJm
(\000)
[3.816
0] Tj
0.129191 TJm
(\001)
[7.632
0] Tj
Q
1543.92 382.16 m
1543.92 347.16 l
f
1543.92 382.16 m
1543.92 347.16 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 144.845 22.091] Tm
0 0 Td
/F10_0 12 Tf
(\001)
[7.632
0] Tj
-0.230916 TJm
(\000)
[3.816
0] Tj
0.129191 TJm
(\003)
[7.632
0] Tj
Q
2050.8 382.16 m
2050.8 347.16 l
f
2050.8 382.16 m
2050.8 347.16 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 195.533 22.091] Tm
0 0 Td
/F10_0 12 Tf
(\001)
[7.632
0] Tj
-0.230916 TJm
(\000)
[3.816
0] Tj
0.128174 TJm
(\004)
[7.632
0] Tj
Q
2557.68 382.16 m
2557.68 347.16 l
f
2557.68 382.16 m
2557.68 347.16 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 246.221 22.091] Tm
0 0 Td
/F10_0 12 Tf
(\001)
[7.632
0] Tj
-0.229899 TJm
(\000)
[3.816
0] Tj
0.128174 TJm
(\005)
[7.632
0] Tj
Q
3064.56 382.16 m
3064.56 347.16 l
f
3064.56 382.16 m
3064.56 347.16 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 296.909 22.091] Tm
0 0 Td
/F10_0 12 Tf
(\001)
[7.632
0] Tj
-0.229899 TJm
(\000)
[3.816
0] Tj
0.128174 TJm
(\006)
[7.632
0] Tj
Q
3571.44 382.16 m
3571.44 347.16 l
f
3571.44 382.16 m
3571.44 347.16 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 347.597 22.091] Tm
0 0 Td
/F10_0 12 Tf
(\002)
[7.632
0] Tj
-0.229899 TJm
(\000)
[3.816
0] Tj
0.128174 TJm
(\001)
[7.632
0] Tj
-114.392 -15.625 Td
(\007)
[7.104
0] Tj
Q
1037.04 382.16 m
1002.04 382.16 l
f
1037.04 382.16 m
1002.04 382.16 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 77.6102 33.6535] Tm
0 0 Td
/F10_0 12 Tf
(\001)
[7.632
0] Tj
-0.230408 TJm
(\000)
[3.816
0] Tj
0.128682 TJm
(\001)
[7.632
0] Tj
Q
1037.04 889.039 m
1002.04 889.039 l
f
1037.04 889.039 m
1002.04 889.039 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 77.6102 84.3414] Tm
0 0 Td
/F10_0 12 Tf
(\001)
[7.632
0] Tj
-0.230408 TJm
(\000)
[3.816
0] Tj
0.128682 TJm
(\003)
[7.632
0] Tj
Q
1037.04 1395.92 m
1002.04 1395.92 l
f
1037.04 1395.92 m
1002.04 1395.92 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 77.6102 135.03] Tm
0 0 Td
/F10_0 12 Tf
(\001)
[7.632
0] Tj
-0.230408 TJm
(\000)
[3.816
0] Tj
0.128682 TJm
(\004)
[7.632
0] Tj
Q
1037.04 1902.8 m
1002.04 1902.8 l
f
1037.04 1902.8 m
1002.04 1902.8 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 77.6102 185.718] Tm
0 0 Td
/F10_0 12 Tf
(\001)
[7.632
0] Tj
-0.230408 TJm
(\000)
[3.816
0] Tj
0.128682 TJm
(\005)
[7.632
0] Tj
Q
1037.04 2409.68 m
1002.04 2409.68 l
f
1037.04 2409.68 m
1002.04 2409.68 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 77.6102 236.405] Tm
0 0 Td
/F10_0 12 Tf
(\001)
[7.632
0] Tj
-0.230408 TJm
(\000)
[3.816
0] Tj
0.128682 TJm
(\006)
[7.632
0] Tj
Q
1037.04 2916.56 m
1002.04 2916.56 l
f
1037.04 2916.56 m
1002.04 2916.56 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 77.6102 287.093] Tm
0 0 Td
/F10_0 12 Tf
(\002)
[7.632
0] Tj
-0.230408 TJm
(\000)
[3.816
0] Tj
0.128682 TJm
(\001)
[7.632
0] Tj
[0 1 -1 0 71.1102 167.717] Tm
0 0 Td
/F10_0 12 Tf
(\010)
[7.104
0] Tj
Q
Q
q
1037 382.199 2661 2661 re
W
20 w
2 J
1 j
/DeviceGray {} CS
[0] SC
3444.72 382.16 m
3698.16 382.16 l
S
3444 441.246 m
3697.36 447.469 l
S
3441.82 500.301 m
3694.95 512.734 l
S
3438.2 559.281 m
3690.95 577.926 l
S
3433.13 618.152 m
3685.35 642.996 l
S
3426.61 676.887 m
3678.15 707.91 l
S
3418.66 735.441 m
3669.36 772.629 l
S
3409.27 793.781 m
3658.98 837.109 l
S
3398.46 851.875 m
3647.03 901.32 l
S
3386.22 909.688 m
3633.5 965.215 l
S
3372.57 967.18 m
3618.41 1028.76 l
S
3357.5 1024.32 m
3601.77 1091.91 l
S
3341.05 1081.07 m
3583.57 1154.64 l
S
3323.2 1137.41 m
3563.85 1216.91 l
S
3303.98 1193.28 m
3542.6 1278.66 l
S
3283.39 1248.67 m
3519.85 1339.88 l
S
3261.45 1303.54 m
3495.59 1400.53 l
S
3238.16 1357.85 m
3469.86 1460.55 l
S
3213.56 1411.57 m
3442.66 1519.94 l
S
3187.64 1464.68 m
3414.02 1578.63 l
S
3160.43 1517.13 m
3383.94 1636.6 l
S
3131.93 1568.9 m
3352.45 1693.82 l
S
3102.18 1619.95 m
3319.56 1750.25 l
S
3071.18 1670.26 m
3285.3 1805.85 l
S
3038.95 1719.8 m
3249.68 1860.6 l
S
3005.52 1768.52 m
3212.73 1914.45 l
S
2970.91 1816.41 m
3174.47 1967.39 l
S
2935.13 1863.44 m
3134.93 2019.36 l
S
2898.2 1909.57 m
3094.11 2070.36 l
S
2860.16 1954.79 m
3052.06 2120.33 l
S
2821.01 1999.06 m
3008.8 2169.26 l
S
2780.8 2042.35 m
2964.35 2217.11 l
S
2739.53 2084.65 m
2918.73 2263.86 l
S
2697.23 2125.91 m
2871.99 2309.47 l
S
2653.94 2166.13 m
2824.14 2353.92 l
S
2609.67 2205.28 m
2775.21 2397.18 l
S
2564.46 2243.32 m
2725.24 2439.23 l
S
2518.32 2280.25 m
2674.25 2480.04 l
S
2471.29 2316.03 m
2622.27 2519.59 l
S
2423.4 2350.64 m
2569.34 2557.85 l
S
2374.68 2384.07 m
2515.48 2594.8 l
S
2325.14 2416.3 m
2460.73 2630.42 l
S
2274.84 2447.3 m
2405.13 2664.68 l
S
2223.78 2477.05 m
2348.7 2697.57 l
S
2172.01 2505.54 m
2291.48 2729.06 l
S
2119.56 2532.76 m
2233.51 2759.14 l
S
2066.46 2558.68 m
2174.82 2787.79 l
S
2012.73 2583.29 m
2115.44 2814.98 l
S
1958.42 2606.57 m
2055.41 2840.71 l
S
1903.55 2628.51 m
1994.77 2864.96 l
S
1848.16 2649.1 m
1933.54 2887.72 l
S
1792.29 2668.32 m
1871.79 2908.97 l
S
1735.95 2686.17 m
1809.52 2928.69 l
S
1679.2 2702.63 m
1746.79 2946.88 l
S
1622.06 2717.68 m
1683.64 2963.53 l
S
1564.57 2731.34 m
1620.09 2978.62 l
S
1506.75 2743.58 m
1556.2 2992.15 l
S
1448.66 2754.39 m
1491.99 3004.1 l
S
1390.32 2763.78 m
1427.51 3014.48 l
S
1331.77 2771.73 m
1362.79 3023.27 l
S
1273.04 2778.25 m
1297.88 3030.46 l
S
1214.16 2783.32 m
1232.8 3036.07 l
S
1155.18 2786.94 m
1167.61 3040.07 l
S
1096.13 2789.11 m
1102.35 3042.48 l
S
1037.04 2789.84 m
1037.04 3043.28 l
S
Q
q
6 2 4604 3448 re
W
8 w
2 J
/DeviceGray {} CS
[0] SC
1037.04 382.16 m
1037.04 3043.28 l
S
3698.16 382.16 m
3698.16 3043.28 l
S
1037.04 382.16 m
3698.16 382.16 l
S
1037.04 3043.28 m
3698.16 3043.28 l
S
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%+ font T3_10_0
%%EOF
