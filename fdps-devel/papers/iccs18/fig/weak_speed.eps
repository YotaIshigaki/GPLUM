%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.26.5 (http://poppler.freedesktop.org)
%%Creator: gnuplot 4.6 patchlevel 3
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 360 252
%%HiResBoundingBox: 0 0 360 252
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
/F8_0 /Helvetica 1 1
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /quoteleft/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/exclamdown/cent/sterling/fraction/yen/florin/section
  /currency/quotesingle/quotedblleft/guillemotleft/guilsinglleft/guilsinglright/fi/fl
  /.notdef/endash/dagger/daggerdbl/periodcentered/.notdef/paragraph/bullet
  /quotesinglbase/quotedblbase/quotedblright/guillemotright/ellipsis/perthousand/.notdef/questiondown
  /.notdef/grave/acute/circumflex/tilde/macron/breve/dotaccent
  /dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut/ogonek/caron
  /emdash/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/AE/.notdef/ordfeminine/.notdef/.notdef/.notdef/.notdef
  /Lslash/Oslash/OE/ordmasculine/.notdef/.notdef/.notdef/.notdef
  /.notdef/ae/.notdef/.notdef/.notdef/dotlessi/.notdef/.notdef
  /lslash/oslash/oe/germandbls/.notdef/.notdef/.notdef/.notdef]
pdfMakeFont
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 360 252 re
W
q
q
[0.1 0 0 0.1 0 0] cm
5 w
3.8 M
/DeviceRGB {} CS
[0 0 0] SC
462.5 400 m
478 400 l
3374.5 400 m
3359 400 l
462.5 544.5 m
478 544.5 l
3374.5 544.5 m
3359 544.5 l
462.5 647 m
478 647 l
3374.5 647 m
3359 647 l
462.5 727 m
478 727 l
3374.5 727 m
3359 727 l
462.5 792 m
478 792 l
3374.5 792 m
3359 792 l
462.5 847 m
478 847 l
3374.5 847 m
3359 847 l
462.5 894.5 m
478 894.5 l
3374.5 894.5 m
3359 894.5 l
462.5 936.5 m
478 936.5 l
3374.5 936.5 m
3359 936.5 l
S
[5 10] 0 d
1.25 w
462.5 974 m
3374.5 974 l
S
[] 0 d
5 w
462.5 974 m
494 974 l
3374.5 974 m
3343 974 l
S
/DeviceRGB {} cs
[0 0 0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 19.2902 91.9852] Tm
0 0 Td
/F8_0 12.5 Tf
(10)
[6.95
0
6.95
0] Tj
13.9 6.25 Td
/F8_0 10 Tf
(2)
[5.56
0] Tj
Q
462.5 1221.5 m
478 1221.5 l
3374.5 1221.5 m
3359 1221.5 l
462.5 1366 m
478 1366 l
3374.5 1366 m
3359 1366 l
462.5 1468.5 m
478 1468.5 l
3374.5 1468.5 m
3359 1468.5 l
462.5 1548 m
478 1548 l
3374.5 1548 m
3359 1548 l
462.5 1613 m
478 1613 l
3374.5 1613 m
3359 1613 l
462.5 1668 m
478 1668 l
3374.5 1668 m
3359 1668 l
462.5 1716 m
478 1716 l
3374.5 1716 m
3359 1716 l
462.5 1758 m
478 1758 l
3374.5 1758 m
3359 1758 l
S
[5 10] 0 d
1.25 w
462.5 1795.5 m
3374.5 1795.5 l
S
[] 0 d
5 w
462.5 1795.5 m
494 1795.5 l
3374.5 1795.5 m
3343 1795.5 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 19.2902 174.135] Tm
0 0 Td
/F8_0 12.5 Tf
(10)
[6.95
0
6.95
0] Tj
13.9 6.25 Td
/F8_0 10 Tf
(3)
[5.56
0] Tj
Q
462.5 2042.5 m
478 2042.5 l
3374.5 2042.5 m
3359 2042.5 l
462.5 2187.5 m
478 2187.5 l
3374.5 2187.5 m
3359 2187.5 l
462.5 2290 m
478 2290 l
3374.5 2290 m
3359 2290 l
462.5 2369.5 m
478 2369.5 l
3374.5 2369.5 m
3359 2369.5 l
S
[5 10] 0 d
1.25 w
462.5 400 m
462.5 2369.5 l
S
[] 0 d
5 w
462.5 400 m
462.5 431.5 l
462.5 2369.5 m
462.5 2338 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 36.5203 22.0852] Tm
0 0 Td
/F8_0 12.5 Tf
(10)
[6.95
0
6.95
0] Tj
13.9 6.25 Td
/F8_0 10 Tf
(2)
[5.56
0] Tj
Q
843.5 400 m
843.5 415.5 l
843.5 2369.5 m
843.5 2354 l
1066.5 400 m
1066.5 415.5 l
1066.5 2369.5 m
1066.5 2354 l
1224.5 400 m
1224.5 415.5 l
1224.5 2369.5 m
1224.5 2354 l
1347 400 m
1347 415.5 l
1347 2369.5 m
1347 2354 l
1447.5 400 m
1447.5 415.5 l
1447.5 2369.5 m
1447.5 2354 l
1532 400 m
1532 415.5 l
1532 2369.5 m
1532 2354 l
1605.5 400 m
1605.5 415.5 l
1605.5 2369.5 m
1605.5 2354 l
1670 400 m
1670 415.5 l
1670 2369.5 m
1670 2354 l
S
[5 10] 0 d
1.25 w
1728 400 m
1728 2088 l
1728 2338 m
1728 2369.5 l
S
[] 0 d
5 w
1728 400 m
1728 431.5 l
1728 2369.5 m
1728 2338 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 163.07 22.0852] Tm
0 0 Td
/F8_0 12.5 Tf
(10)
[6.95
0
6.95
0] Tj
13.9 6.25 Td
/F8_0 10 Tf
(3)
[5.56
0] Tj
Q
2109 400 m
2109 415.5 l
2109 2369.5 m
2109 2354 l
2332 400 m
2332 415.5 l
2332 2369.5 m
2332 2354 l
2490 400 m
2490 415.5 l
2490 2369.5 m
2490 2354 l
2612.5 400 m
2612.5 415.5 l
2612.5 2369.5 m
2612.5 2354 l
2713 400 m
2713 415.5 l
2713 2369.5 m
2713 2354 l
2797.5 400 m
2797.5 415.5 l
2797.5 2369.5 m
2797.5 2354 l
2871 400 m
2871 415.5 l
2871 2369.5 m
2871 2354 l
2935.5 400 m
2935.5 415.5 l
2935.5 2369.5 m
2935.5 2354 l
S
[5 10] 0 d
1.25 w
2993.5 400 m
2993.5 2369.5 l
S
[] 0 d
5 w
2993.5 400 m
2993.5 431.5 l
2993.5 2369.5 m
2993.5 2338 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 289.62 22.0852] Tm
0 0 Td
/F8_0 12.5 Tf
(10)
[6.95
0
6.95
0] Tj
13.9 6.25 Td
/F8_0 10 Tf
(4)
[5.56
0] Tj
Q
3374.5 400 m
3374.5 415.5 l
3374.5 2369.5 m
3374.5 2354 l
S
462.5 400 2912 1969.5 re
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[0 1 -1 0 14.1648 82.875] Tm
0 0 Td
/F8_0 12.5 Tf
(performance[Tflops])
[6.95
0
6.95
0
4.1625
0
3.475
0
6.95
0
4.1625
0
10.4125
0
6.95
0
6.95
0
6.25
0
6.95
0
3.475
0
7.6375
0
3.475
0
2.775
0
6.95
0
6.95
0
6.25
0
3.475
0] Tj
[1 0 0 1 151.206 4.58516] Tm
0 0 Td
/F8_0 12.5 Tf
(# of processes)
[6.95
0
3.475
0
6.95
0
3.475
0
3.475
0
6.95
0
4.1625
0
6.95
0
6.25
0
6.95
0
6.25
0
6.25
0
6.95
0
6.25
0] Tj
-91.3688 218.8 Td
(measurement)
[10.4125
0
6.95
0
6.95
0
6.25
0
6.95
0
4.1625
0
6.95
0
10.4125
0
6.95
0
6.95
0
3.475
0] Tj
Q
10 w
645.25 600 m
645.25 626.094 624.094 647.25 598 647.25 c
571.906 647.25 550.75 626.094 550.75 600 c
550.75 573.906 571.906 552.75 598 552.75 c
624.094 552.75 645.25 573.906 645.25 600 c
S
1 J
598 600 m
598 600 l
S
0 J
1026.25 909 m
1026.25 935.094 1005.09 956.25 979 956.25 c
952.906 956.25 931.75 935.094 931.75 909 c
931.75 882.906 952.906 861.75 979 861.75 c
1005.09 861.75 1026.25 882.906 1026.25 909 c
S
1 J
979 909 m
979 909 l
S
0 J
1407.25 1073.5 m
1407.25 1099.59 1386.09 1120.75 1360 1120.75 c
1333.91 1120.75 1312.75 1099.59 1312.75 1073.5 c
1312.75 1047.41 1333.91 1026.25 1360 1026.25 c
1386.09 1026.25 1407.25 1047.41 1407.25 1073.5 c
S
1 J
1360 1073.5 m
1360 1073.5 l
S
0 J
1788.25 1389.5 m
1788.25 1415.59 1767.09 1436.75 1741 1436.75 c
1714.91 1436.75 1693.75 1415.59 1693.75 1389.5 c
1693.75 1363.41 1714.91 1342.25 1741 1342.25 c
1767.09 1342.25 1788.25 1363.41 1788.25 1389.5 c
S
1 J
1741 1389.5 m
1741 1389.5 l
S
0 J
2169.25 1566.5 m
2169.25 1592.59 2148.09 1613.75 2122 1613.75 c
2095.91 1613.75 2074.75 1592.59 2074.75 1566.5 c
2074.75 1540.41 2095.91 1519.25 2122 1519.25 c
2148.09 1519.25 2169.25 1540.41 2169.25 1566.5 c
S
1 J
2122 1566.5 m
2122 1566.5 l
S
0 J
2550.25 1876.5 m
2550.25 1902.59 2529.09 1923.75 2503 1923.75 c
2476.91 1923.75 2455.75 1902.59 2455.75 1876.5 c
2455.75 1850.41 2476.91 1829.25 2503 1829.25 c
2529.09 1829.25 2550.25 1850.41 2550.25 1876.5 c
S
1 J
2503 1876.5 m
2503 1876.5 l
S
0 J
2931.25 2074.5 m
2931.25 2100.59 2910.09 2121.75 2884 2121.75 c
2857.91 2121.75 2836.75 2100.59 2836.75 2074.5 c
2836.75 2048.41 2857.91 2027.25 2884 2027.25 c
2910.09 2027.25 2931.25 2048.41 2931.25 2074.5 c
S
1 J
2884 2074.5 m
2884 2074.5 l
S
0 J
3312.25 2274.5 m
3312.25 2300.59 3291.09 2321.75 3265 2321.75 c
3238.91 2321.75 3217.75 2300.59 3217.75 2274.5 c
3217.75 2248.41 3238.91 2227.25 3265 2227.25 c
3291.09 2227.25 3312.25 2248.41 3312.25 2274.5 c
S
1 J
3265 2274.5 m
3265 2274.5 l
S
0 J
1650.25 2275.5 m
1650.25 2301.59 1629.09 2322.75 1603 2322.75 c
1576.91 2322.75 1555.75 2301.59 1555.75 2275.5 c
1555.75 2249.41 1576.91 2228.25 1603 2228.25 c
1629.09 2228.25 1650.25 2249.41 1650.25 2275.5 c
S
1 J
1603 2275.5 m
1603 2275.5 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 77.8875 210.885] Tm
0 0 Td
/F8_0 12.5 Tf
(35% of TP)
[6.95
0
6.95
0
11.1125
0
3.475
0
6.95
0
3.475
0
3.475
0
7.6375
0
8.3375
0] Tj
Q
[20 10] 0 d
0 J
1437.5 2150.5 m
1769 2150.5 l
462.5 499 m
492 518 l
521.5 537 l
550.5 556 l
580 575.5 l
609.5 594.5 l
639 613.5 l
668.5 632.5 l
698 651.5 l
727 670.5 l
756.5 690 l
786 709 l
815.5 728 l
845 747 l
874.5 766 l
903.5 785 l
933 804.5 l
962.5 823.5 l
992 842.5 l
1021.5 861.5 l
1051 880.5 l
1080 900 l
1109.5 919 l
1139 938 l
1168.5 957 l
1198 976 l
1227.5 995 l
1256.5 1014.5 l
1286 1033.5 l
1315.5 1052.5 l
1345 1071.5 l
1374.5 1090.5 l
1404 1110 l
1433 1129 l
1462.5 1148 l
1492 1167 l
1521.5 1186 l
1551 1205 l
1580 1224.5 l
1609.5 1243.5 l
1639 1262.5 l
1668.5 1281.5 l
1698 1300.5 l
1727.5 1320 l
1756.5 1339 l
1786 1358 l
1815.5 1377 l
1845 1396 l
1874.5 1415 l
1904 1434.5 l
1933 1453.5 l
1962.5 1472.5 l
1992 1491.5 l
2021.5 1510.5 l
2051 1530 l
2080.5 1549 l
2109.5 1568 l
2139 1587 l
2168.5 1606 l
2198 1625 l
2227.5 1644.5 l
2257 1663.5 l
2286 1682.5 l
2315.5 1701.5 l
2345 1720.5 l
2374.5 1739.5 l
2404 1759 l
2433 1778 l
2462.5 1797 l
2492 1816 l
2521.5 1835 l
2551 1854.5 l
2580.5 1873.5 l
2609.5 1892.5 l
2639 1911.5 l
2668.5 1930.5 l
2698 1949.5 l
2727.5 1969 l
2757 1988 l
2786 2007 l
2815.5 2026 l
2845 2045 l
2874.5 2064.5 l
2904 2083.5 l
2933.5 2102.5 l
2962.5 2121.5 l
2992 2140.5 l
3021.5 2159.5 l
3051 2179 l
3080.5 2198 l
3110 2217 l
3139 2236 l
3168.5 2255 l
3198 2274.5 l
3227.5 2293.5 l
3257 2312.5 l
3286.5 2331.5 l
3315.5 2350.5 l
3345 2369.5 l
S
[] 0 d
5 w
462.5 400 2912 1969.5 re
S
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
