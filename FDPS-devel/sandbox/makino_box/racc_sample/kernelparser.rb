#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.16
# from Racc grammar file "".
#

require 'racc/parser.rb'
class KernelParser < Racc::Parser

module_eval(<<'...end kernelparser.y/module_eval...', 'kernelparser.y', 44)
require 'ripper'

def vartype(string)
  [[:F64VEC,:F64,:F32VEC,:F32,:I64, :I32][["f64vec","f64","f32vec","f32","i64","i32"].index(string)],string]
end
def iotype(string)
  [[:IIN,:JIN,:IOUT][["iin","jin","iout"].index(string)], string]
end
def nstype(string)
  [[:EPINAME, :EPJNAME, :FNAME][["epi","epj","fi"].index(string)], string]
end

def parse(program)
  @q=[]
  program.each_line{|str|
    #    p str
    a=Ripper.tokenize(str.chomp).select{|s| s=~/\S+/}
    #   p a
    if a[0] =~ /(iin|jin|iout)/
      #      print "vardecl\n"		    
      io=a[0]

      type=a[1]
      varname=a[2]
      fdpsname=nil
      fdpsname=a[3] if a[3]		    
      @q <<iotype(io)
      @q << vartype(type)
      @q<< [:TEXT, varname]
      @q<< [:TEXT, fdpsname] if fdpsname
      @q << [:EOL,:EOL]
    end
    if a[0] =~ /(epi|epj|fi)/
#      print "iodecl\n"		    
      ns=a[0]
      nsname=a[1]
      @q <<nstype(ns)
      @q<< [:TEXT, nsname]
      @q << [:EOL,:EOL]
    end
    if a[1]=="=" ||a[2]=="="
#      print "statement \n"		    
      if a[2]=="="
        type=a[0]
        @q << vartype(type)
        a.shift
      end
#      p a
      @q << [:TEXT,a.shift]      
      a.shift
#      p a
       @q << ['=', '=']
       symbols="()+-*/"
       a.each{|x|
       if symbols.index(x)
         @q << [x,x]
       else
           @q << [:TEXT,x]
       end
     }
      @q << [:EOL,:EOL]
    end
   }
  p @q
  do_parse
end
def next_token
  @q.shift
end
...end kernelparser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    45,    46,    43,    44,    45,    46,    43,    44,    40,    37,
    45,    46,    37,    37,    45,    46,    37,    37,    56,    41,
    37,    36,    59,    35,    36,    36,    35,    35,    36,    36,
    35,    35,    36,    37,    35,     8,    37,    21,    22,    23,
    24,    25,     5,     6,     7,    36,    17,    35,    36,    18,
    35,    21,    22,    23,    24,    25,    45,    46,    43,    44,
    42,    45,    46,    43,    44,    58,    21,    22,    23,    24,
    12,    13,    14,     5,     6,     7,    12,    13,    14,    29,
    31,    32,    17,    38,    48,    49,    51 ]

racc_action_check = [
    47,    47,    47,    47,    57,    57,    57,    57,    33,    31,
    52,    52,    35,    38,    53,    53,    43,    44,    47,    33,
    45,    31,    57,    31,    35,    38,    35,    38,    43,    44,
    43,    44,    45,    46,    45,     1,    48,     9,     9,     9,
     9,     9,     0,     0,     0,    46,     4,    46,    48,     8,
    48,    20,    20,    20,    20,    20,    34,    34,    34,    34,
    34,    50,    50,    50,    50,    50,    11,    11,    11,    11,
     2,     2,     2,     3,     3,     3,    10,    10,    10,    16,
    25,    26,    28,    32,    36,    37,    39 ]

racc_action_pointer = [
    31,    35,    62,    62,    28,   nil,   nil,   nil,    49,    23,
    68,    52,   nil,   nil,   nil,   nil,    72,   nil,   nil,   nil,
    37,   nil,   nil,   nil,   nil,    61,    63,   nil,    64,   nil,
   nil,     3,    64,     1,    53,     6,    64,    67,     7,    79,
   nil,   nil,   nil,    10,    11,    14,    27,    -3,    30,   nil,
    58,   nil,     7,    11,   nil,   nil,   nil,     1,   nil,   nil ]

racc_action_default = [
   -33,   -33,   -33,    -2,   -33,   -14,   -15,   -16,   -33,   -33,
    -4,   -33,   -10,   -11,   -12,    -3,   -33,   -21,    60,    -1,
    -6,   -17,   -18,   -19,   -20,   -33,   -33,    -5,   -33,   -13,
    -7,   -33,   -33,   -33,   -33,   -33,   -32,   -33,   -33,   -33,
    -9,   -22,   -23,   -33,   -33,   -33,   -33,   -33,   -33,   -31,
   -33,    -8,   -25,   -26,   -27,   -28,   -29,   -33,   -24,   -30 ]

racc_goto_table = [
    16,    34,     9,     1,     2,    47,    19,    15,    50,    28,
    27,    39,   nil,    52,    53,    54,    55,    30,    57,   nil,
   nil,   nil,   nil,   nil,    33 ]

racc_goto_check = [
    10,    13,     3,     1,     2,    13,     4,     2,    13,     9,
     3,    11,   nil,    13,    13,    13,    13,     4,    13,   nil,
   nil,   nil,   nil,   nil,    10 ]

racc_goto_pointer = [
   nil,     3,     4,     0,    -3,   nil,   nil,   nil,   nil,    -2,
    -4,   -22,   nil,   -30 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     3,    10,    20,    11,    26,
   nil,   nil,     4,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 23, :_reduce_1,
  1, 24, :_reduce_none,
  2, 24, :_reduce_3,
  1, 25, :_reduce_none,
  2, 25, :_reduce_5,
  1, 26, :_reduce_none,
  2, 26, :_reduce_7,
  5, 28, :_reduce_8,
  4, 28, :_reduce_9,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  3, 27, :_reduce_13,
  1, 34, :_reduce_none,
  1, 34, :_reduce_none,
  1, 34, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 32, :_reduce_none,
  1, 33, :_reduce_none,
  4, 29, :_reduce_23,
  5, 29, :_reduce_24,
  3, 35, :_reduce_25,
  3, 35, :_reduce_26,
  3, 35, :_reduce_27,
  3, 35, :_reduce_28,
  3, 35, :_reduce_29,
  4, 35, :_reduce_30,
  2, 35, :_reduce_31,
  1, 35, :_reduce_32 ]

racc_reduce_n = 33

racc_shift_n = 60

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  "*" => 3,
  "/" => 4,
  "+" => 5,
  "-" => 6,
  :EOL => 7,
  :IIN => 8,
  :JIN => 9,
  :IOUT => 10,
  :EPINAME => 11,
  :EPJNAME => 12,
  :FNAME => 13,
  :F64VEC => 14,
  :F64 => 15,
  :I64 => 16,
  :I32 => 17,
  :TEXT => 18,
  "=" => 19,
  "(" => 20,
  ")" => 21 }

racc_nt_base = 22

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "EOL",
  "IIN",
  "JIN",
  "IOUT",
  "EPINAME",
  "EPJNAME",
  "FNAME",
  "F64VEC",
  "F64",
  "I64",
  "I32",
  "TEXT",
  "\"=\"",
  "\"(\"",
  "\")\"",
  "$start",
  "innerkernel",
  "nsdeclarations",
  "iodeclarations",
  "statements",
  "nsdeclaration",
  "iodeclaration",
  "statement",
  "iotype",
  "type",
  "varname",
  "fdpsname",
  "nstype",
  "expression" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'kernelparser.y', 9)
  def _reduce_1(val, _values, result)
    result=Kernelprogram.new(val)
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'kernelparser.y', 11)
  def _reduce_3(val, _values, result)
    result = val[0]+val[1]
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'kernelparser.y', 13)
  def _reduce_5(val, _values, result)
    result = val[0]+val[1]
    result
  end
.,.,

# reduce 6 omitted

module_eval(<<'.,.,', 'kernelparser.y', 15)
  def _reduce_7(val, _values, result)
    result = val[0]+val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 16)
  def _reduce_8(val, _values, result)
    result = [Iodeclaration.new(val)]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 17)
  def _reduce_9(val, _values, result)
    result=[Iodeclaration.new(val[0..2]+[val[2]])]
    result
  end
.,.,

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'kernelparser.y', 21)
  def _reduce_13(val, _values, result)
    result = [Nsdeclaration.new(val)]
    result
  end
.,.,

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'kernelparser.y', 31)
  def _reduce_23(val, _values, result)
    result = [Statement.new([nil,val[0],val[2]])]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 32)
  def _reduce_24(val, _values, result)
    result = [Statement.new([val[0],val[1],val[3]])]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 33)
  def _reduce_25(val, _values, result)
    result=Expression.new([:plus, val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 34)
  def _reduce_26(val, _values, result)
    result=Expression.new([:minus, val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 35)
  def _reduce_27(val, _values, result)
    result=Expression.new([:mult, val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 36)
  def _reduce_28(val, _values, result)
    result=Expression.new([:div, val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 37)
  def _reduce_29(val, _values, result)
    result=val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 38)
  def _reduce_30(val, _values, result)
    result=Expression.new([:func, val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 39)
  def _reduce_31(val, _values, result)
    result=Expression.new([:uminus, val[0],nil])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 40)
  def _reduce_32(val, _values, result)
    result=val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class KernelParser
