# (i) Choose code
para_type = serial
#para_type = omp
#para_type = flat_mpi
#para_type = hybrid

# (ii) Compiler, compile options, etc.
FFTW_LOC  = /usr/local/fftw/3.3.8-openmpi-gcc8
FFTW_INC  = -I$(FFTW_LOC)/include
ifeq ($(para_type),serial)
FFTW_LIB  = -L$(FFTW_LOC)/lib -lfftw3 
CXX=time -p g++-mp-8
MACRO = -DPARALLELIZATION_TYPE=0
endif
ifeq ($(para_type),omp)
FFTW_LIB  = -L$(FFTW_LOC)/lib -lfftw3_omp -lfftw3
CXX=time -p g++-mp-8 -fopenmp
MACRO = -DPARALLELIZATION_TYPE=1
endif
ifeq ($(para_type),flat_mpi)
FFTW_LIB  = -L$(FFTW_LOC)/lib -lfftw3_mpi -lfftw3
CXX=time -p mpicxx-openmpi-gcc8 
MACRO = -DPARALLELIZATION_TYPE=2
endif
ifeq ($(para_type),hybrid)
FFTW_LIB  = -L$(FFTW_LOC)/lib -lfftw3_mpi -lfftw3_omp -lfftw3
CXX=time -p mpicxx-openmpi-gcc8 -fopenmp
MACRO = -DPARALLELIZATION_TYPE=3
endif
LDFLAGS   = $(FFTW_LIB)

CXXFLAGS = -std=c++11 -O3 -ffast-math -funroll-loops
CXXFLAGS += $(MACRO) $(FFTW_INC)

# (iii) Job submission variables
ifeq ($(para_type),serial)
WORKDIR = ./work-macports/serial
endif
ifeq ($(para_type),omp)
WORKDIR = ./work-macports/omp
endif
ifeq ($(para_type),flat_mpi)
WORKDIR = ./work-macports/flat_mpi
endif
ifeq ($(para_type),hybrid)
WORKDIR = ./work-macports/hybrid
endif

# (iv) Executable
TARGET	= fft.out


all: $(TARGET)

$(TARGET): main.o
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS)
	mkdir -p $(WORKDIR)
	mv $@ $(WORKDIR)

main.o: main.cpp 
	$(CXX) $(CXXFLAGS) -c $< 

clean:
	rm -f *.o

distclean: clean
	rm -f $(TARGET)
	rm -f *.txt
