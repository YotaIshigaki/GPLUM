# (i) FDPS setting
FDPS_ROOT = ../../../../../
INC = -I$(FDPS_ROOT)/src
LIBS =

# (ii) ASRCH setting
ASRCH_ROOT=./asrch/src
INC += -I$(ASRCH_ROOT)
LIBS += -L$(ASRCH_ROOT) -lASRCH

# (iii) CELib setting
CELIB_ROOT=./celib/src
INC += -I$(CELIB_ROOT)
LIBS += -L$(CELIB_ROOT) -lCELib

# (iii) Compiler, compile options, etc.
#CXX=time -p icpc
CXX=time -p mpiicpc
#CXXFLAGS = -std=c++11 -O0 -ftrapuv -debug all -g
CXXFLAGS = -std=c++11 -O3 -ipo -xCORE-AVX512 -no-prec-div
#### [Important] ####
#  The following options may be needed to keep
#  the reproducibility of the run.
#  Adding the options may cause a drop in performance,
#  but is useful when debugging the code.
#  (for details, see ./doc/Under_What_Conditions*.pdf)
CXXFLASG += -qno-opt-dynamic-align
CXXFLAGS += -fimf-use-svml 
CXXFLAGS += -fp-model consistent
#####################
#CXXFLAGS += -DPARTICLE_SIMULATOR_THREAD_PARALLEL -qopenmp
CXXFLAGS += -DPARTICLE_SIMULATOR_MPI_PARALLEL
CXXFLAGS += -DENABLE_NAN_CHECK
CXXFLAGS += -DFORCE_QUIT_IN_NAN_CHECK

# Simulation control macros 
#---------------------------------
# (a) Macros for SPH
#---------------------------------
CXXFLAGS += -DUSE_ENTROPY
CXXFLAGS += -DUSE_BALSARA_SWITCH
#CXXFLAGS += -DUSE_PRESCR_OF_THOMAS_COUCHMAN_1992
#CXXFLAGS += -DISOTHERMAL_EOS

# Macros for density calculation
#CXXFLAGS += -DSET_LIMIT_TO_ITERATION_IN_CALC_DENSITY
#CXXFLAGS += -DUSE_NEWTON_METHOD_FROM_THE_BEGINNING
#CXXFLAGS += -DPRINT_DEBUG_INFO_IN_CALC_DENSITY

#---------------------------------
# (b) Macros for I/O
#---------------------------------
#CXXFLAGS += -DREAD_DATA_WITH_BYTESWAP

#---------------------------------
# (c) Macros for cooling/heating
#---------------------------------
CXXFLAGS += -DENABLE_COOLING_HEATING
#CXXFLAGS += -DENABLE_FUV_HEATING
CXXFLAGS += -DASRCH_OLD_API

#---------------------------------
# (d) Macros for star formation 
#---------------------------------
CXXFLAGS += -DENABLE_STAR_FORMATION
CXXFLAGS += -DENABLE_SF_CHECK

#---------------------------------
# (e) Macros for stellar feedback
#---------------------------------
CXXFLAGS += -DENABLE_STELLAR_FEEDBACK
CXXFLAGS += -DENABLE_FB_CHECK



# (ii) Phantom-GRAPE library
#use_phantom_grape_x86 = yes
ifeq ($(use_phantom_grape_x86),yes)
PG_ROOT = $(FDPS_ROOT)/src/phantom_grape_x86/G5/newton/libpg5
INC += -I$(PG_ROOT)
CXXFLAGS += -DENABLE_PHANTOM_GRAPE_X86
LIBS += -L$(PG_ROOT) -lpg5
PG_BUILD = cd $(PG_ROOT) && $(MAKE) distclean libpg5.a
PG_CLEAN = cd $(PG_ROOT) && $(MAKE) distclean
else
PG_BUILD =
PG_CLEAN = 
endif

# (iii) Job submission variables
QSUB = pjsub
JOB_FILE_NAME = job.hokusai-bw.sh
WORKDIR = ./work-hokusai-bw/develop
#WORKDIR = ./work-hokusai-bw/cooling_w_fuv
#WORKDIR = ./work-hokusai-bw/cooling_wo_fuv
#WORKDIR = ./work-hokusai-bw/cooling_wo_fuv+sf
#WORKDIR = ./work-hokusai-bw/cooling_wo_fuv+sf+fb

# (iv) Executable
CPPOBJS = $(patsubst %.cpp, %.o, $(wildcard *.cpp))
CPPHDRS = $(wildcard *.h) $(wildcard *.hpp)
PROGRAM = nbodysph.out

.PHONY:	clean all

all: $(CPPOBJS) $(CPPHDRS)
	$(PG_BUILD)
	$(CXX) $(CXXFLAGS) $(CPPOBJS) -o $(PROGRAM) $(INC) $(LIBS) 
	mkdir -p $(WORKDIR)
	mv $(PROGRAM) $(WORKDIR)
	cp $(JOB_FILE_NAME) $(WORKDIR)
	cp -fR ./magi_data $(WORKDIR)/
	cd $(WORKDIR); $(QSUB) $(JOB_FILE_NAME) 

%.o: %.cpp $(CPPHDRS)
	$(CXX) -c $< $(CXXFLAGS) $(INC)

clean:
	rm -f $(CPPOBJS)

distclean: clean
	$(PG_CLEAN)
	rm -f $(PROGRAM)
	rm -rf result

