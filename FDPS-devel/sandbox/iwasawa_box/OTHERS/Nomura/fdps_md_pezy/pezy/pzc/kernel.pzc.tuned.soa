#include<pzc_builtin.h>
#include"../class_device.hpp"

void pzc_ForceKernel(const int * j_disp,
                     const float * epi,
                     const float * epj,
                     ForceDev * force,
		     const int ni_tot,
		     const int nj_tot){
    const float cut_off2 = 4.5f*4.5f;

    const int tid = get_tid();
    const int pid = get_pid();

    const int index_offset = pid;
    const int index_base = get_maxpid();

    const float *epix = epi+0*ni_tot;
    const float *epiy = epi+1*ni_tot;
    const float *epiz = epi+2*ni_tot;
    const int *epi_id = (int*)(epi+3*ni_tot);
    const float *epjx = epj+0*nj_tot;
    const float *epjy = epj+1*nj_tot;
    const float *epjz = epj+2*nj_tot;

    //double4 *f = (double4*)0x2000; // stack size must be 0x4000
    double *lmd = (double*)0x2000; // stack size must be 0x4000
    float  *lmf =  (float*)0x2000; // stack size must be 0x4000

    for(int index=index_offset; index<ni_tot; index += index_base){
      double ax,ay,az,pot;
      sync_L1();
      const float xi = epix[index];
      const float yi = epiy[index];
      const float zi = epiz[index];
      const int id_walk = epi_id[index];
      chgthread();
      const int j_head  = j_disp[id_walk];
      const int j_tail  = j_disp[id_walk+1];
      chgthread();
      ax = ay = az = pot = 0.0;
      for(int j=j_head+tid; j<j_tail; j+=get_maxtid()){
	const float xj = epjx[j];
	const float yj = epjy[j];
	const float zj = epjz[j];
	chgthread();
	const float dx = xi - xj;
	const float dy = yi - yj;
	const float dz = zi - zj;
	const float r2 = (dx*dx + dy*dy) + dz*dz;
	if(r2 <= cut_off2 && r2 != 0.f){
	  const float r2_inv = 1.f / r2;
	  chgthread(); // is it proper to put division before if statement?
	  const float r6_inv = r2_inv*r2_inv*r2_inv;
	  const float r12_inv = r6_inv*r6_inv;
	  float dphi = (48.f*r12_inv - 24.f*r6_inv)*r2_inv;
	  ax  += (double)(dphi * dx);
	  ay  += (double)(dphi * dy);
	  az  += (double)(dphi * dz);
	  pot += (double)(4.f * (r12_inv - r6_inv));
	}
      }
      // assuming maxtid == 8
      lmd[4*tid+0] = ax;
      lmd[4*tid+1] = ay;
      lmd[4*tid+2] = az;
      lmd[4*tid+3] = pot;
      sync_L1();
      if(tid==0){
	for(int i=1;i<8;i++){
	  lmd[0] += lmd[4*i+0];
	  lmd[1] += lmd[4*i+1];
	  lmd[2] += lmd[4*i+2];
	  lmd[3] += lmd[4*i+3];
	}
	force[index].ax  = lmd[0];
	force[index].ay  = lmd[1];
	force[index].az  = lmd[2];
	force[index].pot = lmd[3];
      }
      sync_L1();
    }
    flush();
}
