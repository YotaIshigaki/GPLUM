#include<pzc_builtin.h>
#include"../class_device.hpp"

void pzc_ForceKernel(const int * j_disp,
                     const EpiDev * epi,
                     const EpjDev * epj,
                     ForceDev * force,
                     const int n_total){
    const float sigma[2][2] = {{1.0, 1.0,},{1.0, 1.0,}};
    const float eps[2][2] = {{1.0, 1.0,},{1.0, 1.0,}};
    const int k[2][2] = {{1, 0,},{0, 0,}};
    const int cut_off2 = 4.5*4.5;
    const int tid = get_tid();
    const int pid = get_pid();
    const int index_offset = pid * get_maxtid() + tid;
    const int index_base = get_maxtid()*get_maxpid();

    for(int index=index_offset; index<n_total; index += index_base){
        double ax, ay, az, pot;
        ax = ay = az = pot = 0.0;
        const EpiDev & ip = epi[index];
        const int id_walk = ip.id_walk;
        const int j_head = j_disp[id_walk];
        const int j_tail = j_disp[id_walk+1];
	const int cdvid_i = ip.cdvid;

        for(int j=j_head; j<j_tail; j++){
            const EpjDev & jp = epj[j];
            const int cdvid_j = jp.cdvid;
	    const float dx = ip.px - jp.px;
            const float dy = ip.py - jp.py;
            const float dz = ip.pz - jp.pz;
            const float r2 = (dx*dx + dy*dy) + dz*dz;

            if(r2 <= cut_off2 && r2!=0){
	    	const int k_tc = k[cdvid_i - 1][cdvid_j - 1];
        	const float eps_tc = eps[cdvid_i -1][cdvid_j - 1];  
		const float sigma_tc = sigma[cdvid_i -1][cdvid_j - 1];
                const float r2_inv = (sigma_tc*sigma_tc)/r2;
		const float r6_inv = r2_inv*r2_inv*r2_inv;
	        const float r12_inv = r6_inv*r6_inv;
        	pot += 4.0*eps_tc*(r12_inv - k_tc*r6_inv);
	    	const float dphi = 4.0*eps_tc*(12.0*r12_inv*r2_inv - 6.0*k_tc*r6_inv*r2_inv);
	    	ax  += dphi * dx;
            	ay  += dphi * dy; 
            	az  += dphi * dz;
	    }
        }
        force[index].pot = pot;
        force[index].ax = ax;
        force[index].ay = ay;
        force[index].az = az;
    }
    flush();
}
